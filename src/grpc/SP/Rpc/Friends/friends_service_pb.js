// source: SP/Rpc/Friends/friends_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var SP_Rpc_Emerald_basic_request_context_pb = require('../../../SP/Rpc/Emerald/basic_request_context_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_basic_request_context_pb);
var SP_Rpc_Friends_friend_pb = require('../../../SP/Rpc/Friends/friend_pb.js');
goog.object.extend(proto, SP_Rpc_Friends_friend_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.sp.rpc.friends.AddFriendRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.AddFriendResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.AmountOfFriendsRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.AmountOfFriendsResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.AmountOfInvitationsRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.AmountOfInvitationsResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.InviteFriendRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.InviteFriendRequest.DataCase', null, global);
goog.exportSymbol('proto.sp.rpc.friends.InviteFriendResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.ListFriendsRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.ListFriendsResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.ListInvitationsRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.ListInvitationsResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.ListSuggestionsRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.ListSuggestionsResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.NewFriendNotification', null, global);
goog.exportSymbol('proto.sp.rpc.friends.NewInvitationNotification', null, global);
goog.exportSymbol('proto.sp.rpc.friends.RemoveFriendRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.RemoveFriendResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.RemovedFriendNotification', null, global);
goog.exportSymbol('proto.sp.rpc.friends.RespondInvitationRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.RespondInvitationRequest.InviteResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.RespondInvitationResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.RetrieveUserCodeRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.RetrieveUserCodeResponse', null, global);
goog.exportSymbol('proto.sp.rpc.friends.SuggestFriendRequest', null, global);
goog.exportSymbol('proto.sp.rpc.friends.SuggestFriendResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.RetrieveUserCodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.RetrieveUserCodeRequest.displayName = 'proto.sp.rpc.friends.RetrieveUserCodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.RetrieveUserCodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.RetrieveUserCodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.RetrieveUserCodeResponse.displayName = 'proto.sp.rpc.friends.RetrieveUserCodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.ListFriendsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.ListFriendsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.ListFriendsRequest.displayName = 'proto.sp.rpc.friends.ListFriendsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.ListFriendsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.friends.ListFriendsResponse.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.friends.ListFriendsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.ListFriendsResponse.displayName = 'proto.sp.rpc.friends.ListFriendsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.InviteFriendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sp.rpc.friends.InviteFriendRequest.oneofGroups_);
};
goog.inherits(proto.sp.rpc.friends.InviteFriendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.InviteFriendRequest.displayName = 'proto.sp.rpc.friends.InviteFriendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.InviteFriendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.InviteFriendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.InviteFriendResponse.displayName = 'proto.sp.rpc.friends.InviteFriendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.AddFriendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.AddFriendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.AddFriendRequest.displayName = 'proto.sp.rpc.friends.AddFriendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.AddFriendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.AddFriendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.AddFriendResponse.displayName = 'proto.sp.rpc.friends.AddFriendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.AmountOfFriendsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.AmountOfFriendsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.AmountOfFriendsRequest.displayName = 'proto.sp.rpc.friends.AmountOfFriendsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.AmountOfFriendsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.AmountOfFriendsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.AmountOfFriendsResponse.displayName = 'proto.sp.rpc.friends.AmountOfFriendsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.RemoveFriendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.RemoveFriendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.RemoveFriendRequest.displayName = 'proto.sp.rpc.friends.RemoveFriendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.RemoveFriendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.RemoveFriendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.RemoveFriendResponse.displayName = 'proto.sp.rpc.friends.RemoveFriendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.ListInvitationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.ListInvitationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.ListInvitationsRequest.displayName = 'proto.sp.rpc.friends.ListInvitationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.ListInvitationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.friends.ListInvitationsResponse.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.friends.ListInvitationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.ListInvitationsResponse.displayName = 'proto.sp.rpc.friends.ListInvitationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.RespondInvitationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.RespondInvitationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.RespondInvitationRequest.displayName = 'proto.sp.rpc.friends.RespondInvitationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.RespondInvitationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.RespondInvitationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.RespondInvitationResponse.displayName = 'proto.sp.rpc.friends.RespondInvitationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.AmountOfInvitationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.AmountOfInvitationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.AmountOfInvitationsRequest.displayName = 'proto.sp.rpc.friends.AmountOfInvitationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.AmountOfInvitationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.AmountOfInvitationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.AmountOfInvitationsResponse.displayName = 'proto.sp.rpc.friends.AmountOfInvitationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.SuggestFriendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.SuggestFriendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.SuggestFriendRequest.displayName = 'proto.sp.rpc.friends.SuggestFriendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.SuggestFriendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.SuggestFriendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.SuggestFriendResponse.displayName = 'proto.sp.rpc.friends.SuggestFriendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.ListSuggestionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.ListSuggestionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.ListSuggestionsRequest.displayName = 'proto.sp.rpc.friends.ListSuggestionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.ListSuggestionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.friends.ListSuggestionsResponse.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.friends.ListSuggestionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.ListSuggestionsResponse.displayName = 'proto.sp.rpc.friends.ListSuggestionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.NewFriendNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.NewFriendNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.NewFriendNotification.displayName = 'proto.sp.rpc.friends.NewFriendNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.RemovedFriendNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.RemovedFriendNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.RemovedFriendNotification.displayName = 'proto.sp.rpc.friends.RemovedFriendNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.friends.NewInvitationNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.friends.NewInvitationNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.friends.NewInvitationNotification.displayName = 'proto.sp.rpc.friends.NewInvitationNotification';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.RetrieveUserCodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.RetrieveUserCodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.RetrieveUserCodeRequest}
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.RetrieveUserCodeRequest;
  return proto.sp.rpc.friends.RetrieveUserCodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.RetrieveUserCodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.RetrieveUserCodeRequest}
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.RetrieveUserCodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.RetrieveUserCodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.RetrieveUserCodeRequest} returns this
*/
proto.sp.rpc.friends.RetrieveUserCodeRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.RetrieveUserCodeRequest} returns this
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 user_id = 2;
 * @return {number}
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.friends.RetrieveUserCodeRequest} returns this
 */
proto.sp.rpc.friends.RetrieveUserCodeRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.RetrieveUserCodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.RetrieveUserCodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.RetrieveUserCodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RetrieveUserCodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userCode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.RetrieveUserCodeResponse}
 */
proto.sp.rpc.friends.RetrieveUserCodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.RetrieveUserCodeResponse;
  return proto.sp.rpc.friends.RetrieveUserCodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.RetrieveUserCodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.RetrieveUserCodeResponse}
 */
proto.sp.rpc.friends.RetrieveUserCodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.RetrieveUserCodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.RetrieveUserCodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.RetrieveUserCodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RetrieveUserCodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_code = 1;
 * @return {string}
 */
proto.sp.rpc.friends.RetrieveUserCodeResponse.prototype.getUserCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.friends.RetrieveUserCodeResponse} returns this
 */
proto.sp.rpc.friends.RetrieveUserCodeResponse.prototype.setUserCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.ListFriendsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.ListFriendsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.ListFriendsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListFriendsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.ListFriendsRequest}
 */
proto.sp.rpc.friends.ListFriendsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.ListFriendsRequest;
  return proto.sp.rpc.friends.ListFriendsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.ListFriendsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.ListFriendsRequest}
 */
proto.sp.rpc.friends.ListFriendsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.ListFriendsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.ListFriendsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.ListFriendsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListFriendsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.ListFriendsRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.ListFriendsRequest} returns this
*/
proto.sp.rpc.friends.ListFriendsRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.ListFriendsRequest} returns this
 */
proto.sp.rpc.friends.ListFriendsRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.ListFriendsRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.friends.ListFriendsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.ListFriendsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.ListFriendsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.ListFriendsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListFriendsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    friendsListList: jspb.Message.toObjectList(msg.getFriendsListList(),
    SP_Rpc_Friends_friend_pb.Friend.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.ListFriendsResponse}
 */
proto.sp.rpc.friends.ListFriendsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.ListFriendsResponse;
  return proto.sp.rpc.friends.ListFriendsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.ListFriendsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.ListFriendsResponse}
 */
proto.sp.rpc.friends.ListFriendsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Friends_friend_pb.Friend;
      reader.readMessage(value,SP_Rpc_Friends_friend_pb.Friend.deserializeBinaryFromReader);
      msg.addFriendsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.ListFriendsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.ListFriendsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.ListFriendsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListFriendsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendsListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      SP_Rpc_Friends_friend_pb.Friend.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Friend friends_list = 1;
 * @return {!Array<!proto.sp.rpc.friends.Friend>}
 */
proto.sp.rpc.friends.ListFriendsResponse.prototype.getFriendsListList = function() {
  return /** @type{!Array<!proto.sp.rpc.friends.Friend>} */ (
    jspb.Message.getRepeatedWrapperField(this, SP_Rpc_Friends_friend_pb.Friend, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.friends.Friend>} value
 * @return {!proto.sp.rpc.friends.ListFriendsResponse} returns this
*/
proto.sp.rpc.friends.ListFriendsResponse.prototype.setFriendsListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.friends.Friend=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.friends.Friend}
 */
proto.sp.rpc.friends.ListFriendsResponse.prototype.addFriendsList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.friends.Friend, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.friends.ListFriendsResponse} returns this
 */
proto.sp.rpc.friends.ListFriendsResponse.prototype.clearFriendsListList = function() {
  return this.setFriendsListList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sp.rpc.friends.InviteFriendRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.sp.rpc.friends.InviteFriendRequest.DataCase = {
  DATA_NOT_SET: 0,
  USER_ID: 2,
  USER_CODE: 3
};

/**
 * @return {proto.sp.rpc.friends.InviteFriendRequest.DataCase}
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.getDataCase = function() {
  return /** @type {proto.sp.rpc.friends.InviteFriendRequest.DataCase} */(jspb.Message.computeOneofCase(this, proto.sp.rpc.friends.InviteFriendRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.InviteFriendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.InviteFriendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.InviteFriendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userCode: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.InviteFriendRequest}
 */
proto.sp.rpc.friends.InviteFriendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.InviteFriendRequest;
  return proto.sp.rpc.friends.InviteFriendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.InviteFriendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.InviteFriendRequest}
 */
proto.sp.rpc.friends.InviteFriendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.InviteFriendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.InviteFriendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.InviteFriendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.InviteFriendRequest} returns this
*/
proto.sp.rpc.friends.InviteFriendRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.InviteFriendRequest} returns this
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 user_id = 2;
 * @return {number}
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.friends.InviteFriendRequest} returns this
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.setUserId = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.sp.rpc.friends.InviteFriendRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sp.rpc.friends.InviteFriendRequest} returns this
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.clearUserId = function() {
  return jspb.Message.setOneofField(this, 2, proto.sp.rpc.friends.InviteFriendRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string user_code = 3;
 * @return {string}
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.getUserCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.friends.InviteFriendRequest} returns this
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.setUserCode = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.sp.rpc.friends.InviteFriendRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sp.rpc.friends.InviteFriendRequest} returns this
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.clearUserCode = function() {
  return jspb.Message.setOneofField(this, 3, proto.sp.rpc.friends.InviteFriendRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.InviteFriendRequest.prototype.hasUserCode = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.InviteFriendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.InviteFriendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.InviteFriendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.InviteFriendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.InviteFriendResponse}
 */
proto.sp.rpc.friends.InviteFriendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.InviteFriendResponse;
  return proto.sp.rpc.friends.InviteFriendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.InviteFriendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.InviteFriendResponse}
 */
proto.sp.rpc.friends.InviteFriendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.InviteFriendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.InviteFriendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.InviteFriendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.InviteFriendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.AddFriendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.AddFriendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.AddFriendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AddFriendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    userCode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.AddFriendRequest}
 */
proto.sp.rpc.friends.AddFriendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.AddFriendRequest;
  return proto.sp.rpc.friends.AddFriendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.AddFriendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.AddFriendRequest}
 */
proto.sp.rpc.friends.AddFriendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.AddFriendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.AddFriendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.AddFriendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AddFriendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getUserCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.AddFriendRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.AddFriendRequest} returns this
*/
proto.sp.rpc.friends.AddFriendRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.AddFriendRequest} returns this
 */
proto.sp.rpc.friends.AddFriendRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.AddFriendRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_code = 2;
 * @return {string}
 */
proto.sp.rpc.friends.AddFriendRequest.prototype.getUserCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.friends.AddFriendRequest} returns this
 */
proto.sp.rpc.friends.AddFriendRequest.prototype.setUserCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.AddFriendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.AddFriendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.AddFriendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AddFriendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.AddFriendResponse}
 */
proto.sp.rpc.friends.AddFriendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.AddFriendResponse;
  return proto.sp.rpc.friends.AddFriendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.AddFriendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.AddFriendResponse}
 */
proto.sp.rpc.friends.AddFriendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.AddFriendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.AddFriendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.AddFriendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AddFriendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.AmountOfFriendsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.AmountOfFriendsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.AmountOfFriendsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AmountOfFriendsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.AmountOfFriendsRequest}
 */
proto.sp.rpc.friends.AmountOfFriendsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.AmountOfFriendsRequest;
  return proto.sp.rpc.friends.AmountOfFriendsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.AmountOfFriendsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.AmountOfFriendsRequest}
 */
proto.sp.rpc.friends.AmountOfFriendsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.AmountOfFriendsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.AmountOfFriendsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.AmountOfFriendsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AmountOfFriendsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.AmountOfFriendsRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.AmountOfFriendsRequest} returns this
*/
proto.sp.rpc.friends.AmountOfFriendsRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.AmountOfFriendsRequest} returns this
 */
proto.sp.rpc.friends.AmountOfFriendsRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.AmountOfFriendsRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.AmountOfFriendsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.AmountOfFriendsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.AmountOfFriendsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AmountOfFriendsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.AmountOfFriendsResponse}
 */
proto.sp.rpc.friends.AmountOfFriendsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.AmountOfFriendsResponse;
  return proto.sp.rpc.friends.AmountOfFriendsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.AmountOfFriendsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.AmountOfFriendsResponse}
 */
proto.sp.rpc.friends.AmountOfFriendsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.AmountOfFriendsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.AmountOfFriendsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.AmountOfFriendsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AmountOfFriendsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 amount = 1;
 * @return {number}
 */
proto.sp.rpc.friends.AmountOfFriendsResponse.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.friends.AmountOfFriendsResponse} returns this
 */
proto.sp.rpc.friends.AmountOfFriendsResponse.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.RemoveFriendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.RemoveFriendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.RemoveFriendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RemoveFriendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.RemoveFriendRequest}
 */
proto.sp.rpc.friends.RemoveFriendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.RemoveFriendRequest;
  return proto.sp.rpc.friends.RemoveFriendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.RemoveFriendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.RemoveFriendRequest}
 */
proto.sp.rpc.friends.RemoveFriendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.RemoveFriendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.RemoveFriendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.RemoveFriendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RemoveFriendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.RemoveFriendRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.RemoveFriendRequest} returns this
*/
proto.sp.rpc.friends.RemoveFriendRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.RemoveFriendRequest} returns this
 */
proto.sp.rpc.friends.RemoveFriendRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.RemoveFriendRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 user_id = 2;
 * @return {number}
 */
proto.sp.rpc.friends.RemoveFriendRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.friends.RemoveFriendRequest} returns this
 */
proto.sp.rpc.friends.RemoveFriendRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.RemoveFriendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.RemoveFriendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.RemoveFriendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RemoveFriendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.RemoveFriendResponse}
 */
proto.sp.rpc.friends.RemoveFriendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.RemoveFriendResponse;
  return proto.sp.rpc.friends.RemoveFriendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.RemoveFriendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.RemoveFriendResponse}
 */
proto.sp.rpc.friends.RemoveFriendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.RemoveFriendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.RemoveFriendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.RemoveFriendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RemoveFriendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.ListInvitationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.ListInvitationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.ListInvitationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListInvitationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.ListInvitationsRequest}
 */
proto.sp.rpc.friends.ListInvitationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.ListInvitationsRequest;
  return proto.sp.rpc.friends.ListInvitationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.ListInvitationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.ListInvitationsRequest}
 */
proto.sp.rpc.friends.ListInvitationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.ListInvitationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.ListInvitationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.ListInvitationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListInvitationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.ListInvitationsRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.ListInvitationsRequest} returns this
*/
proto.sp.rpc.friends.ListInvitationsRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.ListInvitationsRequest} returns this
 */
proto.sp.rpc.friends.ListInvitationsRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.ListInvitationsRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.friends.ListInvitationsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.ListInvitationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.ListInvitationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.ListInvitationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListInvitationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    invitationsListList: jspb.Message.toObjectList(msg.getInvitationsListList(),
    SP_Rpc_Friends_friend_pb.FriendInvitation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.ListInvitationsResponse}
 */
proto.sp.rpc.friends.ListInvitationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.ListInvitationsResponse;
  return proto.sp.rpc.friends.ListInvitationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.ListInvitationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.ListInvitationsResponse}
 */
proto.sp.rpc.friends.ListInvitationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Friends_friend_pb.FriendInvitation;
      reader.readMessage(value,SP_Rpc_Friends_friend_pb.FriendInvitation.deserializeBinaryFromReader);
      msg.addInvitationsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.ListInvitationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.ListInvitationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.ListInvitationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListInvitationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvitationsListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      SP_Rpc_Friends_friend_pb.FriendInvitation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendInvitation invitations_list = 1;
 * @return {!Array<!proto.sp.rpc.friends.FriendInvitation>}
 */
proto.sp.rpc.friends.ListInvitationsResponse.prototype.getInvitationsListList = function() {
  return /** @type{!Array<!proto.sp.rpc.friends.FriendInvitation>} */ (
    jspb.Message.getRepeatedWrapperField(this, SP_Rpc_Friends_friend_pb.FriendInvitation, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.friends.FriendInvitation>} value
 * @return {!proto.sp.rpc.friends.ListInvitationsResponse} returns this
*/
proto.sp.rpc.friends.ListInvitationsResponse.prototype.setInvitationsListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.friends.FriendInvitation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.friends.FriendInvitation}
 */
proto.sp.rpc.friends.ListInvitationsResponse.prototype.addInvitationsList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.friends.FriendInvitation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.friends.ListInvitationsResponse} returns this
 */
proto.sp.rpc.friends.ListInvitationsResponse.prototype.clearInvitationsListList = function() {
  return this.setInvitationsListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.RespondInvitationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.RespondInvitationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.RespondInvitationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RespondInvitationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    response: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.RespondInvitationRequest}
 */
proto.sp.rpc.friends.RespondInvitationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.RespondInvitationRequest;
  return proto.sp.rpc.friends.RespondInvitationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.RespondInvitationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.RespondInvitationRequest}
 */
proto.sp.rpc.friends.RespondInvitationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.sp.rpc.friends.RespondInvitationRequest.InviteResponse} */ (reader.readEnum());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.RespondInvitationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.RespondInvitationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.RespondInvitationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RespondInvitationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sp.rpc.friends.RespondInvitationRequest.InviteResponse = {
  ACCEPT: 0,
  DECLINE: 1
};

/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.RespondInvitationRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.RespondInvitationRequest} returns this
*/
proto.sp.rpc.friends.RespondInvitationRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.RespondInvitationRequest} returns this
 */
proto.sp.rpc.friends.RespondInvitationRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.RespondInvitationRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 user_id = 2;
 * @return {number}
 */
proto.sp.rpc.friends.RespondInvitationRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.friends.RespondInvitationRequest} returns this
 */
proto.sp.rpc.friends.RespondInvitationRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional InviteResponse response = 3;
 * @return {!proto.sp.rpc.friends.RespondInvitationRequest.InviteResponse}
 */
proto.sp.rpc.friends.RespondInvitationRequest.prototype.getResponse = function() {
  return /** @type {!proto.sp.rpc.friends.RespondInvitationRequest.InviteResponse} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.sp.rpc.friends.RespondInvitationRequest.InviteResponse} value
 * @return {!proto.sp.rpc.friends.RespondInvitationRequest} returns this
 */
proto.sp.rpc.friends.RespondInvitationRequest.prototype.setResponse = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.RespondInvitationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.RespondInvitationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.RespondInvitationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RespondInvitationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.RespondInvitationResponse}
 */
proto.sp.rpc.friends.RespondInvitationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.RespondInvitationResponse;
  return proto.sp.rpc.friends.RespondInvitationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.RespondInvitationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.RespondInvitationResponse}
 */
proto.sp.rpc.friends.RespondInvitationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.RespondInvitationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.RespondInvitationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.RespondInvitationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RespondInvitationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.AmountOfInvitationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.AmountOfInvitationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.AmountOfInvitationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AmountOfInvitationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.AmountOfInvitationsRequest}
 */
proto.sp.rpc.friends.AmountOfInvitationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.AmountOfInvitationsRequest;
  return proto.sp.rpc.friends.AmountOfInvitationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.AmountOfInvitationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.AmountOfInvitationsRequest}
 */
proto.sp.rpc.friends.AmountOfInvitationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.AmountOfInvitationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.AmountOfInvitationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.AmountOfInvitationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AmountOfInvitationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.AmountOfInvitationsRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.AmountOfInvitationsRequest} returns this
*/
proto.sp.rpc.friends.AmountOfInvitationsRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.AmountOfInvitationsRequest} returns this
 */
proto.sp.rpc.friends.AmountOfInvitationsRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.AmountOfInvitationsRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.AmountOfInvitationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.AmountOfInvitationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.AmountOfInvitationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AmountOfInvitationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.AmountOfInvitationsResponse}
 */
proto.sp.rpc.friends.AmountOfInvitationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.AmountOfInvitationsResponse;
  return proto.sp.rpc.friends.AmountOfInvitationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.AmountOfInvitationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.AmountOfInvitationsResponse}
 */
proto.sp.rpc.friends.AmountOfInvitationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.AmountOfInvitationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.AmountOfInvitationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.AmountOfInvitationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.AmountOfInvitationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 amount = 1;
 * @return {number}
 */
proto.sp.rpc.friends.AmountOfInvitationsResponse.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.friends.AmountOfInvitationsResponse} returns this
 */
proto.sp.rpc.friends.AmountOfInvitationsResponse.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.SuggestFriendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.SuggestFriendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.SuggestFriendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.SuggestFriendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    suggestionData: (f = msg.getSuggestionData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.SuggestFriendRequest}
 */
proto.sp.rpc.friends.SuggestFriendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.SuggestFriendRequest;
  return proto.sp.rpc.friends.SuggestFriendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.SuggestFriendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.SuggestFriendRequest}
 */
proto.sp.rpc.friends.SuggestFriendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setSuggestionData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.SuggestFriendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.SuggestFriendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.SuggestFriendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.SuggestFriendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSuggestionData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.SuggestFriendRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.SuggestFriendRequest} returns this
*/
proto.sp.rpc.friends.SuggestFriendRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.SuggestFriendRequest} returns this
 */
proto.sp.rpc.friends.SuggestFriendRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.SuggestFriendRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 user_id = 2;
 * @return {number}
 */
proto.sp.rpc.friends.SuggestFriendRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.friends.SuggestFriendRequest} returns this
 */
proto.sp.rpc.friends.SuggestFriendRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Any suggestion_data = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.friends.SuggestFriendRequest.prototype.getSuggestionData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.friends.SuggestFriendRequest} returns this
*/
proto.sp.rpc.friends.SuggestFriendRequest.prototype.setSuggestionData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.SuggestFriendRequest} returns this
 */
proto.sp.rpc.friends.SuggestFriendRequest.prototype.clearSuggestionData = function() {
  return this.setSuggestionData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.SuggestFriendRequest.prototype.hasSuggestionData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.SuggestFriendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.SuggestFriendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.SuggestFriendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.SuggestFriendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.SuggestFriendResponse}
 */
proto.sp.rpc.friends.SuggestFriendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.SuggestFriendResponse;
  return proto.sp.rpc.friends.SuggestFriendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.SuggestFriendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.SuggestFriendResponse}
 */
proto.sp.rpc.friends.SuggestFriendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.SuggestFriendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.SuggestFriendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.SuggestFriendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.SuggestFriendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.ListSuggestionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.ListSuggestionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.ListSuggestionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListSuggestionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.ListSuggestionsRequest}
 */
proto.sp.rpc.friends.ListSuggestionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.ListSuggestionsRequest;
  return proto.sp.rpc.friends.ListSuggestionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.ListSuggestionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.ListSuggestionsRequest}
 */
proto.sp.rpc.friends.ListSuggestionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.ListSuggestionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.ListSuggestionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.ListSuggestionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListSuggestionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.friends.ListSuggestionsRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.friends.ListSuggestionsRequest} returns this
*/
proto.sp.rpc.friends.ListSuggestionsRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.ListSuggestionsRequest} returns this
 */
proto.sp.rpc.friends.ListSuggestionsRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.ListSuggestionsRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.friends.ListSuggestionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.ListSuggestionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.ListSuggestionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.ListSuggestionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListSuggestionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    friendSuggestionsList: jspb.Message.toObjectList(msg.getFriendSuggestionsList(),
    SP_Rpc_Friends_friend_pb.FriendSuggestion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.ListSuggestionsResponse}
 */
proto.sp.rpc.friends.ListSuggestionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.ListSuggestionsResponse;
  return proto.sp.rpc.friends.ListSuggestionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.ListSuggestionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.ListSuggestionsResponse}
 */
proto.sp.rpc.friends.ListSuggestionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Friends_friend_pb.FriendSuggestion;
      reader.readMessage(value,SP_Rpc_Friends_friend_pb.FriendSuggestion.deserializeBinaryFromReader);
      msg.addFriendSuggestions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.ListSuggestionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.ListSuggestionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.ListSuggestionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.ListSuggestionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendSuggestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      SP_Rpc_Friends_friend_pb.FriendSuggestion.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendSuggestion friend_suggestions = 1;
 * @return {!Array<!proto.sp.rpc.friends.FriendSuggestion>}
 */
proto.sp.rpc.friends.ListSuggestionsResponse.prototype.getFriendSuggestionsList = function() {
  return /** @type{!Array<!proto.sp.rpc.friends.FriendSuggestion>} */ (
    jspb.Message.getRepeatedWrapperField(this, SP_Rpc_Friends_friend_pb.FriendSuggestion, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.friends.FriendSuggestion>} value
 * @return {!proto.sp.rpc.friends.ListSuggestionsResponse} returns this
*/
proto.sp.rpc.friends.ListSuggestionsResponse.prototype.setFriendSuggestionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.friends.FriendSuggestion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.friends.FriendSuggestion}
 */
proto.sp.rpc.friends.ListSuggestionsResponse.prototype.addFriendSuggestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.friends.FriendSuggestion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.friends.ListSuggestionsResponse} returns this
 */
proto.sp.rpc.friends.ListSuggestionsResponse.prototype.clearFriendSuggestionsList = function() {
  return this.setFriendSuggestionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.NewFriendNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.NewFriendNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.NewFriendNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.NewFriendNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    friend: (f = msg.getFriend()) && SP_Rpc_Friends_friend_pb.Friend.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.NewFriendNotification}
 */
proto.sp.rpc.friends.NewFriendNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.NewFriendNotification;
  return proto.sp.rpc.friends.NewFriendNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.NewFriendNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.NewFriendNotification}
 */
proto.sp.rpc.friends.NewFriendNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Friends_friend_pb.Friend;
      reader.readMessage(value,SP_Rpc_Friends_friend_pb.Friend.deserializeBinaryFromReader);
      msg.setFriend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.NewFriendNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.NewFriendNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.NewFriendNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.NewFriendNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Friends_friend_pb.Friend.serializeBinaryToWriter
    );
  }
};


/**
 * optional Friend friend = 1;
 * @return {?proto.sp.rpc.friends.Friend}
 */
proto.sp.rpc.friends.NewFriendNotification.prototype.getFriend = function() {
  return /** @type{?proto.sp.rpc.friends.Friend} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Friends_friend_pb.Friend, 1));
};


/**
 * @param {?proto.sp.rpc.friends.Friend|undefined} value
 * @return {!proto.sp.rpc.friends.NewFriendNotification} returns this
*/
proto.sp.rpc.friends.NewFriendNotification.prototype.setFriend = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.NewFriendNotification} returns this
 */
proto.sp.rpc.friends.NewFriendNotification.prototype.clearFriend = function() {
  return this.setFriend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.NewFriendNotification.prototype.hasFriend = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.RemovedFriendNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.RemovedFriendNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.RemovedFriendNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RemovedFriendNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.RemovedFriendNotification}
 */
proto.sp.rpc.friends.RemovedFriendNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.RemovedFriendNotification;
  return proto.sp.rpc.friends.RemovedFriendNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.RemovedFriendNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.RemovedFriendNotification}
 */
proto.sp.rpc.friends.RemovedFriendNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.RemovedFriendNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.RemovedFriendNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.RemovedFriendNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.RemovedFriendNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 user_id = 1;
 * @return {number}
 */
proto.sp.rpc.friends.RemovedFriendNotification.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.friends.RemovedFriendNotification} returns this
 */
proto.sp.rpc.friends.RemovedFriendNotification.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.friends.NewInvitationNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.friends.NewInvitationNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.friends.NewInvitationNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.NewInvitationNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    invitation: (f = msg.getInvitation()) && SP_Rpc_Friends_friend_pb.FriendInvitation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.friends.NewInvitationNotification}
 */
proto.sp.rpc.friends.NewInvitationNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.friends.NewInvitationNotification;
  return proto.sp.rpc.friends.NewInvitationNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.friends.NewInvitationNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.friends.NewInvitationNotification}
 */
proto.sp.rpc.friends.NewInvitationNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Friends_friend_pb.FriendInvitation;
      reader.readMessage(value,SP_Rpc_Friends_friend_pb.FriendInvitation.deserializeBinaryFromReader);
      msg.setInvitation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.friends.NewInvitationNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.friends.NewInvitationNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.friends.NewInvitationNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.friends.NewInvitationNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvitation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Friends_friend_pb.FriendInvitation.serializeBinaryToWriter
    );
  }
};


/**
 * optional FriendInvitation invitation = 1;
 * @return {?proto.sp.rpc.friends.FriendInvitation}
 */
proto.sp.rpc.friends.NewInvitationNotification.prototype.getInvitation = function() {
  return /** @type{?proto.sp.rpc.friends.FriendInvitation} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Friends_friend_pb.FriendInvitation, 1));
};


/**
 * @param {?proto.sp.rpc.friends.FriendInvitation|undefined} value
 * @return {!proto.sp.rpc.friends.NewInvitationNotification} returns this
*/
proto.sp.rpc.friends.NewInvitationNotification.prototype.setInvitation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.friends.NewInvitationNotification} returns this
 */
proto.sp.rpc.friends.NewInvitationNotification.prototype.clearInvitation = function() {
  return this.setInvitation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.friends.NewInvitationNotification.prototype.hasInvitation = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.sp.rpc.friends);
