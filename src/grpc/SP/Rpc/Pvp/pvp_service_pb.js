// source: SP/Rpc/Pvp/pvp_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var SP_Rpc_Emerald_basic_request_context_pb = require('../../../SP/Rpc/Emerald/basic_request_context_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_basic_request_context_pb);
var SP_Rpc_UserProfile_user_profile_pb = require('../../../SP/Rpc/UserProfile/user_profile_pb.js');
goog.object.extend(proto, SP_Rpc_UserProfile_user_profile_pb);
goog.exportSymbol('proto.sp.rpc.pvp.GetMatchesRequest', null, global);
goog.exportSymbol('proto.sp.rpc.pvp.GetMatchesRequest.Ordering', null, global);
goog.exportSymbol('proto.sp.rpc.pvp.GetMatchesRequest.PlayeridCase', null, global);
goog.exportSymbol('proto.sp.rpc.pvp.GetMatchesResponse', null, global);
goog.exportSymbol('proto.sp.rpc.pvp.Match', null, global);
goog.exportSymbol('proto.sp.rpc.pvp.Match.Winner', null, global);
goog.exportSymbol('proto.sp.rpc.pvp.SaveMatchRequest', null, global);
goog.exportSymbol('proto.sp.rpc.pvp.SaveMatchRequest.Winner', null, global);
goog.exportSymbol('proto.sp.rpc.pvp.SaveMatchResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.pvp.SaveMatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.pvp.SaveMatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.pvp.SaveMatchRequest.displayName = 'proto.sp.rpc.pvp.SaveMatchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.pvp.SaveMatchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.pvp.SaveMatchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.pvp.SaveMatchResponse.displayName = 'proto.sp.rpc.pvp.SaveMatchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.pvp.GetMatchesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sp.rpc.pvp.GetMatchesRequest.oneofGroups_);
};
goog.inherits(proto.sp.rpc.pvp.GetMatchesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.pvp.GetMatchesRequest.displayName = 'proto.sp.rpc.pvp.GetMatchesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.pvp.GetMatchesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.pvp.GetMatchesResponse.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.pvp.GetMatchesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.pvp.GetMatchesResponse.displayName = 'proto.sp.rpc.pvp.GetMatchesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.pvp.Match = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.pvp.Match.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.pvp.Match, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.pvp.Match.displayName = 'proto.sp.rpc.pvp.Match';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.pvp.SaveMatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.pvp.SaveMatchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.pvp.SaveMatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    player1Id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    player2Id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    winner: jspb.Message.getFieldWithDefault(msg, 4, 0),
    matchData: (f = msg.getMatchData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    rematchId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest}
 */
proto.sp.rpc.pvp.SaveMatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.pvp.SaveMatchRequest;
  return proto.sp.rpc.pvp.SaveMatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.pvp.SaveMatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest}
 */
proto.sp.rpc.pvp.SaveMatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlayer1Id(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlayer2Id(value);
      break;
    case 4:
      var value = /** @type {!proto.sp.rpc.pvp.SaveMatchRequest.Winner} */ (reader.readEnum());
      msg.setWinner(value);
      break;
    case 5:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setMatchData(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRematchId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.pvp.SaveMatchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.pvp.SaveMatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.pvp.SaveMatchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getPlayer1Id();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPlayer2Id();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getWinner();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getMatchData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getRematchId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sp.rpc.pvp.SaveMatchRequest.Winner = {
  PLAYER1: 0,
  PLAYER2: 1
};

/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest} returns this
*/
proto.sp.rpc.pvp.SaveMatchRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest} returns this
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 player1_id = 2;
 * @return {number}
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.getPlayer1Id = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest} returns this
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.setPlayer1Id = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 player2_id = 3;
 * @return {number}
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.getPlayer2Id = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest} returns this
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.setPlayer2Id = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Winner winner = 4;
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest.Winner}
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.getWinner = function() {
  return /** @type {!proto.sp.rpc.pvp.SaveMatchRequest.Winner} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.sp.rpc.pvp.SaveMatchRequest.Winner} value
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest} returns this
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.setWinner = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional google.protobuf.Any match_data = 5;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.getMatchData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 5));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest} returns this
*/
proto.sp.rpc.pvp.SaveMatchRequest.prototype.setMatchData = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest} returns this
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.clearMatchData = function() {
  return this.setMatchData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.hasMatchData = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string rematch_id = 6;
 * @return {string}
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.getRematchId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.pvp.SaveMatchRequest} returns this
 */
proto.sp.rpc.pvp.SaveMatchRequest.prototype.setRematchId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.pvp.SaveMatchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.pvp.SaveMatchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.pvp.SaveMatchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.pvp.SaveMatchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.pvp.SaveMatchResponse}
 */
proto.sp.rpc.pvp.SaveMatchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.pvp.SaveMatchResponse;
  return proto.sp.rpc.pvp.SaveMatchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.pvp.SaveMatchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.pvp.SaveMatchResponse}
 */
proto.sp.rpc.pvp.SaveMatchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.pvp.SaveMatchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.pvp.SaveMatchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.pvp.SaveMatchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.pvp.SaveMatchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sp.rpc.pvp.GetMatchesRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.sp.rpc.pvp.GetMatchesRequest.PlayeridCase = {
  PLAYERID_NOT_SET: 0,
  PLAYER1_ID: 2,
  PLAYER2_ID: 3
};

/**
 * @return {proto.sp.rpc.pvp.GetMatchesRequest.PlayeridCase}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.getPlayeridCase = function() {
  return /** @type {proto.sp.rpc.pvp.GetMatchesRequest.PlayeridCase} */(jspb.Message.computeOneofCase(this, proto.sp.rpc.pvp.GetMatchesRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.pvp.GetMatchesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.pvp.GetMatchesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.pvp.GetMatchesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    player1Id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    player2Id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fromTs: (f = msg.getFromTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    limit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ordering: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest}
 */
proto.sp.rpc.pvp.GetMatchesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.pvp.GetMatchesRequest;
  return proto.sp.rpc.pvp.GetMatchesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.pvp.GetMatchesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest}
 */
proto.sp.rpc.pvp.GetMatchesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlayer1Id(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlayer2Id(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromTs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 8:
      var value = /** @type {!proto.sp.rpc.pvp.GetMatchesRequest.Ordering} */ (reader.readEnum());
      msg.setOrdering(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.pvp.GetMatchesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.pvp.GetMatchesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.pvp.GetMatchesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFromTs();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getOrdering();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sp.rpc.pvp.GetMatchesRequest.Ordering = {
  DESCENDING: 0,
  ASCENDING: 1
};

/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest} returns this
*/
proto.sp.rpc.pvp.GetMatchesRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest} returns this
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 player1_id = 2;
 * @return {number}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.getPlayer1Id = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest} returns this
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.setPlayer1Id = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.sp.rpc.pvp.GetMatchesRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest} returns this
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.clearPlayer1Id = function() {
  return jspb.Message.setOneofField(this, 2, proto.sp.rpc.pvp.GetMatchesRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.hasPlayer1Id = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 player2_id = 3;
 * @return {number}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.getPlayer2Id = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest} returns this
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.setPlayer2Id = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.sp.rpc.pvp.GetMatchesRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest} returns this
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.clearPlayer2Id = function() {
  return jspb.Message.setOneofField(this, 3, proto.sp.rpc.pvp.GetMatchesRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.hasPlayer2Id = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp from_ts = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.getFromTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest} returns this
*/
proto.sp.rpc.pvp.GetMatchesRequest.prototype.setFromTs = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest} returns this
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.clearFromTs = function() {
  return this.setFromTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.hasFromTs = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 limit = 6;
 * @return {number}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest} returns this
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Ordering ordering = 8;
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest.Ordering}
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.getOrdering = function() {
  return /** @type {!proto.sp.rpc.pvp.GetMatchesRequest.Ordering} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.sp.rpc.pvp.GetMatchesRequest.Ordering} value
 * @return {!proto.sp.rpc.pvp.GetMatchesRequest} returns this
 */
proto.sp.rpc.pvp.GetMatchesRequest.prototype.setOrdering = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.pvp.GetMatchesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.pvp.GetMatchesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.pvp.GetMatchesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.pvp.GetMatchesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.pvp.GetMatchesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchesList: jspb.Message.toObjectList(msg.getMatchesList(),
    proto.sp.rpc.pvp.Match.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.pvp.GetMatchesResponse}
 */
proto.sp.rpc.pvp.GetMatchesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.pvp.GetMatchesResponse;
  return proto.sp.rpc.pvp.GetMatchesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.pvp.GetMatchesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.pvp.GetMatchesResponse}
 */
proto.sp.rpc.pvp.GetMatchesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.pvp.Match;
      reader.readMessage(value,proto.sp.rpc.pvp.Match.deserializeBinaryFromReader);
      msg.addMatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.pvp.GetMatchesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.pvp.GetMatchesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.pvp.GetMatchesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.pvp.GetMatchesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sp.rpc.pvp.Match.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Match matches = 1;
 * @return {!Array<!proto.sp.rpc.pvp.Match>}
 */
proto.sp.rpc.pvp.GetMatchesResponse.prototype.getMatchesList = function() {
  return /** @type{!Array<!proto.sp.rpc.pvp.Match>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.pvp.Match, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.pvp.Match>} value
 * @return {!proto.sp.rpc.pvp.GetMatchesResponse} returns this
*/
proto.sp.rpc.pvp.GetMatchesResponse.prototype.setMatchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.pvp.Match=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.pvp.Match}
 */
proto.sp.rpc.pvp.GetMatchesResponse.prototype.addMatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.pvp.Match, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.pvp.GetMatchesResponse} returns this
 */
proto.sp.rpc.pvp.GetMatchesResponse.prototype.clearMatchesList = function() {
  return this.setMatchesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.pvp.Match.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.pvp.Match.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.pvp.Match.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.pvp.Match} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.pvp.Match.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    player1: (f = msg.getPlayer1()) && SP_Rpc_UserProfile_user_profile_pb.UserProfile.toObject(includeInstance, f),
    player2: (f = msg.getPlayer2()) && SP_Rpc_UserProfile_user_profile_pb.UserProfile.toObject(includeInstance, f),
    winner: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ts: (f = msg.getTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    matchData: (f = msg.getMatchData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    rematchesList: jspb.Message.toObjectList(msg.getRematchesList(),
    proto.sp.rpc.pvp.Match.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.pvp.Match}
 */
proto.sp.rpc.pvp.Match.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.pvp.Match;
  return proto.sp.rpc.pvp.Match.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.pvp.Match} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.pvp.Match}
 */
proto.sp.rpc.pvp.Match.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new SP_Rpc_UserProfile_user_profile_pb.UserProfile;
      reader.readMessage(value,SP_Rpc_UserProfile_user_profile_pb.UserProfile.deserializeBinaryFromReader);
      msg.setPlayer1(value);
      break;
    case 3:
      var value = new SP_Rpc_UserProfile_user_profile_pb.UserProfile;
      reader.readMessage(value,SP_Rpc_UserProfile_user_profile_pb.UserProfile.deserializeBinaryFromReader);
      msg.setPlayer2(value);
      break;
    case 4:
      var value = /** @type {!proto.sp.rpc.pvp.Match.Winner} */ (reader.readEnum());
      msg.setWinner(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTs(value);
      break;
    case 6:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setMatchData(value);
      break;
    case 7:
      var value = new proto.sp.rpc.pvp.Match;
      reader.readMessage(value,proto.sp.rpc.pvp.Match.deserializeBinaryFromReader);
      msg.addRematches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.pvp.Match.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.pvp.Match.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.pvp.Match} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.pvp.Match.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      SP_Rpc_UserProfile_user_profile_pb.UserProfile.serializeBinaryToWriter
    );
  }
  f = message.getPlayer2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      SP_Rpc_UserProfile_user_profile_pb.UserProfile.serializeBinaryToWriter
    );
  }
  f = message.getWinner();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTs();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMatchData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getRematchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.sp.rpc.pvp.Match.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.sp.rpc.pvp.Match.Winner = {
  PLAYER1: 0,
  PLAYER2: 1
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.sp.rpc.pvp.Match.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.pvp.Match} returns this
 */
proto.sp.rpc.pvp.Match.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sp.rpc.userprofile.UserProfile player1 = 2;
 * @return {?proto.sp.rpc.userprofile.UserProfile}
 */
proto.sp.rpc.pvp.Match.prototype.getPlayer1 = function() {
  return /** @type{?proto.sp.rpc.userprofile.UserProfile} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_UserProfile_user_profile_pb.UserProfile, 2));
};


/**
 * @param {?proto.sp.rpc.userprofile.UserProfile|undefined} value
 * @return {!proto.sp.rpc.pvp.Match} returns this
*/
proto.sp.rpc.pvp.Match.prototype.setPlayer1 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.pvp.Match} returns this
 */
proto.sp.rpc.pvp.Match.prototype.clearPlayer1 = function() {
  return this.setPlayer1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.pvp.Match.prototype.hasPlayer1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sp.rpc.userprofile.UserProfile player2 = 3;
 * @return {?proto.sp.rpc.userprofile.UserProfile}
 */
proto.sp.rpc.pvp.Match.prototype.getPlayer2 = function() {
  return /** @type{?proto.sp.rpc.userprofile.UserProfile} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_UserProfile_user_profile_pb.UserProfile, 3));
};


/**
 * @param {?proto.sp.rpc.userprofile.UserProfile|undefined} value
 * @return {!proto.sp.rpc.pvp.Match} returns this
*/
proto.sp.rpc.pvp.Match.prototype.setPlayer2 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.pvp.Match} returns this
 */
proto.sp.rpc.pvp.Match.prototype.clearPlayer2 = function() {
  return this.setPlayer2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.pvp.Match.prototype.hasPlayer2 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Winner winner = 4;
 * @return {!proto.sp.rpc.pvp.Match.Winner}
 */
proto.sp.rpc.pvp.Match.prototype.getWinner = function() {
  return /** @type {!proto.sp.rpc.pvp.Match.Winner} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.sp.rpc.pvp.Match.Winner} value
 * @return {!proto.sp.rpc.pvp.Match} returns this
 */
proto.sp.rpc.pvp.Match.prototype.setWinner = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp ts = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sp.rpc.pvp.Match.prototype.getTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sp.rpc.pvp.Match} returns this
*/
proto.sp.rpc.pvp.Match.prototype.setTs = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.pvp.Match} returns this
 */
proto.sp.rpc.pvp.Match.prototype.clearTs = function() {
  return this.setTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.pvp.Match.prototype.hasTs = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Any match_data = 6;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.pvp.Match.prototype.getMatchData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 6));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.pvp.Match} returns this
*/
proto.sp.rpc.pvp.Match.prototype.setMatchData = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.pvp.Match} returns this
 */
proto.sp.rpc.pvp.Match.prototype.clearMatchData = function() {
  return this.setMatchData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.pvp.Match.prototype.hasMatchData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Match rematches = 7;
 * @return {!Array<!proto.sp.rpc.pvp.Match>}
 */
proto.sp.rpc.pvp.Match.prototype.getRematchesList = function() {
  return /** @type{!Array<!proto.sp.rpc.pvp.Match>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.pvp.Match, 7));
};


/**
 * @param {!Array<!proto.sp.rpc.pvp.Match>} value
 * @return {!proto.sp.rpc.pvp.Match} returns this
*/
proto.sp.rpc.pvp.Match.prototype.setRematchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.sp.rpc.pvp.Match=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.pvp.Match}
 */
proto.sp.rpc.pvp.Match.prototype.addRematches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.sp.rpc.pvp.Match, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.pvp.Match} returns this
 */
proto.sp.rpc.pvp.Match.prototype.clearRematchesList = function() {
  return this.setRematchesList([]);
};


goog.object.extend(exports, proto.sp.rpc.pvp);
