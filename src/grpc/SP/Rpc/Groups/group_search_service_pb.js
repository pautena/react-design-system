// source: SP/Rpc/Groups/group_search_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var SP_Rpc_Emerald_basic_request_context_pb = require('../../../SP/Rpc/Emerald/basic_request_context_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_basic_request_context_pb);
var SP_Rpc_Groups_groups_pb = require('../../../SP/Rpc/Groups/groups_pb.js');
goog.object.extend(proto, SP_Rpc_Groups_groups_pb);
goog.exportSymbol('proto.sp.rpc.groups.FindGroupsRequest', null, global);
goog.exportSymbol('proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType', null, global);
goog.exportSymbol('proto.sp.rpc.groups.FindGroupsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.groups.FindGroupsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.groups.FindGroupsRequest.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.groups.FindGroupsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.groups.FindGroupsRequest.displayName = 'proto.sp.rpc.groups.FindGroupsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.groups.FindGroupsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.groups.FindGroupsResponse.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.groups.FindGroupsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.groups.FindGroupsResponse.displayName = 'proto.sp.rpc.groups.FindGroupsResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.groups.FindGroupsRequest.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.groups.FindGroupsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.groups.FindGroupsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.groups.FindGroupsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    feature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entriesPerPage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pageNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    namePattern: jspb.Message.getFieldWithDefault(msg, 5, ""),
    capacity: jspb.Message.getFieldWithDefault(msg, 6, 0),
    capacityCondition: jspb.Message.getFieldWithDefault(msg, 7, 0),
    numMembers: jspb.Message.getFieldWithDefault(msg, 8, 0),
    numMembersCondition: jspb.Message.getFieldWithDefault(msg, 11, 0),
    availableCapacity: jspb.Message.getFieldWithDefault(msg, 9, 0),
    availableCapacityCondition: jspb.Message.getFieldWithDefault(msg, 12, 0),
    memberIdsList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.groups.FindGroupsRequest}
 */
proto.sp.rpc.groups.FindGroupsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.groups.FindGroupsRequest;
  return proto.sp.rpc.groups.FindGroupsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.groups.FindGroupsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.groups.FindGroupsRequest}
 */
proto.sp.rpc.groups.FindGroupsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeature(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntriesPerPage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPageNumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamePattern(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCapacity(value);
      break;
    case 7:
      var value = /** @type {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType} */ (reader.readEnum());
      msg.setCapacityCondition(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumMembers(value);
      break;
    case 11:
      var value = /** @type {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType} */ (reader.readEnum());
      msg.setNumMembersCondition(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAvailableCapacity(value);
      break;
    case 12:
      var value = /** @type {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType} */ (reader.readEnum());
      msg.setAvailableCapacityCondition(value);
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMemberIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.groups.FindGroupsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.groups.FindGroupsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.groups.FindGroupsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getFeature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntriesPerPage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getNamePattern();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCapacity();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getCapacityCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getNumMembers();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getNumMembersCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getAvailableCapacity();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getAvailableCapacityCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getMemberIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType = {
  EQUALS: 0,
  MIN: 1,
  MAX: 2
};

/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
*/
proto.sp.rpc.groups.FindGroupsRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string feature = 2;
 * @return {string}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getFeature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setFeature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 entries_per_page = 3;
 * @return {number}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getEntriesPerPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setEntriesPerPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 page_number = 4;
 * @return {number}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name_pattern = 5;
 * @return {string}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getNamePattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setNamePattern = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 capacity = 6;
 * @return {number}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setCapacity = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional AmountConditionType capacity_condition = 7;
 * @return {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getCapacityCondition = function() {
  return /** @type {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setCapacityCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional uint32 num_members = 8;
 * @return {number}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getNumMembers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setNumMembers = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional AmountConditionType num_members_condition = 11;
 * @return {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getNumMembersCondition = function() {
  return /** @type {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setNumMembersCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional uint32 available_capacity = 9;
 * @return {number}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getAvailableCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setAvailableCapacity = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional AmountConditionType available_capacity_condition = 12;
 * @return {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getAvailableCapacityCondition = function() {
  return /** @type {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.sp.rpc.groups.FindGroupsRequest.AmountConditionType} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setAvailableCapacityCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * repeated uint64 member_ids = 10;
 * @return {!Array<number>}
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.getMemberIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.setMemberIdsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.addMemberIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.groups.FindGroupsRequest} returns this
 */
proto.sp.rpc.groups.FindGroupsRequest.prototype.clearMemberIdsList = function() {
  return this.setMemberIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.groups.FindGroupsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.groups.FindGroupsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.groups.FindGroupsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.groups.FindGroupsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.groups.FindGroupsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchingGroupsList: jspb.Message.toObjectList(msg.getMatchingGroupsList(),
    SP_Rpc_Groups_groups_pb.Group.toObject, includeInstance),
    totalMatches: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.groups.FindGroupsResponse}
 */
proto.sp.rpc.groups.FindGroupsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.groups.FindGroupsResponse;
  return proto.sp.rpc.groups.FindGroupsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.groups.FindGroupsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.groups.FindGroupsResponse}
 */
proto.sp.rpc.groups.FindGroupsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Groups_groups_pb.Group;
      reader.readMessage(value,SP_Rpc_Groups_groups_pb.Group.deserializeBinaryFromReader);
      msg.addMatchingGroups(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalMatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.groups.FindGroupsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.groups.FindGroupsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.groups.FindGroupsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.groups.FindGroupsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchingGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      SP_Rpc_Groups_groups_pb.Group.serializeBinaryToWriter
    );
  }
  f = message.getTotalMatches();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated Group matching_groups = 1;
 * @return {!Array<!proto.sp.rpc.groups.Group>}
 */
proto.sp.rpc.groups.FindGroupsResponse.prototype.getMatchingGroupsList = function() {
  return /** @type{!Array<!proto.sp.rpc.groups.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, SP_Rpc_Groups_groups_pb.Group, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.groups.Group>} value
 * @return {!proto.sp.rpc.groups.FindGroupsResponse} returns this
*/
proto.sp.rpc.groups.FindGroupsResponse.prototype.setMatchingGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.groups.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.groups.Group}
 */
proto.sp.rpc.groups.FindGroupsResponse.prototype.addMatchingGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.groups.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.groups.FindGroupsResponse} returns this
 */
proto.sp.rpc.groups.FindGroupsResponse.prototype.clearMatchingGroupsList = function() {
  return this.setMatchingGroupsList([]);
};


/**
 * optional uint32 total_matches = 2;
 * @return {number}
 */
proto.sp.rpc.groups.FindGroupsResponse.prototype.getTotalMatches = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.groups.FindGroupsResponse} returns this
 */
proto.sp.rpc.groups.FindGroupsResponse.prototype.setTotalMatches = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.sp.rpc.groups);
