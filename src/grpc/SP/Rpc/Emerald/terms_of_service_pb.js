// source: SP/Rpc/Emerald/terms_of_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var SP_Rpc_Emerald_request_context_pb = require('../../../SP/Rpc/Emerald/request_context_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_request_context_pb);
goog.exportSymbol('proto.sp.rpc.emerald.TermsOfService', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.TermsOfService.AdTracking', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.TermsOfService.AdTracking.Request', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.TermsOfService.AdTracking.Response', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.TermsOfService.Config', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.TermsOfService.Data', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.TermsOfService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.TermsOfService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.TermsOfService.displayName = 'proto.sp.rpc.emerald.TermsOfService';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.TermsOfService.AdTracking, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.TermsOfService.AdTracking.displayName = 'proto.sp.rpc.emerald.TermsOfService.AdTracking';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.TermsOfService.AdTracking.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.displayName = 'proto.sp.rpc.emerald.TermsOfService.AdTracking.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.TermsOfService.AdTracking.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.displayName = 'proto.sp.rpc.emerald.TermsOfService.AdTracking.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.TermsOfService.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.TermsOfService.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.TermsOfService.Config.displayName = 'proto.sp.rpc.emerald.TermsOfService.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.TermsOfService.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.TermsOfService.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.TermsOfService.Data.displayName = 'proto.sp.rpc.emerald.TermsOfService.Data';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.TermsOfService.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.TermsOfService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.TermsOfService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.sp.rpc.emerald.TermsOfService.Config.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.sp.rpc.emerald.TermsOfService.Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.TermsOfService}
 */
proto.sp.rpc.emerald.TermsOfService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.TermsOfService;
  return proto.sp.rpc.emerald.TermsOfService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.TermsOfService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.TermsOfService}
 */
proto.sp.rpc.emerald.TermsOfService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.TermsOfService.Config;
      reader.readMessage(value,proto.sp.rpc.emerald.TermsOfService.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.TermsOfService.Data;
      reader.readMessage(value,proto.sp.rpc.emerald.TermsOfService.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.TermsOfService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.TermsOfService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.TermsOfService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sp.rpc.emerald.TermsOfService.Config.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sp.rpc.emerald.TermsOfService.Data.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.TermsOfService.AdTracking.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.TermsOfService.AdTracking} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.TermsOfService.AdTracking;
  return proto.sp.rpc.emerald.TermsOfService.AdTracking.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.TermsOfService.AdTracking} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.TermsOfService.AdTracking.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.TermsOfService.AdTracking} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && SP_Rpc_Emerald_request_context_pb.RequestContext.toObject(includeInstance, f),
    adTrackingStatus: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Request}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.TermsOfService.AdTracking.Request;
  return proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Request}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_request_context_pb.RequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_request_context_pb.RequestContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdTrackingStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_request_context_pb.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getAdTrackingStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional RequestContext context = 1;
 * @return {?proto.sp.rpc.emerald.RequestContext}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.prototype.getContext = function() {
  return /** @type{?proto.sp.rpc.emerald.RequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_request_context_pb.RequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.RequestContext|undefined} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Request} returns this
*/
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Request} returns this
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ad_tracking_status = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.prototype.getAdTrackingStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Request} returns this
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Request.prototype.setAdTrackingStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    display: jspb.Message.getFieldWithDefault(msg, 1, ""),
    explanation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    confirmButton: jspb.Message.getFieldWithDefault(msg, 3, ""),
    declineButton: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Response}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.TermsOfService.AdTracking.Response;
  return proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Response}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplay(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExplanation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmButton(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeclineButton(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplay();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExplanation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfirmButton();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeclineButton();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string display = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.prototype.getDisplay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Response} returns this
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.prototype.setDisplay = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string explanation = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.prototype.getExplanation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Response} returns this
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.prototype.setExplanation = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string confirm_button = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.prototype.getConfirmButton = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Response} returns this
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.prototype.setConfirmButton = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string decline_button = 4;
 * @return {string}
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.prototype.getDeclineButton = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.AdTracking.Response} returns this
 */
proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.prototype.setDeclineButton = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.TermsOfService.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.TermsOfService.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.TermsOfService.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    display: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    skippable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    defaultAge: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.TermsOfService.Config}
 */
proto.sp.rpc.emerald.TermsOfService.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.TermsOfService.Config;
  return proto.sp.rpc.emerald.TermsOfService.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.TermsOfService.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.TermsOfService.Config}
 */
proto.sp.rpc.emerald.TermsOfService.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplay(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkippable(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultAge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.TermsOfService.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.TermsOfService.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.TermsOfService.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplay();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSkippable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDefaultAge();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool display = 1;
 * @return {boolean}
 */
proto.sp.rpc.emerald.TermsOfService.Config.prototype.getDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.Config} returns this
 */
proto.sp.rpc.emerald.TermsOfService.Config.prototype.setDisplay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool skippable = 2;
 * @return {boolean}
 */
proto.sp.rpc.emerald.TermsOfService.Config.prototype.getSkippable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.Config} returns this
 */
proto.sp.rpc.emerald.TermsOfService.Config.prototype.setSkippable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 default_age = 3;
 * @return {number}
 */
proto.sp.rpc.emerald.TermsOfService.Config.prototype.getDefaultAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.Config} returns this
 */
proto.sp.rpc.emerald.TermsOfService.Config.prototype.setDefaultAge = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.TermsOfService.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.TermsOfService.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    isAnonymous: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    age: jspb.Message.getFieldWithDefault(msg, 2, 0),
    facebookEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    videoAdsGdprConsent: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    attributionAnonymizeData: jspb.Message.getFieldWithDefault(msg, 5, ""),
    adTrackingConsent: (f = msg.getAdTrackingConsent()) && proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.toObject(includeInstance, f),
    isUnderAgeOfConsent: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.TermsOfService.Data}
 */
proto.sp.rpc.emerald.TermsOfService.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.TermsOfService.Data;
  return proto.sp.rpc.emerald.TermsOfService.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.TermsOfService.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.TermsOfService.Data}
 */
proto.sp.rpc.emerald.TermsOfService.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAnonymous(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFacebookEnabled(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVideoAdsGdprConsent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttributionAnonymizeData(value);
      break;
    case 6:
      var value = new proto.sp.rpc.emerald.TermsOfService.AdTracking.Response;
      reader.readMessage(value,proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.deserializeBinaryFromReader);
      msg.setAdTrackingConsent(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsUnderAgeOfConsent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.TermsOfService.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.TermsOfService.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.TermsOfService.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsAnonymous();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFacebookEnabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getVideoAdsGdprConsent();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAttributionAnonymizeData();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAdTrackingConsent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sp.rpc.emerald.TermsOfService.AdTracking.Response.serializeBinaryToWriter
    );
  }
  f = message.getIsUnderAgeOfConsent();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional bool is_anonymous = 1;
 * @return {boolean}
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.getIsAnonymous = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.Data} returns this
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.setIsAnonymous = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 age = 2;
 * @return {number}
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.Data} returns this
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.setAge = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool facebook_enabled = 3;
 * @return {boolean}
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.getFacebookEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.Data} returns this
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.setFacebookEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool video_ads_gdpr_consent = 4;
 * @return {boolean}
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.getVideoAdsGdprConsent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.Data} returns this
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.setVideoAdsGdprConsent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string attribution_anonymize_data = 5;
 * @return {string}
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.getAttributionAnonymizeData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.Data} returns this
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.setAttributionAnonymizeData = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional AdTracking.Response ad_tracking_consent = 6;
 * @return {?proto.sp.rpc.emerald.TermsOfService.AdTracking.Response}
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.getAdTrackingConsent = function() {
  return /** @type{?proto.sp.rpc.emerald.TermsOfService.AdTracking.Response} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.TermsOfService.AdTracking.Response, 6));
};


/**
 * @param {?proto.sp.rpc.emerald.TermsOfService.AdTracking.Response|undefined} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.Data} returns this
*/
proto.sp.rpc.emerald.TermsOfService.Data.prototype.setAdTrackingConsent = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.TermsOfService.Data} returns this
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.clearAdTrackingConsent = function() {
  return this.setAdTrackingConsent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.hasAdTrackingConsent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool is_under_age_of_consent = 7;
 * @return {boolean}
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.getIsUnderAgeOfConsent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.TermsOfService.Data} returns this
 */
proto.sp.rpc.emerald.TermsOfService.Data.prototype.setIsUnderAgeOfConsent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional Config config = 1;
 * @return {?proto.sp.rpc.emerald.TermsOfService.Config}
 */
proto.sp.rpc.emerald.TermsOfService.prototype.getConfig = function() {
  return /** @type{?proto.sp.rpc.emerald.TermsOfService.Config} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.TermsOfService.Config, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.TermsOfService.Config|undefined} value
 * @return {!proto.sp.rpc.emerald.TermsOfService} returns this
*/
proto.sp.rpc.emerald.TermsOfService.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.TermsOfService} returns this
 */
proto.sp.rpc.emerald.TermsOfService.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.TermsOfService.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Data data = 2;
 * @return {?proto.sp.rpc.emerald.TermsOfService.Data}
 */
proto.sp.rpc.emerald.TermsOfService.prototype.getData = function() {
  return /** @type{?proto.sp.rpc.emerald.TermsOfService.Data} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.TermsOfService.Data, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.TermsOfService.Data|undefined} value
 * @return {!proto.sp.rpc.emerald.TermsOfService} returns this
*/
proto.sp.rpc.emerald.TermsOfService.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.TermsOfService} returns this
 */
proto.sp.rpc.emerald.TermsOfService.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.TermsOfService.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.sp.rpc.emerald);
