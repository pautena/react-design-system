// source: SP/Rpc/Emerald/errors.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.sp.rpc.emerald.Error', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.Cancelled', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.ClockChange', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.Data', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.Data.TrackingInformation', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.ErrorCase', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.ForceUpgrade', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.GameData', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.InvalidCountry', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.InvalidLinkData', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.InvalidLinkProviderToken', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.InvalidPlatform', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.InvalidSecurityToken', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.LinkLogin', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.LoginRequired', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.Maintenance', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.OfflineMode', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.RPC', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.RootedDevice', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.Service', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.SessionLost', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.Timeout', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Error.Unavailable', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sp.rpc.emerald.Error.oneofGroups_);
};
goog.inherits(proto.sp.rpc.emerald.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.displayName = 'proto.sp.rpc.emerald.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.Data.displayName = 'proto.sp.rpc.emerald.Error.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.Data.TrackingInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.Data.TrackingInformation.displayName = 'proto.sp.rpc.emerald.Error.Data.TrackingInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.Unavailable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.Unavailable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.Unavailable.displayName = 'proto.sp.rpc.emerald.Error.Unavailable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.Cancelled = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.Cancelled, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.Cancelled.displayName = 'proto.sp.rpc.emerald.Error.Cancelled';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.RPC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.RPC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.RPC.displayName = 'proto.sp.rpc.emerald.Error.RPC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.Timeout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.Timeout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.Timeout.displayName = 'proto.sp.rpc.emerald.Error.Timeout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.SessionLost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.SessionLost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.SessionLost.displayName = 'proto.sp.rpc.emerald.Error.SessionLost';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.OfflineMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.OfflineMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.OfflineMode.displayName = 'proto.sp.rpc.emerald.Error.OfflineMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.ClockChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.ClockChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.ClockChange.displayName = 'proto.sp.rpc.emerald.Error.ClockChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.InvalidLinkData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.InvalidLinkData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.InvalidLinkData.displayName = 'proto.sp.rpc.emerald.Error.InvalidLinkData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.InvalidLinkProviderToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.InvalidLinkProviderToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.displayName = 'proto.sp.rpc.emerald.Error.InvalidLinkProviderToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.LinkLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.LinkLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.LinkLogin.displayName = 'proto.sp.rpc.emerald.Error.LinkLogin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.InvalidSecurityToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.InvalidSecurityToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.InvalidSecurityToken.displayName = 'proto.sp.rpc.emerald.Error.InvalidSecurityToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.RootedDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.RootedDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.RootedDevice.displayName = 'proto.sp.rpc.emerald.Error.RootedDevice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.Maintenance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.Maintenance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.Maintenance.displayName = 'proto.sp.rpc.emerald.Error.Maintenance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.ForceUpgrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.ForceUpgrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.ForceUpgrade.displayName = 'proto.sp.rpc.emerald.Error.ForceUpgrade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.LoginRequired = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.LoginRequired, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.LoginRequired.displayName = 'proto.sp.rpc.emerald.Error.LoginRequired';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.GameData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.GameData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.GameData.displayName = 'proto.sp.rpc.emerald.Error.GameData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.InvalidCountry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.InvalidCountry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.InvalidCountry.displayName = 'proto.sp.rpc.emerald.Error.InvalidCountry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.InvalidPlatform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.InvalidPlatform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.InvalidPlatform.displayName = 'proto.sp.rpc.emerald.Error.InvalidPlatform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Error.Service = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Error.Service, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Error.Service.displayName = 'proto.sp.rpc.emerald.Error.Service';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sp.rpc.emerald.Error.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]];

/**
 * @enum {number}
 */
proto.sp.rpc.emerald.Error.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAVAILABLE_ERROR: 2,
  CANCELLED_ERROR: 3,
  RPC_ERROR: 4,
  TIMEOUT_ERROR: 5,
  SESSION_LOST_ERROR: 6,
  OFFLINE_MODE_ERROR: 7,
  CLOCK_CHANGE_ERROR: 8,
  INVALID_LINK_DATA_ERROR: 9,
  INVALID_LINK_PROVIDER_TOKEN_ERROR: 10,
  LINK_LOGIN_ERROR: 11,
  INVALID_SECURITY_TOKEN_ERROR: 12,
  ROOTED_DEVICE_ERROR: 13,
  MAINTENANCE_ERROR: 14,
  FORCE_UPGRADE_ERROR: 15,
  LOGIN_REQUIRED_ERROR: 16,
  GAME_DATA_ERROR: 17,
  INVALID_COUNTRY_ERROR: 18,
  INVALID_PLATFORM_ERROR: 19,
  SERVICE_ERROR: 20
};

/**
 * @return {proto.sp.rpc.emerald.Error.ErrorCase}
 */
proto.sp.rpc.emerald.Error.prototype.getErrorCase = function() {
  return /** @type {proto.sp.rpc.emerald.Error.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.sp.rpc.emerald.Error.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.sp.rpc.emerald.Error.Data.toObject(includeInstance, f),
    unavailableError: (f = msg.getUnavailableError()) && proto.sp.rpc.emerald.Error.Unavailable.toObject(includeInstance, f),
    cancelledError: (f = msg.getCancelledError()) && proto.sp.rpc.emerald.Error.Cancelled.toObject(includeInstance, f),
    rpcError: (f = msg.getRpcError()) && proto.sp.rpc.emerald.Error.RPC.toObject(includeInstance, f),
    timeoutError: (f = msg.getTimeoutError()) && proto.sp.rpc.emerald.Error.Timeout.toObject(includeInstance, f),
    sessionLostError: (f = msg.getSessionLostError()) && proto.sp.rpc.emerald.Error.SessionLost.toObject(includeInstance, f),
    offlineModeError: (f = msg.getOfflineModeError()) && proto.sp.rpc.emerald.Error.OfflineMode.toObject(includeInstance, f),
    clockChangeError: (f = msg.getClockChangeError()) && proto.sp.rpc.emerald.Error.ClockChange.toObject(includeInstance, f),
    invalidLinkDataError: (f = msg.getInvalidLinkDataError()) && proto.sp.rpc.emerald.Error.InvalidLinkData.toObject(includeInstance, f),
    invalidLinkProviderTokenError: (f = msg.getInvalidLinkProviderTokenError()) && proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.toObject(includeInstance, f),
    linkLoginError: (f = msg.getLinkLoginError()) && proto.sp.rpc.emerald.Error.LinkLogin.toObject(includeInstance, f),
    invalidSecurityTokenError: (f = msg.getInvalidSecurityTokenError()) && proto.sp.rpc.emerald.Error.InvalidSecurityToken.toObject(includeInstance, f),
    rootedDeviceError: (f = msg.getRootedDeviceError()) && proto.sp.rpc.emerald.Error.RootedDevice.toObject(includeInstance, f),
    maintenanceError: (f = msg.getMaintenanceError()) && proto.sp.rpc.emerald.Error.Maintenance.toObject(includeInstance, f),
    forceUpgradeError: (f = msg.getForceUpgradeError()) && proto.sp.rpc.emerald.Error.ForceUpgrade.toObject(includeInstance, f),
    loginRequiredError: (f = msg.getLoginRequiredError()) && proto.sp.rpc.emerald.Error.LoginRequired.toObject(includeInstance, f),
    gameDataError: (f = msg.getGameDataError()) && proto.sp.rpc.emerald.Error.GameData.toObject(includeInstance, f),
    invalidCountryError: (f = msg.getInvalidCountryError()) && proto.sp.rpc.emerald.Error.InvalidCountry.toObject(includeInstance, f),
    invalidPlatformError: (f = msg.getInvalidPlatformError()) && proto.sp.rpc.emerald.Error.InvalidPlatform.toObject(includeInstance, f),
    serviceError: (f = msg.getServiceError()) && proto.sp.rpc.emerald.Error.Service.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error}
 */
proto.sp.rpc.emerald.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error;
  return proto.sp.rpc.emerald.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error}
 */
proto.sp.rpc.emerald.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.Error.Data;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.Error.Unavailable;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.Unavailable.deserializeBinaryFromReader);
      msg.setUnavailableError(value);
      break;
    case 3:
      var value = new proto.sp.rpc.emerald.Error.Cancelled;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.Cancelled.deserializeBinaryFromReader);
      msg.setCancelledError(value);
      break;
    case 4:
      var value = new proto.sp.rpc.emerald.Error.RPC;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.RPC.deserializeBinaryFromReader);
      msg.setRpcError(value);
      break;
    case 5:
      var value = new proto.sp.rpc.emerald.Error.Timeout;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.Timeout.deserializeBinaryFromReader);
      msg.setTimeoutError(value);
      break;
    case 6:
      var value = new proto.sp.rpc.emerald.Error.SessionLost;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.SessionLost.deserializeBinaryFromReader);
      msg.setSessionLostError(value);
      break;
    case 7:
      var value = new proto.sp.rpc.emerald.Error.OfflineMode;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.OfflineMode.deserializeBinaryFromReader);
      msg.setOfflineModeError(value);
      break;
    case 8:
      var value = new proto.sp.rpc.emerald.Error.ClockChange;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.ClockChange.deserializeBinaryFromReader);
      msg.setClockChangeError(value);
      break;
    case 9:
      var value = new proto.sp.rpc.emerald.Error.InvalidLinkData;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.InvalidLinkData.deserializeBinaryFromReader);
      msg.setInvalidLinkDataError(value);
      break;
    case 10:
      var value = new proto.sp.rpc.emerald.Error.InvalidLinkProviderToken;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.deserializeBinaryFromReader);
      msg.setInvalidLinkProviderTokenError(value);
      break;
    case 11:
      var value = new proto.sp.rpc.emerald.Error.LinkLogin;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.LinkLogin.deserializeBinaryFromReader);
      msg.setLinkLoginError(value);
      break;
    case 12:
      var value = new proto.sp.rpc.emerald.Error.InvalidSecurityToken;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.InvalidSecurityToken.deserializeBinaryFromReader);
      msg.setInvalidSecurityTokenError(value);
      break;
    case 13:
      var value = new proto.sp.rpc.emerald.Error.RootedDevice;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.RootedDevice.deserializeBinaryFromReader);
      msg.setRootedDeviceError(value);
      break;
    case 14:
      var value = new proto.sp.rpc.emerald.Error.Maintenance;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.Maintenance.deserializeBinaryFromReader);
      msg.setMaintenanceError(value);
      break;
    case 15:
      var value = new proto.sp.rpc.emerald.Error.ForceUpgrade;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.ForceUpgrade.deserializeBinaryFromReader);
      msg.setForceUpgradeError(value);
      break;
    case 16:
      var value = new proto.sp.rpc.emerald.Error.LoginRequired;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.LoginRequired.deserializeBinaryFromReader);
      msg.setLoginRequiredError(value);
      break;
    case 17:
      var value = new proto.sp.rpc.emerald.Error.GameData;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.GameData.deserializeBinaryFromReader);
      msg.setGameDataError(value);
      break;
    case 18:
      var value = new proto.sp.rpc.emerald.Error.InvalidCountry;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.InvalidCountry.deserializeBinaryFromReader);
      msg.setInvalidCountryError(value);
      break;
    case 19:
      var value = new proto.sp.rpc.emerald.Error.InvalidPlatform;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.InvalidPlatform.deserializeBinaryFromReader);
      msg.setInvalidPlatformError(value);
      break;
    case 20:
      var value = new proto.sp.rpc.emerald.Error.Service;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.Service.deserializeBinaryFromReader);
      msg.setServiceError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sp.rpc.emerald.Error.Data.serializeBinaryToWriter
    );
  }
  f = message.getUnavailableError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sp.rpc.emerald.Error.Unavailable.serializeBinaryToWriter
    );
  }
  f = message.getCancelledError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sp.rpc.emerald.Error.Cancelled.serializeBinaryToWriter
    );
  }
  f = message.getRpcError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sp.rpc.emerald.Error.RPC.serializeBinaryToWriter
    );
  }
  f = message.getTimeoutError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sp.rpc.emerald.Error.Timeout.serializeBinaryToWriter
    );
  }
  f = message.getSessionLostError();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sp.rpc.emerald.Error.SessionLost.serializeBinaryToWriter
    );
  }
  f = message.getOfflineModeError();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.sp.rpc.emerald.Error.OfflineMode.serializeBinaryToWriter
    );
  }
  f = message.getClockChangeError();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.sp.rpc.emerald.Error.ClockChange.serializeBinaryToWriter
    );
  }
  f = message.getInvalidLinkDataError();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.sp.rpc.emerald.Error.InvalidLinkData.serializeBinaryToWriter
    );
  }
  f = message.getInvalidLinkProviderTokenError();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.serializeBinaryToWriter
    );
  }
  f = message.getLinkLoginError();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.sp.rpc.emerald.Error.LinkLogin.serializeBinaryToWriter
    );
  }
  f = message.getInvalidSecurityTokenError();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.sp.rpc.emerald.Error.InvalidSecurityToken.serializeBinaryToWriter
    );
  }
  f = message.getRootedDeviceError();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.sp.rpc.emerald.Error.RootedDevice.serializeBinaryToWriter
    );
  }
  f = message.getMaintenanceError();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.sp.rpc.emerald.Error.Maintenance.serializeBinaryToWriter
    );
  }
  f = message.getForceUpgradeError();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.sp.rpc.emerald.Error.ForceUpgrade.serializeBinaryToWriter
    );
  }
  f = message.getLoginRequiredError();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.sp.rpc.emerald.Error.LoginRequired.serializeBinaryToWriter
    );
  }
  f = message.getGameDataError();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.sp.rpc.emerald.Error.GameData.serializeBinaryToWriter
    );
  }
  f = message.getInvalidCountryError();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.sp.rpc.emerald.Error.InvalidCountry.serializeBinaryToWriter
    );
  }
  f = message.getInvalidPlatformError();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.sp.rpc.emerald.Error.InvalidPlatform.serializeBinaryToWriter
    );
  }
  f = message.getServiceError();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.sp.rpc.emerald.Error.Service.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    trackingInformation: (f = msg.getTrackingInformation()) && proto.sp.rpc.emerald.Error.Data.TrackingInformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.Data}
 */
proto.sp.rpc.emerald.Error.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.Data;
  return proto.sp.rpc.emerald.Error.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.Data}
 */
proto.sp.rpc.emerald.Error.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.Error.Data.TrackingInformation;
      reader.readMessage(value,proto.sp.rpc.emerald.Error.Data.TrackingInformation.deserializeBinaryFromReader);
      msg.setTrackingInformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrackingInformation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sp.rpc.emerald.Error.Data.TrackingInformation.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.Data.TrackingInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.Data.TrackingInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    details: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.Data.TrackingInformation}
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.Data.TrackingInformation;
  return proto.sp.rpc.emerald.Error.Data.TrackingInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.Data.TrackingInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.Data.TrackingInformation}
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.Data.TrackingInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.Data.TrackingInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Error.Data.TrackingInformation} returns this
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string details = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Error.Data.TrackingInformation} returns this
 */
proto.sp.rpc.emerald.Error.Data.TrackingInformation.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TrackingInformation tracking_information = 1;
 * @return {?proto.sp.rpc.emerald.Error.Data.TrackingInformation}
 */
proto.sp.rpc.emerald.Error.Data.prototype.getTrackingInformation = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.Data.TrackingInformation} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.Data.TrackingInformation, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.Data.TrackingInformation|undefined} value
 * @return {!proto.sp.rpc.emerald.Error.Data} returns this
*/
proto.sp.rpc.emerald.Error.Data.prototype.setTrackingInformation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error.Data} returns this
 */
proto.sp.rpc.emerald.Error.Data.prototype.clearTrackingInformation = function() {
  return this.setTrackingInformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.Data.prototype.hasTrackingInformation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.Unavailable.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.Unavailable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.Unavailable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Unavailable.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.Unavailable}
 */
proto.sp.rpc.emerald.Error.Unavailable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.Unavailable;
  return proto.sp.rpc.emerald.Error.Unavailable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.Unavailable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.Unavailable}
 */
proto.sp.rpc.emerald.Error.Unavailable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.Unavailable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.Unavailable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.Unavailable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Unavailable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.Cancelled.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.Cancelled.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.Cancelled} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Cancelled.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.Cancelled}
 */
proto.sp.rpc.emerald.Error.Cancelled.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.Cancelled;
  return proto.sp.rpc.emerald.Error.Cancelled.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.Cancelled} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.Cancelled}
 */
proto.sp.rpc.emerald.Error.Cancelled.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.Cancelled.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.Cancelled.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.Cancelled} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Cancelled.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.RPC.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.RPC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.RPC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.RPC.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.RPC}
 */
proto.sp.rpc.emerald.Error.RPC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.RPC;
  return proto.sp.rpc.emerald.Error.RPC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.RPC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.RPC}
 */
proto.sp.rpc.emerald.Error.RPC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.RPC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.RPC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.RPC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.RPC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.Timeout.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.Timeout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.Timeout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Timeout.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.Timeout}
 */
proto.sp.rpc.emerald.Error.Timeout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.Timeout;
  return proto.sp.rpc.emerald.Error.Timeout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.Timeout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.Timeout}
 */
proto.sp.rpc.emerald.Error.Timeout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.Timeout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.Timeout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.Timeout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Timeout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.SessionLost.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.SessionLost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.SessionLost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.SessionLost.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.SessionLost}
 */
proto.sp.rpc.emerald.Error.SessionLost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.SessionLost;
  return proto.sp.rpc.emerald.Error.SessionLost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.SessionLost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.SessionLost}
 */
proto.sp.rpc.emerald.Error.SessionLost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.SessionLost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.SessionLost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.SessionLost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.SessionLost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.OfflineMode.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.OfflineMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.OfflineMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.OfflineMode.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.OfflineMode}
 */
proto.sp.rpc.emerald.Error.OfflineMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.OfflineMode;
  return proto.sp.rpc.emerald.Error.OfflineMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.OfflineMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.OfflineMode}
 */
proto.sp.rpc.emerald.Error.OfflineMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.OfflineMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.OfflineMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.OfflineMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.OfflineMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.ClockChange.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.ClockChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.ClockChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.ClockChange.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.ClockChange}
 */
proto.sp.rpc.emerald.Error.ClockChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.ClockChange;
  return proto.sp.rpc.emerald.Error.ClockChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.ClockChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.ClockChange}
 */
proto.sp.rpc.emerald.Error.ClockChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.ClockChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.ClockChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.ClockChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.ClockChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.InvalidLinkData.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.InvalidLinkData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.InvalidLinkData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.InvalidLinkData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.InvalidLinkData}
 */
proto.sp.rpc.emerald.Error.InvalidLinkData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.InvalidLinkData;
  return proto.sp.rpc.emerald.Error.InvalidLinkData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.InvalidLinkData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.InvalidLinkData}
 */
proto.sp.rpc.emerald.Error.InvalidLinkData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.InvalidLinkData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.InvalidLinkData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.InvalidLinkData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.InvalidLinkData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.InvalidLinkProviderToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.InvalidLinkProviderToken}
 */
proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.InvalidLinkProviderToken;
  return proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.InvalidLinkProviderToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.InvalidLinkProviderToken}
 */
proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.InvalidLinkProviderToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.InvalidLinkProviderToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.LinkLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.LinkLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.LinkLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.LinkLogin.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.LinkLogin}
 */
proto.sp.rpc.emerald.Error.LinkLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.LinkLogin;
  return proto.sp.rpc.emerald.Error.LinkLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.LinkLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.LinkLogin}
 */
proto.sp.rpc.emerald.Error.LinkLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.LinkLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.LinkLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.LinkLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.LinkLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.InvalidSecurityToken.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.InvalidSecurityToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.InvalidSecurityToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.InvalidSecurityToken.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.InvalidSecurityToken}
 */
proto.sp.rpc.emerald.Error.InvalidSecurityToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.InvalidSecurityToken;
  return proto.sp.rpc.emerald.Error.InvalidSecurityToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.InvalidSecurityToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.InvalidSecurityToken}
 */
proto.sp.rpc.emerald.Error.InvalidSecurityToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.InvalidSecurityToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.InvalidSecurityToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.InvalidSecurityToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.InvalidSecurityToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.RootedDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.RootedDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.RootedDevice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.RootedDevice.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.RootedDevice}
 */
proto.sp.rpc.emerald.Error.RootedDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.RootedDevice;
  return proto.sp.rpc.emerald.Error.RootedDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.RootedDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.RootedDevice}
 */
proto.sp.rpc.emerald.Error.RootedDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.RootedDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.RootedDevice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.RootedDevice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.RootedDevice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.Maintenance.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.Maintenance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.Maintenance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Maintenance.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    button: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.Maintenance}
 */
proto.sp.rpc.emerald.Error.Maintenance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.Maintenance;
  return proto.sp.rpc.emerald.Error.Maintenance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.Maintenance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.Maintenance}
 */
proto.sp.rpc.emerald.Error.Maintenance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setButton(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.Maintenance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.Maintenance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.Maintenance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Maintenance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getButton();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Error.Maintenance.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Error.Maintenance} returns this
 */
proto.sp.rpc.emerald.Error.Maintenance.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.Error.Maintenance.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Error.Maintenance} returns this
 */
proto.sp.rpc.emerald.Error.Maintenance.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string button = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.Error.Maintenance.prototype.getButton = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Error.Maintenance} returns this
 */
proto.sp.rpc.emerald.Error.Maintenance.prototype.setButton = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.ForceUpgrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.ForceUpgrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    storeUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.ForceUpgrade}
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.ForceUpgrade;
  return proto.sp.rpc.emerald.Error.ForceUpgrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.ForceUpgrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.ForceUpgrade}
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoreUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.ForceUpgrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.ForceUpgrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoreUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string store_url = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.prototype.getStoreUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Error.ForceUpgrade} returns this
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.prototype.setStoreUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Error.ForceUpgrade} returns this
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Error.ForceUpgrade} returns this
 */
proto.sp.rpc.emerald.Error.ForceUpgrade.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.LoginRequired.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.LoginRequired.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.LoginRequired} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.LoginRequired.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.LoginRequired}
 */
proto.sp.rpc.emerald.Error.LoginRequired.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.LoginRequired;
  return proto.sp.rpc.emerald.Error.LoginRequired.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.LoginRequired} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.LoginRequired}
 */
proto.sp.rpc.emerald.Error.LoginRequired.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.LoginRequired.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.LoginRequired.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.LoginRequired} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.LoginRequired.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.GameData.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.GameData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.GameData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.GameData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.GameData}
 */
proto.sp.rpc.emerald.Error.GameData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.GameData;
  return proto.sp.rpc.emerald.Error.GameData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.GameData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.GameData}
 */
proto.sp.rpc.emerald.Error.GameData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.GameData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.GameData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.GameData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.GameData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.InvalidCountry.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.InvalidCountry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.InvalidCountry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.InvalidCountry.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.InvalidCountry}
 */
proto.sp.rpc.emerald.Error.InvalidCountry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.InvalidCountry;
  return proto.sp.rpc.emerald.Error.InvalidCountry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.InvalidCountry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.InvalidCountry}
 */
proto.sp.rpc.emerald.Error.InvalidCountry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.InvalidCountry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.InvalidCountry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.InvalidCountry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.InvalidCountry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.InvalidPlatform.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.InvalidPlatform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.InvalidPlatform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.InvalidPlatform.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.InvalidPlatform}
 */
proto.sp.rpc.emerald.Error.InvalidPlatform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.InvalidPlatform;
  return proto.sp.rpc.emerald.Error.InvalidPlatform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.InvalidPlatform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.InvalidPlatform}
 */
proto.sp.rpc.emerald.Error.InvalidPlatform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.InvalidPlatform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.InvalidPlatform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.InvalidPlatform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.InvalidPlatform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Error.Service.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Error.Service.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Error.Service} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Service.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Error.Service}
 */
proto.sp.rpc.emerald.Error.Service.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Error.Service;
  return proto.sp.rpc.emerald.Error.Service.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Error.Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Error.Service}
 */
proto.sp.rpc.emerald.Error.Service.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Error.Service.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Error.Service.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Error.Service} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Error.Service.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any data = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.emerald.Error.Service.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.emerald.Error.Service} returns this
*/
proto.sp.rpc.emerald.Error.Service.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error.Service} returns this
 */
proto.sp.rpc.emerald.Error.Service.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.Service.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Data data = 1;
 * @return {?proto.sp.rpc.emerald.Error.Data}
 */
proto.sp.rpc.emerald.Error.prototype.getData = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.Data} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.Data, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.Data|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Unavailable unavailable_error = 2;
 * @return {?proto.sp.rpc.emerald.Error.Unavailable}
 */
proto.sp.rpc.emerald.Error.prototype.getUnavailableError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.Unavailable} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.Unavailable, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.Unavailable|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setUnavailableError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearUnavailableError = function() {
  return this.setUnavailableError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasUnavailableError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Cancelled cancelled_error = 3;
 * @return {?proto.sp.rpc.emerald.Error.Cancelled}
 */
proto.sp.rpc.emerald.Error.prototype.getCancelledError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.Cancelled} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.Cancelled, 3));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.Cancelled|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setCancelledError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearCancelledError = function() {
  return this.setCancelledError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasCancelledError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RPC rpc_error = 4;
 * @return {?proto.sp.rpc.emerald.Error.RPC}
 */
proto.sp.rpc.emerald.Error.prototype.getRpcError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.RPC} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.RPC, 4));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.RPC|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setRpcError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearRpcError = function() {
  return this.setRpcError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasRpcError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Timeout timeout_error = 5;
 * @return {?proto.sp.rpc.emerald.Error.Timeout}
 */
proto.sp.rpc.emerald.Error.prototype.getTimeoutError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.Timeout} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.Timeout, 5));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.Timeout|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setTimeoutError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearTimeoutError = function() {
  return this.setTimeoutError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasTimeoutError = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SessionLost session_lost_error = 6;
 * @return {?proto.sp.rpc.emerald.Error.SessionLost}
 */
proto.sp.rpc.emerald.Error.prototype.getSessionLostError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.SessionLost} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.SessionLost, 6));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.SessionLost|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setSessionLostError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearSessionLostError = function() {
  return this.setSessionLostError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasSessionLostError = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OfflineMode offline_mode_error = 7;
 * @return {?proto.sp.rpc.emerald.Error.OfflineMode}
 */
proto.sp.rpc.emerald.Error.prototype.getOfflineModeError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.OfflineMode} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.OfflineMode, 7));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.OfflineMode|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setOfflineModeError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearOfflineModeError = function() {
  return this.setOfflineModeError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasOfflineModeError = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ClockChange clock_change_error = 8;
 * @return {?proto.sp.rpc.emerald.Error.ClockChange}
 */
proto.sp.rpc.emerald.Error.prototype.getClockChangeError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.ClockChange} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.ClockChange, 8));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.ClockChange|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setClockChangeError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearClockChangeError = function() {
  return this.setClockChangeError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasClockChangeError = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional InvalidLinkData invalid_link_data_error = 9;
 * @return {?proto.sp.rpc.emerald.Error.InvalidLinkData}
 */
proto.sp.rpc.emerald.Error.prototype.getInvalidLinkDataError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.InvalidLinkData} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.InvalidLinkData, 9));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.InvalidLinkData|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setInvalidLinkDataError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearInvalidLinkDataError = function() {
  return this.setInvalidLinkDataError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasInvalidLinkDataError = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional InvalidLinkProviderToken invalid_link_provider_token_error = 10;
 * @return {?proto.sp.rpc.emerald.Error.InvalidLinkProviderToken}
 */
proto.sp.rpc.emerald.Error.prototype.getInvalidLinkProviderTokenError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.InvalidLinkProviderToken} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.InvalidLinkProviderToken, 10));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.InvalidLinkProviderToken|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setInvalidLinkProviderTokenError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearInvalidLinkProviderTokenError = function() {
  return this.setInvalidLinkProviderTokenError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasInvalidLinkProviderTokenError = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional LinkLogin link_login_error = 11;
 * @return {?proto.sp.rpc.emerald.Error.LinkLogin}
 */
proto.sp.rpc.emerald.Error.prototype.getLinkLoginError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.LinkLogin} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.LinkLogin, 11));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.LinkLogin|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setLinkLoginError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearLinkLoginError = function() {
  return this.setLinkLoginError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasLinkLoginError = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional InvalidSecurityToken invalid_security_token_error = 12;
 * @return {?proto.sp.rpc.emerald.Error.InvalidSecurityToken}
 */
proto.sp.rpc.emerald.Error.prototype.getInvalidSecurityTokenError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.InvalidSecurityToken} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.InvalidSecurityToken, 12));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.InvalidSecurityToken|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setInvalidSecurityTokenError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearInvalidSecurityTokenError = function() {
  return this.setInvalidSecurityTokenError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasInvalidSecurityTokenError = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RootedDevice rooted_device_error = 13;
 * @return {?proto.sp.rpc.emerald.Error.RootedDevice}
 */
proto.sp.rpc.emerald.Error.prototype.getRootedDeviceError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.RootedDevice} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.RootedDevice, 13));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.RootedDevice|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setRootedDeviceError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearRootedDeviceError = function() {
  return this.setRootedDeviceError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasRootedDeviceError = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Maintenance maintenance_error = 14;
 * @return {?proto.sp.rpc.emerald.Error.Maintenance}
 */
proto.sp.rpc.emerald.Error.prototype.getMaintenanceError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.Maintenance} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.Maintenance, 14));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.Maintenance|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setMaintenanceError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearMaintenanceError = function() {
  return this.setMaintenanceError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasMaintenanceError = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ForceUpgrade force_upgrade_error = 15;
 * @return {?proto.sp.rpc.emerald.Error.ForceUpgrade}
 */
proto.sp.rpc.emerald.Error.prototype.getForceUpgradeError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.ForceUpgrade} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.ForceUpgrade, 15));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.ForceUpgrade|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setForceUpgradeError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearForceUpgradeError = function() {
  return this.setForceUpgradeError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasForceUpgradeError = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional LoginRequired login_required_error = 16;
 * @return {?proto.sp.rpc.emerald.Error.LoginRequired}
 */
proto.sp.rpc.emerald.Error.prototype.getLoginRequiredError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.LoginRequired} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.LoginRequired, 16));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.LoginRequired|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setLoginRequiredError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearLoginRequiredError = function() {
  return this.setLoginRequiredError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasLoginRequiredError = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional GameData game_data_error = 17;
 * @return {?proto.sp.rpc.emerald.Error.GameData}
 */
proto.sp.rpc.emerald.Error.prototype.getGameDataError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.GameData} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.GameData, 17));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.GameData|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setGameDataError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearGameDataError = function() {
  return this.setGameDataError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasGameDataError = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional InvalidCountry invalid_country_error = 18;
 * @return {?proto.sp.rpc.emerald.Error.InvalidCountry}
 */
proto.sp.rpc.emerald.Error.prototype.getInvalidCountryError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.InvalidCountry} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.InvalidCountry, 18));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.InvalidCountry|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setInvalidCountryError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearInvalidCountryError = function() {
  return this.setInvalidCountryError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasInvalidCountryError = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional InvalidPlatform invalid_platform_error = 19;
 * @return {?proto.sp.rpc.emerald.Error.InvalidPlatform}
 */
proto.sp.rpc.emerald.Error.prototype.getInvalidPlatformError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.InvalidPlatform} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.InvalidPlatform, 19));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.InvalidPlatform|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setInvalidPlatformError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearInvalidPlatformError = function() {
  return this.setInvalidPlatformError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasInvalidPlatformError = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Service service_error = 20;
 * @return {?proto.sp.rpc.emerald.Error.Service}
 */
proto.sp.rpc.emerald.Error.prototype.getServiceError = function() {
  return /** @type{?proto.sp.rpc.emerald.Error.Service} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Error.Service, 20));
};


/**
 * @param {?proto.sp.rpc.emerald.Error.Service|undefined} value
 * @return {!proto.sp.rpc.emerald.Error} returns this
*/
proto.sp.rpc.emerald.Error.prototype.setServiceError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.sp.rpc.emerald.Error.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Error} returns this
 */
proto.sp.rpc.emerald.Error.prototype.clearServiceError = function() {
  return this.setServiceError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Error.prototype.hasServiceError = function() {
  return jspb.Message.getField(this, 20) != null;
};


goog.object.extend(exports, proto.sp.rpc.emerald);
