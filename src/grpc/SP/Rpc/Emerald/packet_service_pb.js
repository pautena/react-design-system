// source: SP/Rpc/Emerald/packet_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var SP_Rpc_Emerald_request_context_pb = require('../../../SP/Rpc/Emerald/request_context_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_request_context_pb);
goog.exportSymbol('proto.sp.rpc.emerald.Packet', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Command', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Command.CommonData', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Command.CustomCommand', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Command.DataCase', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Command.Error', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Command.EventCommand', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Command.PurchaseCommand', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Command.SyncCommand', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.CommandResponse', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Data', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.DataResponse', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Push', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.PushCommand', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Request', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Packet.Response', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.displayName = 'proto.sp.rpc.emerald.Packet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sp.rpc.emerald.Packet.Command.oneofGroups_);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Command.displayName = 'proto.sp.rpc.emerald.Packet.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Command.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Command.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Command.Error.displayName = 'proto.sp.rpc.emerald.Packet.Command.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Command.CommonData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Command.CommonData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Command.CommonData.displayName = 'proto.sp.rpc.emerald.Packet.Command.CommonData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Command.SyncCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Command.SyncCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Command.SyncCommand.displayName = 'proto.sp.rpc.emerald.Packet.Command.SyncCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Command.EventCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Command.EventCommand.displayName = 'proto.sp.rpc.emerald.Packet.Command.EventCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Command.PurchaseCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.displayName = 'proto.sp.rpc.emerald.Packet.Command.PurchaseCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.displayName = 'proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Command.CustomCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Command.CustomCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Command.CustomCommand.displayName = 'proto.sp.rpc.emerald.Packet.Command.CustomCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.Packet.Data.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Data.displayName = 'proto.sp.rpc.emerald.Packet.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.Packet.Request.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Request.displayName = 'proto.sp.rpc.emerald.Packet.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.CommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.CommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.CommandResponse.displayName = 'proto.sp.rpc.emerald.Packet.CommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.DataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.Packet.DataResponse.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.DataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.DataResponse.displayName = 'proto.sp.rpc.emerald.Packet.DataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.PushCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.PushCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.PushCommand.displayName = 'proto.sp.rpc.emerald.Packet.PushCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Push = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.Packet.Push.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Push, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Push.displayName = 'proto.sp.rpc.emerald.Packet.Push';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Packet.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.Packet.Response.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.Packet.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Packet.Response.displayName = 'proto.sp.rpc.emerald.Packet.Response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet}
 */
proto.sp.rpc.emerald.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet;
  return proto.sp.rpc.emerald.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet}
 */
proto.sp.rpc.emerald.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sp.rpc.emerald.Packet.Command.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.sp.rpc.emerald.Packet.Command.DataCase = {
  DATA_NOT_SET: 0,
  SYNC_COMMAND: 2,
  EVENT_COMMAND: 3,
  PURCHASE_COMMAND: 4,
  PUSH_ENABLED_COMMAND: 5,
  CUSTOM_COMMAND: 6
};

/**
 * @return {proto.sp.rpc.emerald.Packet.Command.DataCase}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.getDataCase = function() {
  return /** @type {proto.sp.rpc.emerald.Packet.Command.DataCase} */(jspb.Message.computeOneofCase(this, proto.sp.rpc.emerald.Packet.Command.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    commonData: (f = msg.getCommonData()) && proto.sp.rpc.emerald.Packet.Command.CommonData.toObject(includeInstance, f),
    syncCommand: (f = msg.getSyncCommand()) && proto.sp.rpc.emerald.Packet.Command.SyncCommand.toObject(includeInstance, f),
    eventCommand: (f = msg.getEventCommand()) && proto.sp.rpc.emerald.Packet.Command.EventCommand.toObject(includeInstance, f),
    purchaseCommand: (f = msg.getPurchaseCommand()) && proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.toObject(includeInstance, f),
    pushEnabledCommand: (f = msg.getPushEnabledCommand()) && proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.toObject(includeInstance, f),
    customCommand: (f = msg.getCustomCommand()) && proto.sp.rpc.emerald.Packet.Command.CustomCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Command}
 */
proto.sp.rpc.emerald.Packet.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Command;
  return proto.sp.rpc.emerald.Packet.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Command}
 */
proto.sp.rpc.emerald.Packet.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.Packet.Command.CommonData;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.Command.CommonData.deserializeBinaryFromReader);
      msg.setCommonData(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.Packet.Command.SyncCommand;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.Command.SyncCommand.deserializeBinaryFromReader);
      msg.setSyncCommand(value);
      break;
    case 3:
      var value = new proto.sp.rpc.emerald.Packet.Command.EventCommand;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.Command.EventCommand.deserializeBinaryFromReader);
      msg.setEventCommand(value);
      break;
    case 4:
      var value = new proto.sp.rpc.emerald.Packet.Command.PurchaseCommand;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.deserializeBinaryFromReader);
      msg.setPurchaseCommand(value);
      break;
    case 5:
      var value = new proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.deserializeBinaryFromReader);
      msg.setPushEnabledCommand(value);
      break;
    case 6:
      var value = new proto.sp.rpc.emerald.Packet.Command.CustomCommand;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.Command.CustomCommand.deserializeBinaryFromReader);
      msg.setCustomCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommonData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sp.rpc.emerald.Packet.Command.CommonData.serializeBinaryToWriter
    );
  }
  f = message.getSyncCommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sp.rpc.emerald.Packet.Command.SyncCommand.serializeBinaryToWriter
    );
  }
  f = message.getEventCommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sp.rpc.emerald.Packet.Command.EventCommand.serializeBinaryToWriter
    );
  }
  f = message.getPurchaseCommand();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.serializeBinaryToWriter
    );
  }
  f = message.getPushEnabledCommand();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.serializeBinaryToWriter
    );
  }
  f = message.getCustomCommand();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sp.rpc.emerald.Packet.Command.CustomCommand.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Command.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Command.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Command.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientMessage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientLocalize: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Command.Error}
 */
proto.sp.rpc.emerald.Packet.Command.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Command.Error;
  return proto.sp.rpc.emerald.Packet.Command.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Command.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Command.Error}
 */
proto.sp.rpc.emerald.Packet.Command.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientLocalize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Command.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Command.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Command.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientLocalize();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.sp.rpc.emerald.Packet.Command.Error.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.Error} returns this
 */
proto.sp.rpc.emerald.Packet.Command.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.Command.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.Error} returns this
 */
proto.sp.rpc.emerald.Packet.Command.Error.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string client_message = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.Command.Error.prototype.getClientMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.Error} returns this
 */
proto.sp.rpc.emerald.Packet.Command.Error.prototype.setClientMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string client_localize = 4;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.Command.Error.prototype.getClientLocalize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.Error} returns this
 */
proto.sp.rpc.emerald.Packet.Command.Error.prototype.setClientLocalize = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Command.CommonData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Command.CommonData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ts: (f = msg.getTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    unique: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    atomic: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Command.CommonData}
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Command.CommonData;
  return proto.sp.rpc.emerald.Packet.Command.CommonData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Command.CommonData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Command.CommonData}
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTs(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnique(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAtomic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Command.CommonData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Command.CommonData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUnique();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAtomic();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.CommonData} returns this
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.CommonData} returns this
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp ts = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.getTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.CommonData} returns this
*/
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.setTs = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Command.CommonData} returns this
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.clearTs = function() {
  return this.setTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.hasTs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool unique = 4;
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.getUnique = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.CommonData} returns this
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.setUnique = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool atomic = 5;
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.getAtomic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.CommonData} returns this
 */
proto.sp.rpc.emerald.Packet.Command.CommonData.prototype.setAtomic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Command.SyncCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Command.SyncCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Command.SyncCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.SyncCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Command.SyncCommand}
 */
proto.sp.rpc.emerald.Packet.Command.SyncCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Command.SyncCommand;
  return proto.sp.rpc.emerald.Packet.Command.SyncCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Command.SyncCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Command.SyncCommand}
 */
proto.sp.rpc.emerald.Packet.Command.SyncCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Command.SyncCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Command.SyncCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Command.SyncCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.SyncCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any data = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.emerald.Packet.Command.SyncCommand.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.SyncCommand} returns this
*/
proto.sp.rpc.emerald.Packet.Command.SyncCommand.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Command.SyncCommand} returns this
 */
proto.sp.rpc.emerald.Packet.Command.SyncCommand.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.SyncCommand.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Command.EventCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Command.EventCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Command.EventCommand}
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Command.EventCommand;
  return proto.sp.rpc.emerald.Packet.Command.EventCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Command.EventCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Command.EventCommand}
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Command.EventCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Command.EventCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.EventCommand} returns this
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any data = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.EventCommand} returns this
*/
proto.sp.rpc.emerald.Packet.Command.EventCommand.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Command.EventCommand} returns this
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.EventCommand} returns this
 */
proto.sp.rpc.emerald.Packet.Command.EventCommand.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Command.PurchaseCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    receipt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gateway: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Command.PurchaseCommand}
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Command.PurchaseCommand;
  return proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Command.PurchaseCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Command.PurchaseCommand}
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceipt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Command.PurchaseCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceipt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGateway();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string receipt = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.prototype.getReceipt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.PurchaseCommand} returns this
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.prototype.setReceipt = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gateway = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.PurchaseCommand} returns this
 */
proto.sp.rpc.emerald.Packet.Command.PurchaseCommand.prototype.setGateway = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand}
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand;
  return proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand}
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand} returns this
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand} returns this
 */
proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Command.CustomCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Command.CustomCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Command.CustomCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.CustomCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Command.CustomCommand}
 */
proto.sp.rpc.emerald.Packet.Command.CustomCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Command.CustomCommand;
  return proto.sp.rpc.emerald.Packet.Command.CustomCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Command.CustomCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Command.CustomCommand}
 */
proto.sp.rpc.emerald.Packet.Command.CustomCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Command.CustomCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Command.CustomCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Command.CustomCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Command.CustomCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any data = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.emerald.Packet.Command.CustomCommand.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Command.CustomCommand} returns this
*/
proto.sp.rpc.emerald.Packet.Command.CustomCommand.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Command.CustomCommand} returns this
 */
proto.sp.rpc.emerald.Packet.Command.CustomCommand.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.CustomCommand.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CommonData common_data = 1;
 * @return {?proto.sp.rpc.emerald.Packet.Command.CommonData}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.getCommonData = function() {
  return /** @type{?proto.sp.rpc.emerald.Packet.Command.CommonData} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Packet.Command.CommonData, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.Packet.Command.CommonData|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
*/
proto.sp.rpc.emerald.Packet.Command.prototype.setCommonData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
 */
proto.sp.rpc.emerald.Packet.Command.prototype.clearCommonData = function() {
  return this.setCommonData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.hasCommonData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SyncCommand sync_command = 2;
 * @return {?proto.sp.rpc.emerald.Packet.Command.SyncCommand}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.getSyncCommand = function() {
  return /** @type{?proto.sp.rpc.emerald.Packet.Command.SyncCommand} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Packet.Command.SyncCommand, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.Packet.Command.SyncCommand|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
*/
proto.sp.rpc.emerald.Packet.Command.prototype.setSyncCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sp.rpc.emerald.Packet.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
 */
proto.sp.rpc.emerald.Packet.Command.prototype.clearSyncCommand = function() {
  return this.setSyncCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.hasSyncCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventCommand event_command = 3;
 * @return {?proto.sp.rpc.emerald.Packet.Command.EventCommand}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.getEventCommand = function() {
  return /** @type{?proto.sp.rpc.emerald.Packet.Command.EventCommand} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Packet.Command.EventCommand, 3));
};


/**
 * @param {?proto.sp.rpc.emerald.Packet.Command.EventCommand|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
*/
proto.sp.rpc.emerald.Packet.Command.prototype.setEventCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sp.rpc.emerald.Packet.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
 */
proto.sp.rpc.emerald.Packet.Command.prototype.clearEventCommand = function() {
  return this.setEventCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.hasEventCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PurchaseCommand purchase_command = 4;
 * @return {?proto.sp.rpc.emerald.Packet.Command.PurchaseCommand}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.getPurchaseCommand = function() {
  return /** @type{?proto.sp.rpc.emerald.Packet.Command.PurchaseCommand} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Packet.Command.PurchaseCommand, 4));
};


/**
 * @param {?proto.sp.rpc.emerald.Packet.Command.PurchaseCommand|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
*/
proto.sp.rpc.emerald.Packet.Command.prototype.setPurchaseCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sp.rpc.emerald.Packet.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
 */
proto.sp.rpc.emerald.Packet.Command.prototype.clearPurchaseCommand = function() {
  return this.setPurchaseCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.hasPurchaseCommand = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PushEnabledCommand push_enabled_command = 5;
 * @return {?proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.getPushEnabledCommand = function() {
  return /** @type{?proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand, 5));
};


/**
 * @param {?proto.sp.rpc.emerald.Packet.Command.PushEnabledCommand|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
*/
proto.sp.rpc.emerald.Packet.Command.prototype.setPushEnabledCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.sp.rpc.emerald.Packet.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
 */
proto.sp.rpc.emerald.Packet.Command.prototype.clearPushEnabledCommand = function() {
  return this.setPushEnabledCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.hasPushEnabledCommand = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CustomCommand custom_command = 6;
 * @return {?proto.sp.rpc.emerald.Packet.Command.CustomCommand}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.getCustomCommand = function() {
  return /** @type{?proto.sp.rpc.emerald.Packet.Command.CustomCommand} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Packet.Command.CustomCommand, 6));
};


/**
 * @param {?proto.sp.rpc.emerald.Packet.Command.CustomCommand|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
*/
proto.sp.rpc.emerald.Packet.Command.prototype.setCustomCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.sp.rpc.emerald.Packet.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Command} returns this
 */
proto.sp.rpc.emerald.Packet.Command.prototype.clearCustomCommand = function() {
  return this.setCustomCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Command.prototype.hasCustomCommand = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.Packet.Data.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    pid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ts: (f = msg.getTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.sp.rpc.emerald.Packet.Command.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Data}
 */
proto.sp.rpc.emerald.Packet.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Data;
  return proto.sp.rpc.emerald.Packet.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Data}
 */
proto.sp.rpc.emerald.Packet.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPid(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTs(value);
      break;
    case 3:
      var value = new proto.sp.rpc.emerald.Packet.Command;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.Command.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.sp.rpc.emerald.Packet.Command.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 pid = 1;
 * @return {number}
 */
proto.sp.rpc.emerald.Packet.Data.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.Packet.Data} returns this
 */
proto.sp.rpc.emerald.Packet.Data.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp ts = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sp.rpc.emerald.Packet.Data.prototype.getTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Data} returns this
*/
proto.sp.rpc.emerald.Packet.Data.prototype.setTs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Data} returns this
 */
proto.sp.rpc.emerald.Packet.Data.prototype.clearTs = function() {
  return this.setTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Data.prototype.hasTs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Command commands = 3;
 * @return {!Array<!proto.sp.rpc.emerald.Packet.Command>}
 */
proto.sp.rpc.emerald.Packet.Data.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.Packet.Command>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.Packet.Command, 3));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.Packet.Command>} value
 * @return {!proto.sp.rpc.emerald.Packet.Data} returns this
*/
proto.sp.rpc.emerald.Packet.Data.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.sp.rpc.emerald.Packet.Command=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.Packet.Command}
 */
proto.sp.rpc.emerald.Packet.Data.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.sp.rpc.emerald.Packet.Command, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.Packet.Data} returns this
 */
proto.sp.rpc.emerald.Packet.Data.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.Packet.Request.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && SP_Rpc_Emerald_request_context_pb.RequestContext.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.sp.rpc.emerald.Packet.Data.toObject(includeInstance, f),
    acksList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Request}
 */
proto.sp.rpc.emerald.Packet.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Request;
  return proto.sp.rpc.emerald.Packet.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Request}
 */
proto.sp.rpc.emerald.Packet.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_request_context_pb.RequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_request_context_pb.RequestContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.Packet.Data;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAcks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_request_context_pb.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sp.rpc.emerald.Packet.Data.serializeBinaryToWriter
    );
  }
  f = message.getAcksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional RequestContext context = 1;
 * @return {?proto.sp.rpc.emerald.RequestContext}
 */
proto.sp.rpc.emerald.Packet.Request.prototype.getContext = function() {
  return /** @type{?proto.sp.rpc.emerald.RequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_request_context_pb.RequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.RequestContext|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Request} returns this
*/
proto.sp.rpc.emerald.Packet.Request.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Request} returns this
 */
proto.sp.rpc.emerald.Packet.Request.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Request.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Data data = 2;
 * @return {?proto.sp.rpc.emerald.Packet.Data}
 */
proto.sp.rpc.emerald.Packet.Request.prototype.getData = function() {
  return /** @type{?proto.sp.rpc.emerald.Packet.Data} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Packet.Data, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.Packet.Data|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Request} returns this
*/
proto.sp.rpc.emerald.Packet.Request.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Request} returns this
 */
proto.sp.rpc.emerald.Packet.Request.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Request.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string acks = 3;
 * @return {!Array<string>}
 */
proto.sp.rpc.emerald.Packet.Request.prototype.getAcksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sp.rpc.emerald.Packet.Request} returns this
 */
proto.sp.rpc.emerald.Packet.Request.prototype.setAcksList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.Packet.Request} returns this
 */
proto.sp.rpc.emerald.Packet.Request.prototype.addAcks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.Packet.Request} returns this
 */
proto.sp.rpc.emerald.Packet.Request.prototype.clearAcksList = function() {
  return this.setAcksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.CommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.CommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.CommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.CommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    response: (f = msg.getResponse()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.CommandResponse}
 */
proto.sp.rpc.emerald.Packet.CommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.CommandResponse;
  return proto.sp.rpc.emerald.Packet.CommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.CommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.CommandResponse}
 */
proto.sp.rpc.emerald.Packet.CommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.CommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.CommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.CommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.CommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.CommandResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.CommandResponse} returns this
 */
proto.sp.rpc.emerald.Packet.CommandResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any response = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.emerald.Packet.CommandResponse.prototype.getResponse = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.CommandResponse} returns this
*/
proto.sp.rpc.emerald.Packet.CommandResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.CommandResponse} returns this
 */
proto.sp.rpc.emerald.Packet.CommandResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.CommandResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.Packet.DataResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.DataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.DataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.DataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.DataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.sp.rpc.emerald.Packet.CommandResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.DataResponse}
 */
proto.sp.rpc.emerald.Packet.DataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.DataResponse;
  return proto.sp.rpc.emerald.Packet.DataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.DataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.DataResponse}
 */
proto.sp.rpc.emerald.Packet.DataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPid(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.Packet.CommandResponse;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.CommandResponse.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.DataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.DataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.DataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.DataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sp.rpc.emerald.Packet.CommandResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 pid = 1;
 * @return {number}
 */
proto.sp.rpc.emerald.Packet.DataResponse.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.Packet.DataResponse} returns this
 */
proto.sp.rpc.emerald.Packet.DataResponse.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated CommandResponse commands = 2;
 * @return {!Array<!proto.sp.rpc.emerald.Packet.CommandResponse>}
 */
proto.sp.rpc.emerald.Packet.DataResponse.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.Packet.CommandResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.Packet.CommandResponse, 2));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.Packet.CommandResponse>} value
 * @return {!proto.sp.rpc.emerald.Packet.DataResponse} returns this
*/
proto.sp.rpc.emerald.Packet.DataResponse.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sp.rpc.emerald.Packet.CommandResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.Packet.CommandResponse}
 */
proto.sp.rpc.emerald.Packet.DataResponse.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sp.rpc.emerald.Packet.CommandResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.Packet.DataResponse} returns this
 */
proto.sp.rpc.emerald.Packet.DataResponse.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.PushCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.PushCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.PushCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ts: (f = msg.getTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.PushCommand}
 */
proto.sp.rpc.emerald.Packet.PushCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.PushCommand;
  return proto.sp.rpc.emerald.Packet.PushCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.PushCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.PushCommand}
 */
proto.sp.rpc.emerald.Packet.PushCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTs(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.PushCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.PushCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.PushCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.PushCommand} returns this
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Packet.PushCommand} returns this
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp ts = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.getTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.PushCommand} returns this
*/
proto.sp.rpc.emerald.Packet.PushCommand.prototype.setTs = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.PushCommand} returns this
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.clearTs = function() {
  return this.setTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.hasTs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Any data = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.PushCommand} returns this
*/
proto.sp.rpc.emerald.Packet.PushCommand.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.PushCommand} returns this
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.PushCommand.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.Packet.Push.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Push.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Push.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Push} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Push.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.sp.rpc.emerald.Packet.PushCommand.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Push}
 */
proto.sp.rpc.emerald.Packet.Push.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Push;
  return proto.sp.rpc.emerald.Packet.Push.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Push} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Push}
 */
proto.sp.rpc.emerald.Packet.Push.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.Packet.PushCommand;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.PushCommand.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Push.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Push.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Push} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Push.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sp.rpc.emerald.Packet.PushCommand.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PushCommand commands = 1;
 * @return {!Array<!proto.sp.rpc.emerald.Packet.PushCommand>}
 */
proto.sp.rpc.emerald.Packet.Push.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.Packet.PushCommand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.Packet.PushCommand, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.Packet.PushCommand>} value
 * @return {!proto.sp.rpc.emerald.Packet.Push} returns this
*/
proto.sp.rpc.emerald.Packet.Push.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.emerald.Packet.PushCommand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.Packet.PushCommand}
 */
proto.sp.rpc.emerald.Packet.Push.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.emerald.Packet.PushCommand, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.Packet.Push} returns this
 */
proto.sp.rpc.emerald.Packet.Push.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.Packet.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Packet.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Packet.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Packet.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.sp.rpc.emerald.Packet.DataResponse.toObject, includeInstance),
    push: (f = msg.getPush()) && proto.sp.rpc.emerald.Packet.Push.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Packet.Response}
 */
proto.sp.rpc.emerald.Packet.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Packet.Response;
  return proto.sp.rpc.emerald.Packet.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Packet.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Packet.Response}
 */
proto.sp.rpc.emerald.Packet.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.Packet.DataResponse;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.DataResponse.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.Packet.Push;
      reader.readMessage(value,proto.sp.rpc.emerald.Packet.Push.deserializeBinaryFromReader);
      msg.setPush(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Packet.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Packet.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Packet.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Packet.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sp.rpc.emerald.Packet.DataResponse.serializeBinaryToWriter
    );
  }
  f = message.getPush();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sp.rpc.emerald.Packet.Push.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DataResponse data = 1;
 * @return {!Array<!proto.sp.rpc.emerald.Packet.DataResponse>}
 */
proto.sp.rpc.emerald.Packet.Response.prototype.getDataList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.Packet.DataResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.Packet.DataResponse, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.Packet.DataResponse>} value
 * @return {!proto.sp.rpc.emerald.Packet.Response} returns this
*/
proto.sp.rpc.emerald.Packet.Response.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.emerald.Packet.DataResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.Packet.DataResponse}
 */
proto.sp.rpc.emerald.Packet.Response.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.emerald.Packet.DataResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.Packet.Response} returns this
 */
proto.sp.rpc.emerald.Packet.Response.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional Push push = 2;
 * @return {?proto.sp.rpc.emerald.Packet.Push}
 */
proto.sp.rpc.emerald.Packet.Response.prototype.getPush = function() {
  return /** @type{?proto.sp.rpc.emerald.Packet.Push} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Packet.Push, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.Packet.Push|undefined} value
 * @return {!proto.sp.rpc.emerald.Packet.Response} returns this
*/
proto.sp.rpc.emerald.Packet.Response.prototype.setPush = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Packet.Response} returns this
 */
proto.sp.rpc.emerald.Packet.Response.prototype.clearPush = function() {
  return this.setPush(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Packet.Response.prototype.hasPush = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.sp.rpc.emerald);
