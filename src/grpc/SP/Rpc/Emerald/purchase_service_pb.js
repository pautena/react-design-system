// source: SP/Rpc/Emerald/purchase_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var SP_Rpc_Emerald_request_context_pb = require('../../../SP/Rpc/Emerald/request_context_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_request_context_pb);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.ActiveSubscription', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.ITunesReceipt', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.PurchaseValidationData', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.RestorePurchasesData', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.DataCase', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.Status', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.ValidateRequest', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.ValidateRequest.DataCase', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.Purchase.ValidateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.displayName = 'proto.sp.rpc.emerald.Purchase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.ITunesReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.ITunesReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.ITunesReceipt.displayName = 'proto.sp.rpc.emerald.Purchase.ITunesReceipt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.PurchaseValidationData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.displayName = 'proto.sp.rpc.emerald.Purchase.PurchaseValidationData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.displayName = 'proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.displayName = 'proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.displayName = 'proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.displayName = 'proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.displayName = 'proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sp.rpc.emerald.Purchase.ValidateRequest.oneofGroups_);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.ValidateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.ValidateRequest.displayName = 'proto.sp.rpc.emerald.Purchase.ValidateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.ValidateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.ValidateResponse.displayName = 'proto.sp.rpc.emerald.Purchase.ValidateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.ActiveSubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.ActiveSubscription.displayName = 'proto.sp.rpc.emerald.Purchase.ActiveSubscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.displayName = 'proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.displayName = 'proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.RestorePurchasesData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.RestorePurchasesData.displayName = 'proto.sp.rpc.emerald.Purchase.RestorePurchasesData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.displayName = 'proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.oneofGroups_);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.displayName = 'proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse.displayName = 'proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase}
 */
proto.sp.rpc.emerald.Purchase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase;
  return proto.sp.rpc.emerald.Purchase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase}
 */
proto.sp.rpc.emerald.Purchase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.sp.rpc.emerald.Purchase.Status = {
  INVALID: 0,
  NOT_SYNCED: 1,
  ALREADY_SYNCED: 2,
  OK: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.ITunesReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.ITunesReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.ITunesReceipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ITunesReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    appStoreReceiptBase64: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.ITunesReceipt}
 */
proto.sp.rpc.emerald.Purchase.ITunesReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.ITunesReceipt;
  return proto.sp.rpc.emerald.Purchase.ITunesReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.ITunesReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.ITunesReceipt}
 */
proto.sp.rpc.emerald.Purchase.ITunesReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppStoreReceiptBase64(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.ITunesReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.ITunesReceipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.ITunesReceipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ITunesReceipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppStoreReceiptBase64();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string app_store_receipt_base64 = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Purchase.ITunesReceipt.prototype.getAppStoreReceiptBase64 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Purchase.ITunesReceipt} returns this
 */
proto.sp.rpc.emerald.Purchase.ITunesReceipt.prototype.setAppStoreReceiptBase64 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData;
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.toObject = function(includeInstance, msg) {
  var f, obj = {
    receipt: (f = msg.getReceipt()) && proto.sp.rpc.emerald.Purchase.ITunesReceipt.toObject(includeInstance, f),
    transactionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    originalTransactionId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes;
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.Purchase.ITunesReceipt;
      reader.readMessage(value,proto.sp.rpc.emerald.Purchase.ITunesReceipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sp.rpc.emerald.Purchase.ITunesReceipt.serializeBinaryToWriter
    );
  }
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOriginalTransactionId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional ITunesReceipt receipt = 1;
 * @return {?proto.sp.rpc.emerald.Purchase.ITunesReceipt}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.prototype.getReceipt = function() {
  return /** @type{?proto.sp.rpc.emerald.Purchase.ITunesReceipt} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Purchase.ITunesReceipt, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.Purchase.ITunesReceipt|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes} returns this
*/
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.prototype.setReceipt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes} returns this
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.prototype.clearReceipt = function() {
  return this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string transaction_id = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes} returns this
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string original_transaction_id = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.prototype.getOriginalTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes} returns this
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.prototype.setOriginalTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay;
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay} returns this
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signature = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay} returns this
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon;
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows;
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity;
  return proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sp.rpc.emerald.Purchase.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.sp.rpc.emerald.Purchase.Status}
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.prototype.getStatus = function() {
  return /** @type {!proto.sp.rpc.emerald.Purchase.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.sp.rpc.emerald.Purchase.Status} value
 * @return {!proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity} returns this
 */
proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.oneofGroups_ = [[3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.DataCase = {
  DATA_NOT_SET: 0,
  ITUNES: 3,
  GOOGLE_PLAY: 4,
  AMAZON: 5,
  WINDOWS: 6,
  UNITY: 7
};

/**
 * @return {proto.sp.rpc.emerald.Purchase.ValidateRequest.DataCase}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.getDataCase = function() {
  return /** @type {proto.sp.rpc.emerald.Purchase.ValidateRequest.DataCase} */(jspb.Message.computeOneofCase(this, proto.sp.rpc.emerald.Purchase.ValidateRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.ValidateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.ValidateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && SP_Rpc_Emerald_request_context_pb.RequestContext.toObject(includeInstance, f),
    testMode: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    itunes: (f = msg.getItunes()) && proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.toObject(includeInstance, f),
    googlePlay: (f = msg.getGooglePlay()) && proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.toObject(includeInstance, f),
    amazon: (f = msg.getAmazon()) && proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.toObject(includeInstance, f),
    windows: (f = msg.getWindows()) && proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.toObject(includeInstance, f),
    unity: (f = msg.getUnity()) && proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.ValidateRequest;
  return proto.sp.rpc.emerald.Purchase.ValidateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.ValidateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_request_context_pb.RequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_request_context_pb.RequestContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestMode(value);
      break;
    case 3:
      var value = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes;
      reader.readMessage(value,proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.deserializeBinaryFromReader);
      msg.setItunes(value);
      break;
    case 4:
      var value = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay;
      reader.readMessage(value,proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.deserializeBinaryFromReader);
      msg.setGooglePlay(value);
      break;
    case 5:
      var value = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon;
      reader.readMessage(value,proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.deserializeBinaryFromReader);
      msg.setAmazon(value);
      break;
    case 6:
      var value = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows;
      reader.readMessage(value,proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.deserializeBinaryFromReader);
      msg.setWindows(value);
      break;
    case 7:
      var value = new proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity;
      reader.readMessage(value,proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.deserializeBinaryFromReader);
      msg.setUnity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.ValidateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.ValidateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_request_context_pb.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getTestMode();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getItunes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes.serializeBinaryToWriter
    );
  }
  f = message.getGooglePlay();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay.serializeBinaryToWriter
    );
  }
  f = message.getAmazon();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon.serializeBinaryToWriter
    );
  }
  f = message.getWindows();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows.serializeBinaryToWriter
    );
  }
  f = message.getUnity();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestContext context = 1;
 * @return {?proto.sp.rpc.emerald.RequestContext}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.getContext = function() {
  return /** @type{?proto.sp.rpc.emerald.RequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_request_context_pb.RequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.RequestContext|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
*/
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool test_mode = 2;
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.getTestMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.setTestMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional PurchaseValidationData.ITunes itunes = 3;
 * @return {?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.getItunes = function() {
  return /** @type{?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes, 3));
};


/**
 * @param {?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.ITunes|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
*/
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.setItunes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sp.rpc.emerald.Purchase.ValidateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.clearItunes = function() {
  return this.setItunes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.hasItunes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PurchaseValidationData.GooglePlay google_play = 4;
 * @return {?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.getGooglePlay = function() {
  return /** @type{?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay, 4));
};


/**
 * @param {?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.GooglePlay|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
*/
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.setGooglePlay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sp.rpc.emerald.Purchase.ValidateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.clearGooglePlay = function() {
  return this.setGooglePlay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.hasGooglePlay = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PurchaseValidationData.Amazon amazon = 5;
 * @return {?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.getAmazon = function() {
  return /** @type{?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon, 5));
};


/**
 * @param {?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Amazon|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
*/
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.setAmazon = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.sp.rpc.emerald.Purchase.ValidateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.clearAmazon = function() {
  return this.setAmazon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.hasAmazon = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PurchaseValidationData.Windows windows = 6;
 * @return {?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.getWindows = function() {
  return /** @type{?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows, 6));
};


/**
 * @param {?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Windows|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
*/
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.setWindows = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.sp.rpc.emerald.Purchase.ValidateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.clearWindows = function() {
  return this.setWindows(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.hasWindows = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PurchaseValidationData.Unity unity = 7;
 * @return {?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.getUnity = function() {
  return /** @type{?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity, 7));
};


/**
 * @param {?proto.sp.rpc.emerald.Purchase.PurchaseValidationData.Unity|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
*/
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.setUnity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.sp.rpc.emerald.Purchase.ValidateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateRequest} returns this
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.clearUnity = function() {
  return this.setUnity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.ValidateRequest.prototype.hasUnity = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.ValidateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.ValidateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orderId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateResponse}
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.ValidateResponse;
  return proto.sp.rpc.emerald.Purchase.ValidateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.ValidateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateResponse}
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sp.rpc.emerald.Purchase.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.ValidateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.ValidateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.sp.rpc.emerald.Purchase.Status}
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse.prototype.getStatus = function() {
  return /** @type {!proto.sp.rpc.emerald.Purchase.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.sp.rpc.emerald.Purchase.Status} value
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateResponse} returns this
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string order_id = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Purchase.ValidateResponse} returns this
 */
proto.sp.rpc.emerald.Purchase.ValidateResponse.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.ActiveSubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.ActiveSubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expirationTs: (f = msg.getExpirationTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscription}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.ActiveSubscription;
  return proto.sp.rpc.emerald.Purchase.ActiveSubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.ActiveSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscription}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpirationTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.ActiveSubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.ActiveSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpirationTs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscription} returns this
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp expiration_ts = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.prototype.getExpirationTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscription} returns this
*/
proto.sp.rpc.emerald.Purchase.ActiveSubscription.prototype.setExpirationTs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscription} returns this
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.prototype.clearExpirationTs = function() {
  return this.setExpirationTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscription.prototype.hasExpirationTs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && SP_Rpc_Emerald_request_context_pb.RequestContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest;
  return proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_request_context_pb.RequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_request_context_pb.RequestContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_request_context_pb.RequestContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestContext context = 1;
 * @return {?proto.sp.rpc.emerald.RequestContext}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.prototype.getContext = function() {
  return /** @type{?proto.sp.rpc.emerald.RequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_request_context_pb.RequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.RequestContext|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest} returns this
*/
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest} returns this
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activeSubscriptionsList: jspb.Message.toObjectList(msg.getActiveSubscriptionsList(),
    proto.sp.rpc.emerald.Purchase.ActiveSubscription.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse;
  return proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.Purchase.ActiveSubscription;
      reader.readMessage(value,proto.sp.rpc.emerald.Purchase.ActiveSubscription.deserializeBinaryFromReader);
      msg.addActiveSubscriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActiveSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sp.rpc.emerald.Purchase.ActiveSubscription.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ActiveSubscription active_subscriptions = 1;
 * @return {!Array<!proto.sp.rpc.emerald.Purchase.ActiveSubscription>}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.prototype.getActiveSubscriptionsList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.Purchase.ActiveSubscription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.Purchase.ActiveSubscription, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.Purchase.ActiveSubscription>} value
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse} returns this
*/
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.prototype.setActiveSubscriptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.emerald.Purchase.ActiveSubscription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscription}
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.prototype.addActiveSubscriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.emerald.Purchase.ActiveSubscription, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse} returns this
 */
proto.sp.rpc.emerald.Purchase.ActiveSubscriptionsResponse.prototype.clearActiveSubscriptionsList = function() {
  return this.setActiveSubscriptionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.RestorePurchasesData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.RestorePurchasesData;
  return proto.sp.rpc.emerald.Purchase.RestorePurchasesData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.RestorePurchasesData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.toObject = function(includeInstance, msg) {
  var f, obj = {
    receipt: (f = msg.getReceipt()) && proto.sp.rpc.emerald.Purchase.ITunesReceipt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes;
  return proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.Purchase.ITunesReceipt;
      reader.readMessage(value,proto.sp.rpc.emerald.Purchase.ITunesReceipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sp.rpc.emerald.Purchase.ITunesReceipt.serializeBinaryToWriter
    );
  }
};


/**
 * optional ITunesReceipt receipt = 1;
 * @return {?proto.sp.rpc.emerald.Purchase.ITunesReceipt}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.prototype.getReceipt = function() {
  return /** @type{?proto.sp.rpc.emerald.Purchase.ITunesReceipt} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Purchase.ITunesReceipt, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.Purchase.ITunesReceipt|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes} returns this
*/
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.prototype.setReceipt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes} returns this
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.prototype.clearReceipt = function() {
  return this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.DataCase = {
  DATA_NOT_SET: 0,
  ITUNES: 2
};

/**
 * @return {proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.DataCase}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.getDataCase = function() {
  return /** @type {proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.DataCase} */(jspb.Message.computeOneofCase(this, proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && SP_Rpc_Emerald_request_context_pb.RequestContext.toObject(includeInstance, f),
    itunes: (f = msg.getItunes()) && proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest;
  return proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_request_context_pb.RequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_request_context_pb.RequestContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes;
      reader.readMessage(value,proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.deserializeBinaryFromReader);
      msg.setItunes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_request_context_pb.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getItunes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestContext context = 1;
 * @return {?proto.sp.rpc.emerald.RequestContext}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.getContext = function() {
  return /** @type{?proto.sp.rpc.emerald.RequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_request_context_pb.RequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.RequestContext|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest} returns this
*/
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest} returns this
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RestorePurchasesData.ITunes itunes = 2;
 * @return {?proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.getItunes = function() {
  return /** @type{?proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.Purchase.RestorePurchasesData.ITunes|undefined} value
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest} returns this
*/
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.setItunes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest} returns this
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.clearItunes = function() {
  return this.setItunes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesRequest.prototype.hasItunes = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse;
  return proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.Purchase.RestorePurchasesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.sp.rpc.emerald);
