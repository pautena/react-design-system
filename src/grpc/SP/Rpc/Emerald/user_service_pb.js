// source: SP/Rpc/Emerald/user_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var SP_Rpc_Emerald_request_context_pb = require('../../../SP/Rpc/Emerald/request_context_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_request_context_pb);
var SP_Rpc_Emerald_terms_of_service_pb = require('../../../SP/Rpc/Emerald/terms_of_service_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_terms_of_service_pb);
var SP_Rpc_Emerald_cross_promotion_pb = require('../../../SP/Rpc/Emerald/cross_promotion_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_cross_promotion_pb);
goog.exportSymbol('proto.sp.rpc.emerald.User', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.AgeGroup', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Importance', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Account', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Apple', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Confirm', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Confirm.Request', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Confirm.Response', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Decision', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Facebook', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.GameCenter', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.GameCenter.Verification', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Google', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Info', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Mapping', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Mapping.Data', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Mapping.Request', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Mapping.Response', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Provider', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Request', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Request.DataCase', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Response', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Type', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Link.Unity', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.GameData', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.GenericData', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.ValueCase', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.GenericData.Social', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.GenericData.User', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.Request', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.Request.MarketingIds', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.Login.Response', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.User.UpdatedBy', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.displayName = 'proto.sp.rpc.emerald.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.displayName = 'proto.sp.rpc.emerald.User.Login';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.GenericData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.GenericData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.GenericData.displayName = 'proto.sp.rpc.emerald.User.Login.GenericData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.GenericData.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.User.Login.GenericData.User.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.GenericData.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.GenericData.User.displayName = 'proto.sp.rpc.emerald.User.Login.GenericData.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.displayName = 'proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.User.Login.GenericData.Social.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.GenericData.Social, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.GenericData.Social.displayName = 'proto.sp.rpc.emerald.User.Login.GenericData.Social';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.displayName = 'proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.displayName = 'proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.oneofGroups_);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.displayName = 'proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.displayName = 'proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.GameData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.GameData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.GameData.displayName = 'proto.sp.rpc.emerald.User.Login.GameData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.Request.displayName = 'proto.sp.rpc.emerald.User.Login.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.Request.MarketingIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.Request.MarketingIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.Request.MarketingIds.displayName = 'proto.sp.rpc.emerald.User.Login.Request.MarketingIds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Login.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Login.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Login.Response.displayName = 'proto.sp.rpc.emerald.User.Login.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.displayName = 'proto.sp.rpc.emerald.User.Link';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Account.displayName = 'proto.sp.rpc.emerald.User.Link.Account';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Facebook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Facebook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Facebook.displayName = 'proto.sp.rpc.emerald.User.Link.Facebook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Google = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Google, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Google.displayName = 'proto.sp.rpc.emerald.User.Link.Google';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.GameCenter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.GameCenter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.GameCenter.displayName = 'proto.sp.rpc.emerald.User.Link.GameCenter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.GameCenter.Verification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.GameCenter.Verification.displayName = 'proto.sp.rpc.emerald.User.Link.GameCenter.Verification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Apple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Apple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Apple.displayName = 'proto.sp.rpc.emerald.User.Link.Apple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Unity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Unity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Unity.displayName = 'proto.sp.rpc.emerald.User.Link.Unity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Info.displayName = 'proto.sp.rpc.emerald.User.Link.Info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sp.rpc.emerald.User.Link.Request.oneofGroups_);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Request.displayName = 'proto.sp.rpc.emerald.User.Link.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Response.displayName = 'proto.sp.rpc.emerald.User.Link.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Confirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Confirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Confirm.displayName = 'proto.sp.rpc.emerald.User.Link.Confirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Confirm.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Confirm.Request.displayName = 'proto.sp.rpc.emerald.User.Link.Confirm.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Confirm.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Confirm.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Confirm.Response.displayName = 'proto.sp.rpc.emerald.User.Link.Confirm.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Mapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Mapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Mapping.displayName = 'proto.sp.rpc.emerald.User.Link.Mapping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.User.Link.Mapping.Data.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Mapping.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Mapping.Data.displayName = 'proto.sp.rpc.emerald.User.Link.Mapping.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.User.Link.Mapping.Request.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Mapping.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Mapping.Request.displayName = 'proto.sp.rpc.emerald.User.Link.Mapping.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.User.Link.Mapping.Response.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.User.Link.Mapping.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.User.Link.Mapping.Response.displayName = 'proto.sp.rpc.emerald.User.Link.Mapping.Response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User}
 */
proto.sp.rpc.emerald.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User;
  return proto.sp.rpc.emerald.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User}
 */
proto.sp.rpc.emerald.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.sp.rpc.emerald.User.AgeGroup = {
  UNKNOWN: 0,
  UNDER_AGE: 1,
  ADULT: 2
};

/**
 * @enum {number}
 */
proto.sp.rpc.emerald.User.Importance = {
  PLANKTON: 0,
  FISH: 1,
  DOLPHIN: 2,
  SEAL: 3,
  WHALE: 4,
  KILLER_WHALE: 5
};

/**
 * @enum {number}
 */
proto.sp.rpc.emerald.User.UpdatedBy = {
  PLAYER: 0,
  BACKEND: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login}
 */
proto.sp.rpc.emerald.User.Login.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login;
  return proto.sp.rpc.emerald.User.Login.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login}
 */
proto.sp.rpc.emerald.User.Login.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.GenericData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverTs: (f = msg.getServerTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.sp.rpc.emerald.User.Login.GenericData.User.toObject(includeInstance, f),
    termsOfService: (f = msg.getTermsOfService()) && SP_Rpc_Emerald_terms_of_service_pb.TermsOfService.toObject(includeInstance, f),
    crossPromotion: (f = msg.getCrossPromotion()) && SP_Rpc_Emerald_cross_promotion_pb.CrossPromotion.toObject(includeInstance, f),
    suggestedUpgrade: (f = msg.getSuggestedUpgrade()) && proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.toObject(includeInstance, f),
    social: (f = msg.getSocial()) && proto.sp.rpc.emerald.User.Login.GenericData.Social.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.toObject(includeInstance, f),
    channelSettings: (f = msg.getChannelSettings()) && proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.toObject(includeInstance, f),
    marketingSettings: (f = msg.getMarketingSettings()) && proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.toObject(includeInstance, f),
    appDataUpdatedBy: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData}
 */
proto.sp.rpc.emerald.User.Login.GenericData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.GenericData;
  return proto.sp.rpc.emerald.User.Login.GenericData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData}
 */
proto.sp.rpc.emerald.User.Login.GenericData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setServerTs(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.User.Login.GenericData.User;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Login.GenericData.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new SP_Rpc_Emerald_terms_of_service_pb.TermsOfService;
      reader.readMessage(value,SP_Rpc_Emerald_terms_of_service_pb.TermsOfService.deserializeBinaryFromReader);
      msg.setTermsOfService(value);
      break;
    case 4:
      var value = new SP_Rpc_Emerald_cross_promotion_pb.CrossPromotion;
      reader.readMessage(value,SP_Rpc_Emerald_cross_promotion_pb.CrossPromotion.deserializeBinaryFromReader);
      msg.setCrossPromotion(value);
      break;
    case 5:
      var value = new proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.deserializeBinaryFromReader);
      msg.setSuggestedUpgrade(value);
      break;
    case 6:
      var value = new proto.sp.rpc.emerald.User.Login.GenericData.Social;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Login.GenericData.Social.deserializeBinaryFromReader);
      msg.setSocial(value);
      break;
    case 7:
      var value = new proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 8:
      var value = new proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.deserializeBinaryFromReader);
      msg.setChannelSettings(value);
      break;
    case 9:
      var value = new proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.deserializeBinaryFromReader);
      msg.setMarketingSettings(value);
      break;
    case 10:
      var value = /** @type {!proto.sp.rpc.emerald.User.UpdatedBy} */ (reader.readEnum());
      msg.setAppDataUpdatedBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.GenericData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerTs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sp.rpc.emerald.User.Login.GenericData.User.serializeBinaryToWriter
    );
  }
  f = message.getTermsOfService();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      SP_Rpc_Emerald_terms_of_service_pb.TermsOfService.serializeBinaryToWriter
    );
  }
  f = message.getCrossPromotion();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      SP_Rpc_Emerald_cross_promotion_pb.CrossPromotion.serializeBinaryToWriter
    );
  }
  f = message.getSuggestedUpgrade();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.serializeBinaryToWriter
    );
  }
  f = message.getSocial();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sp.rpc.emerald.User.Login.GenericData.Social.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.serializeBinaryToWriter
    );
  }
  f = message.getChannelSettings();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.serializeBinaryToWriter
    );
  }
  f = message.getMarketingSettings();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.serializeBinaryToWriter
    );
  }
  f = message.getAppDataUpdatedBy();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.GenericData.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    registrationTs: (f = msg.getRegistrationTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    expire: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sessionId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isNgu: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    userImportance: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isCheater: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    linkedAccountsList: jspb.Message.toObjectList(msg.getLinkedAccountsList(),
    proto.sp.rpc.emerald.User.Link.Account.toObject, includeInstance),
    adsCategory: jspb.Message.getFieldWithDefault(msg, 9, ""),
    countryCode: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.GenericData.User;
  return proto.sp.rpc.emerald.User.Login.GenericData.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setRegistrationTs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpire(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNgu(value);
      break;
    case 6:
      var value = /** @type {!proto.sp.rpc.emerald.User.Importance} */ (reader.readEnum());
      msg.setUserImportance(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCheater(value);
      break;
    case 8:
      var value = new proto.sp.rpc.emerald.User.Link.Account;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Account.deserializeBinaryFromReader);
      msg.addLinkedAccounts(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdsCategory(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.GenericData.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegistrationTs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getExpire();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getIsNgu();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUserImportance();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getIsCheater();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLinkedAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.sp.rpc.emerald.User.Link.Account.serializeBinaryToWriter
    );
  }
  f = message.getAdsCategory();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp registration_ts = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.getRegistrationTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.setRegistrationTs = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.clearRegistrationTs = function() {
  return this.setRegistrationTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.hasRegistrationTs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 expire = 2;
 * @return {number}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.getExpire = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.setExpire = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 user_id = 3;
 * @return {number}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 session_id = 4;
 * @return {number}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_ngu = 5;
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.getIsNgu = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.setIsNgu = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional Importance user_importance = 6;
 * @return {!proto.sp.rpc.emerald.User.Importance}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.getUserImportance = function() {
  return /** @type {!proto.sp.rpc.emerald.User.Importance} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.sp.rpc.emerald.User.Importance} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.setUserImportance = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool is_cheater = 7;
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.getIsCheater = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.setIsCheater = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated Link.Account linked_accounts = 8;
 * @return {!Array<!proto.sp.rpc.emerald.User.Link.Account>}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.getLinkedAccountsList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.User.Link.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.User.Link.Account, 8));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.User.Link.Account>} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.setLinkedAccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.sp.rpc.emerald.User.Link.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.User.Link.Account}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.addLinkedAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.sp.rpc.emerald.User.Link.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.clearLinkedAccountsList = function() {
  return this.setLinkedAccountsList([]);
};


/**
 * optional string ads_category = 9;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.getAdsCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.setAdsCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string country_code = 10;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.User} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.User.prototype.setCountryCode = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    storeUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade}
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade;
  return proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade}
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoreUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoreUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string store_url = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.prototype.getStoreUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.prototype.setStoreUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.GenericData.Social.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.Social} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.toObject = function(includeInstance, msg) {
  var f, obj = {
    websocketEndpointsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.Social}
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.GenericData.Social;
  return proto.sp.rpc.emerald.User.Login.GenericData.Social.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.Social} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.Social}
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addWebsocketEndpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.GenericData.Social.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.Social} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWebsocketEndpointsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string websocket_endpoints = 1;
 * @return {!Array<string>}
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.prototype.getWebsocketEndpointsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.Social} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.prototype.setWebsocketEndpointsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.Social} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.prototype.addWebsocketEndpoints = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.Social} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.Social.prototype.clearWebsocketEndpointsList = function() {
  return this.setWebsocketEndpointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    button: jspb.Message.getFieldWithDefault(msg, 3, ""),
    url: jspb.Message.getFieldWithDefault(msg, 4, ""),
    blocking: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage}
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage;
  return proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage}
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setButton(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlocking(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getButton();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBlocking();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string button = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.getButton = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.setButton = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool blocking = 5;
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.getBlocking = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage.prototype.setBlocking = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionsList: jspb.Message.toObjectList(msg.getOptionsList(),
    proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings;
  return proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.deserializeBinaryFromReader);
      msg.addOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 2,
  INT_VALUE: 3
};

/**
 * @return {proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.ValueCase}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.getValueCase = function() {
  return /** @type {proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.ValueCase} */(jspb.Message.computeOneofCase(this, proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    intValue: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption;
  return proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string string_value = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 int_value = 3;
 * @return {number}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ChannelOption options = 1;
 * @return {!Array<!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption>}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.prototype.getOptionsList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption>} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.prototype.setOptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption}
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.prototype.addOptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.ChannelOption, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings.prototype.clearOptionsList = function() {
  return this.setOptionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributionTimeout: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings}
 */
proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings;
  return proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings}
 */
proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttributionTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributionTimeout();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 attribution_timeout = 1;
 * @return {number}
 */
proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.prototype.getAttributionTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings.prototype.setAttributionTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp server_ts = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.getServerTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.prototype.setServerTs = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.clearServerTs = function() {
  return this.setServerTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.hasServerTs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.sp.rpc.emerald.User.Login.GenericData.User}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.getUser = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Login.GenericData.User} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Login.GenericData.User, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Login.GenericData.User|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TermsOfService terms_of_service = 3;
 * @return {?proto.sp.rpc.emerald.TermsOfService}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.getTermsOfService = function() {
  return /** @type{?proto.sp.rpc.emerald.TermsOfService} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_terms_of_service_pb.TermsOfService, 3));
};


/**
 * @param {?proto.sp.rpc.emerald.TermsOfService|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.prototype.setTermsOfService = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.clearTermsOfService = function() {
  return this.setTermsOfService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.hasTermsOfService = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CrossPromotion cross_promotion = 4;
 * @return {?proto.sp.rpc.emerald.CrossPromotion}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.getCrossPromotion = function() {
  return /** @type{?proto.sp.rpc.emerald.CrossPromotion} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_cross_promotion_pb.CrossPromotion, 4));
};


/**
 * @param {?proto.sp.rpc.emerald.CrossPromotion|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.prototype.setCrossPromotion = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.clearCrossPromotion = function() {
  return this.setCrossPromotion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.hasCrossPromotion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SuggestedUpgrade suggested_upgrade = 5;
 * @return {?proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.getSuggestedUpgrade = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade, 5));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Login.GenericData.SuggestedUpgrade|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.prototype.setSuggestedUpgrade = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.clearSuggestedUpgrade = function() {
  return this.setSuggestedUpgrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.hasSuggestedUpgrade = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Social social = 6;
 * @return {?proto.sp.rpc.emerald.User.Login.GenericData.Social}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.getSocial = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Login.GenericData.Social} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Login.GenericData.Social, 6));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Login.GenericData.Social|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.prototype.setSocial = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.clearSocial = function() {
  return this.setSocial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.hasSocial = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional GenericMessage message = 7;
 * @return {?proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.getMessage = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage, 7));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Login.GenericData.GenericMessage|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ChannelSettings channel_settings = 8;
 * @return {?proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.getChannelSettings = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings, 8));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Login.GenericData.ChannelSettings|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.prototype.setChannelSettings = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.clearChannelSettings = function() {
  return this.setChannelSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.hasChannelSettings = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional MarketingSettings marketing_settings = 9;
 * @return {?proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.getMarketingSettings = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings, 9));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Login.GenericData.MarketingSettings|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
*/
proto.sp.rpc.emerald.User.Login.GenericData.prototype.setMarketingSettings = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.clearMarketingSettings = function() {
  return this.setMarketingSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.hasMarketingSettings = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional UpdatedBy app_data_updated_by = 10;
 * @return {!proto.sp.rpc.emerald.User.UpdatedBy}
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.getAppDataUpdatedBy = function() {
  return /** @type {!proto.sp.rpc.emerald.User.UpdatedBy} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.sp.rpc.emerald.User.UpdatedBy} value
 * @return {!proto.sp.rpc.emerald.User.Login.GenericData} returns this
 */
proto.sp.rpc.emerald.User.Login.GenericData.prototype.setAppDataUpdatedBy = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.GameData.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.GameData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.GameData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GameData.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.GameData}
 */
proto.sp.rpc.emerald.User.Login.GameData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.GameData;
  return proto.sp.rpc.emerald.User.Login.GameData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.GameData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.GameData}
 */
proto.sp.rpc.emerald.User.Login.GameData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.GameData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.GameData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.GameData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.GameData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any data = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.emerald.User.Login.GameData.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.GameData} returns this
*/
proto.sp.rpc.emerald.User.Login.GameData.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.GameData} returns this
 */
proto.sp.rpc.emerald.User.Login.GameData.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.GameData.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    ts: (f = msg.getTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    securityToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    linkType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    clientAppId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    clientVersion: jspb.Message.getFieldWithDefault(msg, 6, ""),
    clientBuild: jspb.Message.getFieldWithDefault(msg, 7, ""),
    clientLanguage: jspb.Message.getFieldWithDefault(msg, 8, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 9, ""),
    device: jspb.Message.getFieldWithDefault(msg, 10, ""),
    deviceUid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    deviceOs: jspb.Message.getFieldWithDefault(msg, 12, ""),
    deviceLanguage: jspb.Message.getFieldWithDefault(msg, 13, ""),
    deviceAdId: jspb.Message.getFieldWithDefault(msg, 14, ""),
    deviceAdIdEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    deviceRooted: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    deviceVendorId: jspb.Message.getFieldWithDefault(msg, 17, ""),
    networkConnection: jspb.Message.getFieldWithDefault(msg, 18, ""),
    marketingIds: (f = msg.getMarketingIds()) && proto.sp.rpc.emerald.User.Login.Request.MarketingIds.toObject(includeInstance, f),
    adTrackingStatus: jspb.Message.getFieldWithDefault(msg, 20, ""),
    platformStore: jspb.Message.getFieldWithDefault(msg, 21, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.Request}
 */
proto.sp.rpc.emerald.User.Login.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.Request;
  return proto.sp.rpc.emerald.User.Login.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.Request}
 */
proto.sp.rpc.emerald.User.Login.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecurityToken(value);
      break;
    case 4:
      var value = /** @type {!proto.sp.rpc.emerald.User.Link.Type} */ (reader.readEnum());
      msg.setLinkType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientAppId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientVersion(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientBuild(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientLanguage(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceUid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceOs(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceLanguage(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAdId(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeviceAdIdEnabled(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeviceRooted(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceVendorId(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkConnection(value);
      break;
    case 19:
      var value = new proto.sp.rpc.emerald.User.Login.Request.MarketingIds;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Login.Request.MarketingIds.deserializeBinaryFromReader);
      msg.setMarketingIds(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdTrackingStatus(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatformStore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSecurityToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLinkType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getClientAppId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getClientVersion();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getClientBuild();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getClientLanguage();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPlatform();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDeviceUid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDeviceOs();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDeviceLanguage();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDeviceAdId();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getDeviceAdIdEnabled();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getDeviceRooted();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getDeviceVendorId();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getNetworkConnection();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getMarketingIds();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.sp.rpc.emerald.User.Login.Request.MarketingIds.serializeBinaryToWriter
    );
  }
  f = message.getAdTrackingStatus();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getPlatformStore();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.Request.MarketingIds.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.Request.MarketingIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.Request.MarketingIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.Request.MarketingIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    appsflyer: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.Request.MarketingIds}
 */
proto.sp.rpc.emerald.User.Login.Request.MarketingIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.Request.MarketingIds;
  return proto.sp.rpc.emerald.User.Login.Request.MarketingIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.Request.MarketingIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.Request.MarketingIds}
 */
proto.sp.rpc.emerald.User.Login.Request.MarketingIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppsflyer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.Request.MarketingIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.Request.MarketingIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.Request.MarketingIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.Request.MarketingIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppsflyer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string appsflyer = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.MarketingIds.prototype.getAppsflyer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request.MarketingIds} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.MarketingIds.prototype.setAppsflyer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp ts = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
*/
proto.sp.rpc.emerald.User.Login.Request.prototype.setTs = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.clearTs = function() {
  return this.setTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.hasTs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 user_id = 2;
 * @return {number}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string security_token = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getSecurityToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setSecurityToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Link.Type link_type = 4;
 * @return {!proto.sp.rpc.emerald.User.Link.Type}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getLinkType = function() {
  return /** @type {!proto.sp.rpc.emerald.User.Link.Type} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.sp.rpc.emerald.User.Link.Type} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setLinkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string client_app_id = 5;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getClientAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setClientAppId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string client_version = 6;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getClientVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setClientVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string client_build = 7;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getClientBuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setClientBuild = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string client_language = 8;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getClientLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setClientLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string platform = 9;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setPlatform = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string device = 10;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string device_uid = 11;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getDeviceUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setDeviceUid = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string device_os = 12;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getDeviceOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setDeviceOs = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string device_language = 13;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getDeviceLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setDeviceLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string device_ad_id = 14;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getDeviceAdId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setDeviceAdId = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bool device_ad_id_enabled = 15;
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getDeviceAdIdEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setDeviceAdIdEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional bool device_rooted = 16;
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getDeviceRooted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setDeviceRooted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional string device_vendor_id = 17;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getDeviceVendorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setDeviceVendorId = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string network_connection = 18;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getNetworkConnection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setNetworkConnection = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional MarketingIds marketing_ids = 19;
 * @return {?proto.sp.rpc.emerald.User.Login.Request.MarketingIds}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getMarketingIds = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Login.Request.MarketingIds} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Login.Request.MarketingIds, 19));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Login.Request.MarketingIds|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
*/
proto.sp.rpc.emerald.User.Login.Request.prototype.setMarketingIds = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.clearMarketingIds = function() {
  return this.setMarketingIds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.hasMarketingIds = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string ad_tracking_status = 20;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getAdTrackingStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setAdTrackingStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string platform_store = 21;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.getPlatformStore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Login.Request} returns this
 */
proto.sp.rpc.emerald.User.Login.Request.prototype.setPlatformStore = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Login.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Login.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Login.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    genericData: (f = msg.getGenericData()) && proto.sp.rpc.emerald.User.Login.GenericData.toObject(includeInstance, f),
    gameData: (f = msg.getGameData()) && proto.sp.rpc.emerald.User.Login.GameData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Login.Response}
 */
proto.sp.rpc.emerald.User.Login.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Login.Response;
  return proto.sp.rpc.emerald.User.Login.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Login.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Login.Response}
 */
proto.sp.rpc.emerald.User.Login.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.User.Login.GenericData;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Login.GenericData.deserializeBinaryFromReader);
      msg.setGenericData(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.User.Login.GameData;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Login.GameData.deserializeBinaryFromReader);
      msg.setGameData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Login.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Login.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Login.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Login.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenericData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sp.rpc.emerald.User.Login.GenericData.serializeBinaryToWriter
    );
  }
  f = message.getGameData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sp.rpc.emerald.User.Login.GameData.serializeBinaryToWriter
    );
  }
};


/**
 * optional GenericData generic_data = 1;
 * @return {?proto.sp.rpc.emerald.User.Login.GenericData}
 */
proto.sp.rpc.emerald.User.Login.Response.prototype.getGenericData = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Login.GenericData} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Login.GenericData, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Login.GenericData|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.Response} returns this
*/
proto.sp.rpc.emerald.User.Login.Response.prototype.setGenericData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.Response} returns this
 */
proto.sp.rpc.emerald.User.Login.Response.prototype.clearGenericData = function() {
  return this.setGenericData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.Response.prototype.hasGenericData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GameData game_data = 2;
 * @return {?proto.sp.rpc.emerald.User.Login.GameData}
 */
proto.sp.rpc.emerald.User.Login.Response.prototype.getGameData = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Login.GameData} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Login.GameData, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Login.GameData|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Login.Response} returns this
*/
proto.sp.rpc.emerald.User.Login.Response.prototype.setGameData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Login.Response} returns this
 */
proto.sp.rpc.emerald.User.Login.Response.prototype.clearGameData = function() {
  return this.setGameData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Login.Response.prototype.hasGameData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link}
 */
proto.sp.rpc.emerald.User.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link;
  return proto.sp.rpc.emerald.User.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link}
 */
proto.sp.rpc.emerald.User.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.sp.rpc.emerald.User.Link.Provider = {
  SOCIAL_POINT: 0,
  FACEBOOK: 1,
  GOOGLE: 2,
  GAME_CENTER: 3,
  APPLE: 4,
  UNITY: 5
};

/**
 * @enum {number}
 */
proto.sp.rpc.emerald.User.Link.Type = {
  NONE: 0,
  LOOSE_TO_LINKED: 1,
  LINKED_TO_LOOSE: 2,
  LINKED_TO_SAME: 3,
  LINKED_TO_LINKED: 4,
  LOOSE_TO_LOOSE: 5
};

/**
 * @enum {number}
 */
proto.sp.rpc.emerald.User.Link.Decision = {
  CANCEL: 0,
  KEEP: 1,
  CHANGE: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, 0),
    externalId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Account}
 */
proto.sp.rpc.emerald.User.Link.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Account;
  return proto.sp.rpc.emerald.User.Link.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Account}
 */
proto.sp.rpc.emerald.User.Link.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sp.rpc.emerald.User.Link.Provider} */ (reader.readEnum());
      msg.setProvider(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getExternalId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Provider provider = 1;
 * @return {!proto.sp.rpc.emerald.User.Link.Provider}
 */
proto.sp.rpc.emerald.User.Link.Account.prototype.getProvider = function() {
  return /** @type {!proto.sp.rpc.emerald.User.Link.Provider} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.sp.rpc.emerald.User.Link.Provider} value
 * @return {!proto.sp.rpc.emerald.User.Link.Account} returns this
 */
proto.sp.rpc.emerald.User.Link.Account.prototype.setProvider = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string external_id = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Account.prototype.getExternalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Account} returns this
 */
proto.sp.rpc.emerald.User.Link.Account.prototype.setExternalId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Facebook.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Facebook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Facebook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Facebook.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accessToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Facebook}
 */
proto.sp.rpc.emerald.User.Link.Facebook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Facebook;
  return proto.sp.rpc.emerald.User.Link.Facebook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Facebook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Facebook}
 */
proto.sp.rpc.emerald.User.Link.Facebook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Facebook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Facebook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Facebook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Facebook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string external_id = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Facebook.prototype.getExternalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Facebook} returns this
 */
proto.sp.rpc.emerald.User.Link.Facebook.prototype.setExternalId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string access_token = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Facebook.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Facebook} returns this
 */
proto.sp.rpc.emerald.User.Link.Facebook.prototype.setAccessToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Google.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Google.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Google} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Google.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accessToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Google}
 */
proto.sp.rpc.emerald.User.Link.Google.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Google;
  return proto.sp.rpc.emerald.User.Link.Google.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Google} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Google}
 */
proto.sp.rpc.emerald.User.Link.Google.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Google.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Google.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Google} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Google.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string external_id = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Google.prototype.getExternalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Google} returns this
 */
proto.sp.rpc.emerald.User.Link.Google.prototype.setExternalId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string access_token = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Google.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Google} returns this
 */
proto.sp.rpc.emerald.User.Link.Google.prototype.setAccessToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_name = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Google.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Google} returns this
 */
proto.sp.rpc.emerald.User.Link.Google.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.GameCenter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.GameCenter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.GameCenter.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ageGroup: jspb.Message.getFieldWithDefault(msg, 3, 0),
    verification: (f = msg.getVerification()) && proto.sp.rpc.emerald.User.Link.GameCenter.Verification.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.GameCenter;
  return proto.sp.rpc.emerald.User.Link.GameCenter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.GameCenter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 3:
      var value = /** @type {!proto.sp.rpc.emerald.User.AgeGroup} */ (reader.readEnum());
      msg.setAgeGroup(value);
      break;
    case 4:
      var value = new proto.sp.rpc.emerald.User.Link.GameCenter.Verification;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.GameCenter.Verification.deserializeBinaryFromReader);
      msg.setVerification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.GameCenter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.GameCenter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.GameCenter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAgeGroup();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getVerification();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sp.rpc.emerald.User.Link.GameCenter.Verification.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.GameCenter.Verification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.GameCenter.Verification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    salt: jspb.Message.getFieldWithDefault(msg, 3, ""),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter.Verification}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.GameCenter.Verification;
  return proto.sp.rpc.emerald.User.Link.GameCenter.Verification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.GameCenter.Verification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter.Verification}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSalt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.GameCenter.Verification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.GameCenter.Verification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSalt();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter.Verification} returns this
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signature = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter.Verification} returns this
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string salt = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.prototype.getSalt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter.Verification} returns this
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.prototype.setSalt = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 time = 4;
 * @return {number}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter.Verification} returns this
 */
proto.sp.rpc.emerald.User.Link.GameCenter.Verification.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string external_id = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.getExternalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter} returns this
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.setExternalId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_name = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter} returns this
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AgeGroup age_group = 3;
 * @return {!proto.sp.rpc.emerald.User.AgeGroup}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.getAgeGroup = function() {
  return /** @type {!proto.sp.rpc.emerald.User.AgeGroup} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.sp.rpc.emerald.User.AgeGroup} value
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter} returns this
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.setAgeGroup = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Verification verification = 4;
 * @return {?proto.sp.rpc.emerald.User.Link.GameCenter.Verification}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.getVerification = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Link.GameCenter.Verification} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Link.GameCenter.Verification, 4));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Link.GameCenter.Verification|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter} returns this
*/
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.setVerification = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.GameCenter} returns this
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.clearVerification = function() {
  return this.setVerification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.GameCenter.prototype.hasVerification = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Apple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Apple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Apple.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    identityToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, ""),
    realUserStatus: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Apple}
 */
proto.sp.rpc.emerald.User.Link.Apple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Apple;
  return proto.sp.rpc.emerald.User.Link.Apple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Apple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Apple}
 */
proto.sp.rpc.emerald.User.Link.Apple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentityToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealUserStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Apple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Apple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Apple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentityToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRealUserStatus();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string external_id = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.getExternalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Apple} returns this
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.setExternalId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string identity_token = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.getIdentityToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Apple} returns this
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.setIdentityToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string auth_code = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.getAuthCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Apple} returns this
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.setAuthCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string state = 4;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Apple} returns this
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 real_user_status = 5;
 * @return {number}
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.getRealUserStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.User.Link.Apple} returns this
 */
proto.sp.rpc.emerald.User.Link.Apple.prototype.setRealUserStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Unity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Unity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Unity.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accessToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    response: (f = msg.getResponse()) && proto.sp.rpc.emerald.User.Link.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Unity}
 */
proto.sp.rpc.emerald.User.Link.Unity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Unity;
  return proto.sp.rpc.emerald.User.Link.Unity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Unity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Unity}
 */
proto.sp.rpc.emerald.User.Link.Unity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 4:
      var value = new proto.sp.rpc.emerald.User.Link.Response;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Unity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Unity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Unity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sp.rpc.emerald.User.Link.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional string external_id = 1;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.getExternalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Unity} returns this
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.setExternalId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string access_token = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Unity} returns this
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.setAccessToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_name = 3;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Unity} returns this
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Response response = 4;
 * @return {?proto.sp.rpc.emerald.User.Link.Response}
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.getResponse = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Link.Response} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Link.Response, 4));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Link.Response|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Unity} returns this
*/
proto.sp.rpc.emerald.User.Link.Unity.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Unity} returns this
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Unity.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Info.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Info} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Info.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Info}
 */
proto.sp.rpc.emerald.User.Link.Info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Info;
  return proto.sp.rpc.emerald.User.Link.Info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Info}
 */
proto.sp.rpc.emerald.User.Link.Info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any data = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.sp.rpc.emerald.User.Link.Info.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Info} returns this
*/
proto.sp.rpc.emerald.User.Link.Info.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Info} returns this
 */
proto.sp.rpc.emerald.User.Link.Info.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Info.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sp.rpc.emerald.User.Link.Request.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.sp.rpc.emerald.User.Link.Request.DataCase = {
  DATA_NOT_SET: 0,
  FACEBOOK: 2,
  GOOGLE: 3,
  GAME_CENTER: 4,
  APPLE: 5,
  UNITY: 6
};

/**
 * @return {proto.sp.rpc.emerald.User.Link.Request.DataCase}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.getDataCase = function() {
  return /** @type {proto.sp.rpc.emerald.User.Link.Request.DataCase} */(jspb.Message.computeOneofCase(this, proto.sp.rpc.emerald.User.Link.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && SP_Rpc_Emerald_request_context_pb.RequestContext.toObject(includeInstance, f),
    facebook: (f = msg.getFacebook()) && proto.sp.rpc.emerald.User.Link.Facebook.toObject(includeInstance, f),
    google: (f = msg.getGoogle()) && proto.sp.rpc.emerald.User.Link.Google.toObject(includeInstance, f),
    gameCenter: (f = msg.getGameCenter()) && proto.sp.rpc.emerald.User.Link.GameCenter.toObject(includeInstance, f),
    apple: (f = msg.getApple()) && proto.sp.rpc.emerald.User.Link.Apple.toObject(includeInstance, f),
    unity: (f = msg.getUnity()) && proto.sp.rpc.emerald.User.Link.Unity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Request}
 */
proto.sp.rpc.emerald.User.Link.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Request;
  return proto.sp.rpc.emerald.User.Link.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Request}
 */
proto.sp.rpc.emerald.User.Link.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_request_context_pb.RequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_request_context_pb.RequestContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.User.Link.Facebook;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Facebook.deserializeBinaryFromReader);
      msg.setFacebook(value);
      break;
    case 3:
      var value = new proto.sp.rpc.emerald.User.Link.Google;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Google.deserializeBinaryFromReader);
      msg.setGoogle(value);
      break;
    case 4:
      var value = new proto.sp.rpc.emerald.User.Link.GameCenter;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.GameCenter.deserializeBinaryFromReader);
      msg.setGameCenter(value);
      break;
    case 5:
      var value = new proto.sp.rpc.emerald.User.Link.Apple;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Apple.deserializeBinaryFromReader);
      msg.setApple(value);
      break;
    case 6:
      var value = new proto.sp.rpc.emerald.User.Link.Unity;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Unity.deserializeBinaryFromReader);
      msg.setUnity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_request_context_pb.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getFacebook();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sp.rpc.emerald.User.Link.Facebook.serializeBinaryToWriter
    );
  }
  f = message.getGoogle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sp.rpc.emerald.User.Link.Google.serializeBinaryToWriter
    );
  }
  f = message.getGameCenter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sp.rpc.emerald.User.Link.GameCenter.serializeBinaryToWriter
    );
  }
  f = message.getApple();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sp.rpc.emerald.User.Link.Apple.serializeBinaryToWriter
    );
  }
  f = message.getUnity();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sp.rpc.emerald.User.Link.Unity.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestContext context = 1;
 * @return {?proto.sp.rpc.emerald.RequestContext}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.getContext = function() {
  return /** @type{?proto.sp.rpc.emerald.RequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_request_context_pb.RequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.RequestContext|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
*/
proto.sp.rpc.emerald.User.Link.Request.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Facebook facebook = 2;
 * @return {?proto.sp.rpc.emerald.User.Link.Facebook}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.getFacebook = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Link.Facebook} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Link.Facebook, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Link.Facebook|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
*/
proto.sp.rpc.emerald.User.Link.Request.prototype.setFacebook = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sp.rpc.emerald.User.Link.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.clearFacebook = function() {
  return this.setFacebook(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.hasFacebook = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Google google = 3;
 * @return {?proto.sp.rpc.emerald.User.Link.Google}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.getGoogle = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Link.Google} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Link.Google, 3));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Link.Google|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
*/
proto.sp.rpc.emerald.User.Link.Request.prototype.setGoogle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sp.rpc.emerald.User.Link.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.clearGoogle = function() {
  return this.setGoogle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.hasGoogle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GameCenter game_center = 4;
 * @return {?proto.sp.rpc.emerald.User.Link.GameCenter}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.getGameCenter = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Link.GameCenter} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Link.GameCenter, 4));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Link.GameCenter|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
*/
proto.sp.rpc.emerald.User.Link.Request.prototype.setGameCenter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sp.rpc.emerald.User.Link.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.clearGameCenter = function() {
  return this.setGameCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.hasGameCenter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Apple apple = 5;
 * @return {?proto.sp.rpc.emerald.User.Link.Apple}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.getApple = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Link.Apple} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Link.Apple, 5));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Link.Apple|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
*/
proto.sp.rpc.emerald.User.Link.Request.prototype.setApple = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.sp.rpc.emerald.User.Link.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.clearApple = function() {
  return this.setApple(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.hasApple = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Unity unity = 6;
 * @return {?proto.sp.rpc.emerald.User.Link.Unity}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.getUnity = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Link.Unity} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Link.Unity, 6));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Link.Unity|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
*/
proto.sp.rpc.emerald.User.Link.Request.prototype.setUnity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.sp.rpc.emerald.User.Link.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.clearUnity = function() {
  return this.setUnity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Request.prototype.hasUnity = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confirmLinkToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    info: (f = msg.getInfo()) && proto.sp.rpc.emerald.User.Link.Info.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Response}
 */
proto.sp.rpc.emerald.User.Link.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Response;
  return proto.sp.rpc.emerald.User.Link.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Response}
 */
proto.sp.rpc.emerald.User.Link.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sp.rpc.emerald.User.Link.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmLinkToken(value);
      break;
    case 3:
      var value = new proto.sp.rpc.emerald.User.Link.Info;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Info.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfirmLinkToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sp.rpc.emerald.User.Link.Info.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type type = 1;
 * @return {!proto.sp.rpc.emerald.User.Link.Type}
 */
proto.sp.rpc.emerald.User.Link.Response.prototype.getType = function() {
  return /** @type {!proto.sp.rpc.emerald.User.Link.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.sp.rpc.emerald.User.Link.Type} value
 * @return {!proto.sp.rpc.emerald.User.Link.Response} returns this
 */
proto.sp.rpc.emerald.User.Link.Response.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string confirm_link_token = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Response.prototype.getConfirmLinkToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Response} returns this
 */
proto.sp.rpc.emerald.User.Link.Response.prototype.setConfirmLinkToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Info info = 3;
 * @return {?proto.sp.rpc.emerald.User.Link.Info}
 */
proto.sp.rpc.emerald.User.Link.Response.prototype.getInfo = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Link.Info} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Link.Info, 3));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Link.Info|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Response} returns this
*/
proto.sp.rpc.emerald.User.Link.Response.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Response} returns this
 */
proto.sp.rpc.emerald.User.Link.Response.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Response.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Confirm.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Confirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Confirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Confirm.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm}
 */
proto.sp.rpc.emerald.User.Link.Confirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Confirm;
  return proto.sp.rpc.emerald.User.Link.Confirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Confirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm}
 */
proto.sp.rpc.emerald.User.Link.Confirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Confirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Confirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Confirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Confirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Confirm.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Confirm.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && SP_Rpc_Emerald_request_context_pb.RequestContext.toObject(includeInstance, f),
    confirmLinkToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    decision: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm.Request}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Confirm.Request;
  return proto.sp.rpc.emerald.User.Link.Confirm.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Confirm.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm.Request}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_request_context_pb.RequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_request_context_pb.RequestContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmLinkToken(value);
      break;
    case 3:
      var value = /** @type {!proto.sp.rpc.emerald.User.Link.Decision} */ (reader.readEnum());
      msg.setDecision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Confirm.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Confirm.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_request_context_pb.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getConfirmLinkToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDecision();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional RequestContext context = 1;
 * @return {?proto.sp.rpc.emerald.RequestContext}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.prototype.getContext = function() {
  return /** @type{?proto.sp.rpc.emerald.RequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_request_context_pb.RequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.RequestContext|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm.Request} returns this
*/
proto.sp.rpc.emerald.User.Link.Confirm.Request.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string confirm_link_token = 2;
 * @return {string}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.prototype.getConfirmLinkToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.prototype.setConfirmLinkToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Decision decision = 3;
 * @return {!proto.sp.rpc.emerald.User.Link.Decision}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.prototype.getDecision = function() {
  return /** @type {!proto.sp.rpc.emerald.User.Link.Decision} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.sp.rpc.emerald.User.Link.Decision} value
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Confirm.Request.prototype.setDecision = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Confirm.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Confirm.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Confirm.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm.Response}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Confirm.Response;
  return proto.sp.rpc.emerald.User.Link.Confirm.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Confirm.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm.Response}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Confirm.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Confirm.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Confirm.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 user_id = 1;
 * @return {number}
 */
proto.sp.rpc.emerald.User.Link.Confirm.Response.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.User.Link.Confirm.Response} returns this
 */
proto.sp.rpc.emerald.User.Link.Confirm.Response.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Mapping.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Mapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Mapping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping}
 */
proto.sp.rpc.emerald.User.Link.Mapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Mapping;
  return proto.sp.rpc.emerald.User.Link.Mapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping}
 */
proto.sp.rpc.emerald.User.Link.Mapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Mapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Mapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Mapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Mapping.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    proto.sp.rpc.emerald.User.Link.Account.toObject, includeInstance),
    info: (f = msg.getInfo()) && proto.sp.rpc.emerald.User.Link.Info.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Data}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Mapping.Data;
  return proto.sp.rpc.emerald.User.Link.Mapping.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Data}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.User.Link.Account;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Account.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    case 3:
      var value = new proto.sp.rpc.emerald.User.Link.Info;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Info.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Mapping.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sp.rpc.emerald.User.Link.Account.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sp.rpc.emerald.User.Link.Info.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 user_id = 1;
 * @return {number}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Data} returns this
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Account accounts = 2;
 * @return {!Array<!proto.sp.rpc.emerald.User.Link.Account>}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.User.Link.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.User.Link.Account, 2));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.User.Link.Account>} value
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Data} returns this
*/
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.setAccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sp.rpc.emerald.User.Link.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.User.Link.Account}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sp.rpc.emerald.User.Link.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Data} returns this
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};


/**
 * optional Info info = 3;
 * @return {?proto.sp.rpc.emerald.User.Link.Info}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.getInfo = function() {
  return /** @type{?proto.sp.rpc.emerald.User.Link.Info} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.User.Link.Info, 3));
};


/**
 * @param {?proto.sp.rpc.emerald.User.Link.Info|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Data} returns this
*/
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Data} returns this
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Data.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Mapping.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && SP_Rpc_Emerald_request_context_pb.RequestContext.toObject(includeInstance, f),
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    proto.sp.rpc.emerald.User.Link.Account.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Request}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Mapping.Request;
  return proto.sp.rpc.emerald.User.Link.Mapping.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Request}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_request_context_pb.RequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_request_context_pb.RequestContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.User.Link.Account;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Account.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Mapping.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_request_context_pb.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sp.rpc.emerald.User.Link.Account.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestContext context = 1;
 * @return {?proto.sp.rpc.emerald.RequestContext}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.prototype.getContext = function() {
  return /** @type{?proto.sp.rpc.emerald.RequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_request_context_pb.RequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.RequestContext|undefined} value
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Request} returns this
*/
proto.sp.rpc.emerald.User.Link.Mapping.Request.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Account accounts = 2;
 * @return {!Array<!proto.sp.rpc.emerald.User.Link.Account>}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.User.Link.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.User.Link.Account, 2));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.User.Link.Account>} value
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Request} returns this
*/
proto.sp.rpc.emerald.User.Link.Mapping.Request.prototype.setAccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sp.rpc.emerald.User.Link.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.User.Link.Account}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sp.rpc.emerald.User.Link.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Request} returns this
 */
proto.sp.rpc.emerald.User.Link.Mapping.Request.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.User.Link.Mapping.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.sp.rpc.emerald.User.Link.Mapping.Data.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Response}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.User.Link.Mapping.Response;
  return proto.sp.rpc.emerald.User.Link.Mapping.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Response}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.User.Link.Mapping.Data;
      reader.readMessage(value,proto.sp.rpc.emerald.User.Link.Mapping.Data.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.User.Link.Mapping.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sp.rpc.emerald.User.Link.Mapping.Data.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Data data = 1;
 * @return {!Array<!proto.sp.rpc.emerald.User.Link.Mapping.Data>}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response.prototype.getDataList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.User.Link.Mapping.Data>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.User.Link.Mapping.Data, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.User.Link.Mapping.Data>} value
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Response} returns this
*/
proto.sp.rpc.emerald.User.Link.Mapping.Response.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.emerald.User.Link.Mapping.Data=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Data}
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.emerald.User.Link.Mapping.Data, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.User.Link.Mapping.Response} returns this
 */
proto.sp.rpc.emerald.User.Link.Mapping.Response.prototype.clearDataList = function() {
  return this.setDataList([]);
};


goog.object.extend(exports, proto.sp.rpc.emerald);
