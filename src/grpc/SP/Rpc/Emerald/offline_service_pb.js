// source: SP/Rpc/Emerald/offline_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var SP_Rpc_Emerald_request_context_pb = require('../../../SP/Rpc/Emerald/request_context_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_request_context_pb);
var SP_Rpc_Emerald_track_service_pb = require('../../../SP/Rpc/Emerald/track_service_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_track_service_pb);
var SP_Rpc_Emerald_packet_service_pb = require('../../../SP/Rpc/Emerald/packet_service_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_packet_service_pb);
goog.exportSymbol('proto.sp.rpc.emerald.OfflineEvent', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.OfflineEvent.CommonData', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.OfflineEvent.PacketEvent', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.OfflineEvent.TrackEvent', null, global);
goog.exportSymbol('proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.OfflineEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.OfflineEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.OfflineEvent.displayName = 'proto.sp.rpc.emerald.OfflineEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.OfflineEvent.CommonData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.OfflineEvent.CommonData.displayName = 'proto.sp.rpc.emerald.OfflineEvent.CommonData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.OfflineEvent.TrackEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.OfflineEvent.TrackEvent.displayName = 'proto.sp.rpc.emerald.OfflineEvent.TrackEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.displayName = 'proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.emerald.OfflineEvent.PacketEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.OfflineEvent.PacketEvent.displayName = 'proto.sp.rpc.emerald.OfflineEvent.PacketEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.displayName = 'proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.OfflineEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.OfflineEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.OfflineEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.OfflineEvent}
 */
proto.sp.rpc.emerald.OfflineEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.OfflineEvent;
  return proto.sp.rpc.emerald.OfflineEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.OfflineEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.OfflineEvent}
 */
proto.sp.rpc.emerald.OfflineEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.OfflineEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.OfflineEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.OfflineEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.OfflineEvent.CommonData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.OfflineEvent.CommonData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.toObject = function(includeInstance, msg) {
  var f, obj = {
    ts: (f = msg.getTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.CommonData}
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.OfflineEvent.CommonData;
  return proto.sp.rpc.emerald.OfflineEvent.CommonData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.OfflineEvent.CommonData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.CommonData}
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.OfflineEvent.CommonData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.OfflineEvent.CommonData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp ts = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.prototype.getTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sp.rpc.emerald.OfflineEvent.CommonData} returns this
*/
proto.sp.rpc.emerald.OfflineEvent.CommonData.prototype.setTs = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.CommonData} returns this
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.prototype.clearTs = function() {
  return this.setTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.prototype.hasTs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 session_id = 2;
 * @return {number}
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.emerald.OfflineEvent.CommonData} returns this
 */
proto.sp.rpc.emerald.OfflineEvent.CommonData.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.OfflineEvent.TrackEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    commonData: (f = msg.getCommonData()) && proto.sp.rpc.emerald.OfflineEvent.CommonData.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && SP_Rpc_Emerald_track_service_pb.Track.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.OfflineEvent.TrackEvent;
  return proto.sp.rpc.emerald.OfflineEvent.TrackEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.OfflineEvent.CommonData;
      reader.readMessage(value,proto.sp.rpc.emerald.OfflineEvent.CommonData.deserializeBinaryFromReader);
      msg.setCommonData(value);
      break;
    case 2:
      var value = new SP_Rpc_Emerald_track_service_pb.Track.Event;
      reader.readMessage(value,SP_Rpc_Emerald_track_service_pb.Track.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.OfflineEvent.TrackEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommonData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sp.rpc.emerald.OfflineEvent.CommonData.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      SP_Rpc_Emerald_track_service_pb.Track.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional CommonData common_data = 1;
 * @return {?proto.sp.rpc.emerald.OfflineEvent.CommonData}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.prototype.getCommonData = function() {
  return /** @type{?proto.sp.rpc.emerald.OfflineEvent.CommonData} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.OfflineEvent.CommonData, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.OfflineEvent.CommonData|undefined} value
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent} returns this
*/
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.prototype.setCommonData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent} returns this
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.prototype.clearCommonData = function() {
  return this.setCommonData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.prototype.hasCommonData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Track.Event event = 2;
 * @return {?proto.sp.rpc.emerald.Track.Event}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.prototype.getEvent = function() {
  return /** @type{?proto.sp.rpc.emerald.Track.Event} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_track_service_pb.Track.Event, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.Track.Event|undefined} value
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent} returns this
*/
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent} returns this
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && SP_Rpc_Emerald_request_context_pb.RequestContext.toObject(includeInstance, f),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.sp.rpc.emerald.OfflineEvent.TrackEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest;
  return proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_request_context_pb.RequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_request_context_pb.RequestContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.OfflineEvent.TrackEvent;
      reader.readMessage(value,proto.sp.rpc.emerald.OfflineEvent.TrackEvent.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_request_context_pb.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sp.rpc.emerald.OfflineEvent.TrackEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestContext context = 1;
 * @return {?proto.sp.rpc.emerald.RequestContext}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.prototype.getContext = function() {
  return /** @type{?proto.sp.rpc.emerald.RequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_request_context_pb.RequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.RequestContext|undefined} value
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest} returns this
*/
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest} returns this
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TrackEvent events = 2;
 * @return {!Array<!proto.sp.rpc.emerald.OfflineEvent.TrackEvent>}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.OfflineEvent.TrackEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.OfflineEvent.TrackEvent, 2));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.OfflineEvent.TrackEvent>} value
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest} returns this
*/
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEvent}
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sp.rpc.emerald.OfflineEvent.TrackEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest} returns this
 */
proto.sp.rpc.emerald.OfflineEvent.TrackEventsRequest.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.OfflineEvent.PacketEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    commonData: (f = msg.getCommonData()) && proto.sp.rpc.emerald.OfflineEvent.CommonData.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && SP_Rpc_Emerald_packet_service_pb.Packet.Command.EventCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.OfflineEvent.PacketEvent;
  return proto.sp.rpc.emerald.OfflineEvent.PacketEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sp.rpc.emerald.OfflineEvent.CommonData;
      reader.readMessage(value,proto.sp.rpc.emerald.OfflineEvent.CommonData.deserializeBinaryFromReader);
      msg.setCommonData(value);
      break;
    case 2:
      var value = new SP_Rpc_Emerald_packet_service_pb.Packet.Command.EventCommand;
      reader.readMessage(value,SP_Rpc_Emerald_packet_service_pb.Packet.Command.EventCommand.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.OfflineEvent.PacketEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommonData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sp.rpc.emerald.OfflineEvent.CommonData.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      SP_Rpc_Emerald_packet_service_pb.Packet.Command.EventCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional CommonData common_data = 1;
 * @return {?proto.sp.rpc.emerald.OfflineEvent.CommonData}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.prototype.getCommonData = function() {
  return /** @type{?proto.sp.rpc.emerald.OfflineEvent.CommonData} */ (
    jspb.Message.getWrapperField(this, proto.sp.rpc.emerald.OfflineEvent.CommonData, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.OfflineEvent.CommonData|undefined} value
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent} returns this
*/
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.prototype.setCommonData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent} returns this
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.prototype.clearCommonData = function() {
  return this.setCommonData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.prototype.hasCommonData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Packet.Command.EventCommand event = 2;
 * @return {?proto.sp.rpc.emerald.Packet.Command.EventCommand}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.prototype.getEvent = function() {
  return /** @type{?proto.sp.rpc.emerald.Packet.Command.EventCommand} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_packet_service_pb.Packet.Command.EventCommand, 2));
};


/**
 * @param {?proto.sp.rpc.emerald.Packet.Command.EventCommand|undefined} value
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent} returns this
*/
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent} returns this
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && SP_Rpc_Emerald_request_context_pb.RequestContext.toObject(includeInstance, f),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.sp.rpc.emerald.OfflineEvent.PacketEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest;
  return proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_request_context_pb.RequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_request_context_pb.RequestContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = new proto.sp.rpc.emerald.OfflineEvent.PacketEvent;
      reader.readMessage(value,proto.sp.rpc.emerald.OfflineEvent.PacketEvent.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_request_context_pb.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sp.rpc.emerald.OfflineEvent.PacketEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestContext context = 1;
 * @return {?proto.sp.rpc.emerald.RequestContext}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.prototype.getContext = function() {
  return /** @type{?proto.sp.rpc.emerald.RequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_request_context_pb.RequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.RequestContext|undefined} value
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest} returns this
*/
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest} returns this
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PacketEvent events = 2;
 * @return {!Array<!proto.sp.rpc.emerald.OfflineEvent.PacketEvent>}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.sp.rpc.emerald.OfflineEvent.PacketEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sp.rpc.emerald.OfflineEvent.PacketEvent, 2));
};


/**
 * @param {!Array<!proto.sp.rpc.emerald.OfflineEvent.PacketEvent>} value
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest} returns this
*/
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEvent}
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sp.rpc.emerald.OfflineEvent.PacketEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest} returns this
 */
proto.sp.rpc.emerald.OfflineEvent.PacketEventsRequest.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


goog.object.extend(exports, proto.sp.rpc.emerald);
