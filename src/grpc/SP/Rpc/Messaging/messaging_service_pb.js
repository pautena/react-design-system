// source: SP/Rpc/Messaging/messaging_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var SP_Rpc_Emerald_basic_request_context_pb = require('../../../SP/Rpc/Emerald/basic_request_context_pb.js');
goog.object.extend(proto, SP_Rpc_Emerald_basic_request_context_pb);
var SP_Rpc_Messaging_messaging_message_pb = require('../../../SP/Rpc/Messaging/messaging_message_pb.js');
goog.object.extend(proto, SP_Rpc_Messaging_messaging_message_pb);
goog.exportSymbol('proto.sp.rpc.messaging.GetMessagesRequest', null, global);
goog.exportSymbol('proto.sp.rpc.messaging.GetMessagesResponse', null, global);
goog.exportSymbol('proto.sp.rpc.messaging.RemoveMessagesRequest', null, global);
goog.exportSymbol('proto.sp.rpc.messaging.RemoveMessagesResponse', null, global);
goog.exportSymbol('proto.sp.rpc.messaging.SendMessageRequest', null, global);
goog.exportSymbol('proto.sp.rpc.messaging.SendMessageResponse', null, global);
goog.exportSymbol('proto.sp.rpc.messaging.SetReceiverTagsRequest', null, global);
goog.exportSymbol('proto.sp.rpc.messaging.SetReceiverTagsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.messaging.GetMessagesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.messaging.GetMessagesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.messaging.GetMessagesRequest.displayName = 'proto.sp.rpc.messaging.GetMessagesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.messaging.GetMessagesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.messaging.GetMessagesResponse.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.messaging.GetMessagesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.messaging.GetMessagesResponse.displayName = 'proto.sp.rpc.messaging.GetMessagesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.messaging.SendMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.messaging.SendMessageRequest.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.messaging.SendMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.messaging.SendMessageRequest.displayName = 'proto.sp.rpc.messaging.SendMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.messaging.SendMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.messaging.SendMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.messaging.SendMessageResponse.displayName = 'proto.sp.rpc.messaging.SendMessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.messaging.RemoveMessagesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.messaging.RemoveMessagesRequest.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.messaging.RemoveMessagesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.messaging.RemoveMessagesRequest.displayName = 'proto.sp.rpc.messaging.RemoveMessagesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.messaging.RemoveMessagesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.messaging.RemoveMessagesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.messaging.RemoveMessagesResponse.displayName = 'proto.sp.rpc.messaging.RemoveMessagesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sp.rpc.messaging.SetReceiverTagsRequest.repeatedFields_, null);
};
goog.inherits(proto.sp.rpc.messaging.SetReceiverTagsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.messaging.SetReceiverTagsRequest.displayName = 'proto.sp.rpc.messaging.SetReceiverTagsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sp.rpc.messaging.SetReceiverTagsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sp.rpc.messaging.SetReceiverTagsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sp.rpc.messaging.SetReceiverTagsResponse.displayName = 'proto.sp.rpc.messaging.SetReceiverTagsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.messaging.GetMessagesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.messaging.GetMessagesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.messaging.GetMessagesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.GetMessagesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    messageBox: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.messaging.GetMessagesRequest}
 */
proto.sp.rpc.messaging.GetMessagesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.messaging.GetMessagesRequest;
  return proto.sp.rpc.messaging.GetMessagesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.messaging.GetMessagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.messaging.GetMessagesRequest}
 */
proto.sp.rpc.messaging.GetMessagesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageBox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.messaging.GetMessagesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.messaging.GetMessagesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.messaging.GetMessagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.GetMessagesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getMessageBox();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.messaging.GetMessagesRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.messaging.GetMessagesRequest} returns this
*/
proto.sp.rpc.messaging.GetMessagesRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.messaging.GetMessagesRequest} returns this
 */
proto.sp.rpc.messaging.GetMessagesRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.messaging.GetMessagesRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message_box = 2;
 * @return {string}
 */
proto.sp.rpc.messaging.GetMessagesRequest.prototype.getMessageBox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.messaging.GetMessagesRequest} returns this
 */
proto.sp.rpc.messaging.GetMessagesRequest.prototype.setMessageBox = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.messaging.GetMessagesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.messaging.GetMessagesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.messaging.GetMessagesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.messaging.GetMessagesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.GetMessagesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    SP_Rpc_Messaging_messaging_message_pb.Message.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.messaging.GetMessagesResponse}
 */
proto.sp.rpc.messaging.GetMessagesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.messaging.GetMessagesResponse;
  return proto.sp.rpc.messaging.GetMessagesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.messaging.GetMessagesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.messaging.GetMessagesResponse}
 */
proto.sp.rpc.messaging.GetMessagesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Messaging_messaging_message_pb.Message;
      reader.readMessage(value,SP_Rpc_Messaging_messaging_message_pb.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.messaging.GetMessagesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.messaging.GetMessagesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.messaging.GetMessagesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.GetMessagesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      SP_Rpc_Messaging_messaging_message_pb.Message.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Message messages = 1;
 * @return {!Array<!proto.sp.rpc.messaging.Message>}
 */
proto.sp.rpc.messaging.GetMessagesResponse.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.sp.rpc.messaging.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, SP_Rpc_Messaging_messaging_message_pb.Message, 1));
};


/**
 * @param {!Array<!proto.sp.rpc.messaging.Message>} value
 * @return {!proto.sp.rpc.messaging.GetMessagesResponse} returns this
*/
proto.sp.rpc.messaging.GetMessagesResponse.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sp.rpc.messaging.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.messaging.Message}
 */
proto.sp.rpc.messaging.GetMessagesResponse.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sp.rpc.messaging.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.messaging.GetMessagesResponse} returns this
 */
proto.sp.rpc.messaging.GetMessagesResponse.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.messaging.SendMessageRequest.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.messaging.SendMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.messaging.SendMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.SendMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    messageBox: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sender: (f = msg.getSender()) && SP_Rpc_Messaging_messaging_message_pb.Message.Sender.toObject(includeInstance, f),
    receiverId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    content: (f = msg.getContent()) && SP_Rpc_Messaging_messaging_message_pb.Message.Content.toObject(includeInstance, f),
    senderTagsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.messaging.SendMessageRequest}
 */
proto.sp.rpc.messaging.SendMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.messaging.SendMessageRequest;
  return proto.sp.rpc.messaging.SendMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.messaging.SendMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.messaging.SendMessageRequest}
 */
proto.sp.rpc.messaging.SendMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageBox(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = new SP_Rpc_Messaging_messaging_message_pb.Message.Sender;
      reader.readMessage(value,SP_Rpc_Messaging_messaging_message_pb.Message.Sender.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReceiverId(value);
      break;
    case 6:
      var value = new SP_Rpc_Messaging_messaging_message_pb.Message.Content;
      reader.readMessage(value,SP_Rpc_Messaging_messaging_message_pb.Message.Content.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addSenderTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.messaging.SendMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.messaging.SendMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.SendMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getMessageBox();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      SP_Rpc_Messaging_messaging_message_pb.Message.Sender.serializeBinaryToWriter
    );
  }
  f = message.getReceiverId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      SP_Rpc_Messaging_messaging_message_pb.Message.Content.serializeBinaryToWriter
    );
  }
  f = message.getSenderTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
*/
proto.sp.rpc.messaging.SendMessageRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message_box = 2;
 * @return {string}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.getMessageBox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.setMessageBox = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Message.Sender sender = 4;
 * @return {?proto.sp.rpc.messaging.Message.Sender}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.getSender = function() {
  return /** @type{?proto.sp.rpc.messaging.Message.Sender} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Messaging_messaging_message_pb.Message.Sender, 4));
};


/**
 * @param {?proto.sp.rpc.messaging.Message.Sender|undefined} value
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
*/
proto.sp.rpc.messaging.SendMessageRequest.prototype.setSender = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.clearSender = function() {
  return this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.hasSender = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 receiver_id = 5;
 * @return {number}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.getReceiverId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.setReceiverId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Message.Content content = 6;
 * @return {?proto.sp.rpc.messaging.Message.Content}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.getContent = function() {
  return /** @type{?proto.sp.rpc.messaging.Message.Content} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Messaging_messaging_message_pb.Message.Content, 6));
};


/**
 * @param {?proto.sp.rpc.messaging.Message.Content|undefined} value
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
*/
proto.sp.rpc.messaging.SendMessageRequest.prototype.setContent = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.clearContent = function() {
  return this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.hasContent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string sender_tags = 7;
 * @return {!Array<string>}
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.getSenderTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.setSenderTagsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.addSenderTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.messaging.SendMessageRequest} returns this
 */
proto.sp.rpc.messaging.SendMessageRequest.prototype.clearSenderTagsList = function() {
  return this.setSenderTagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.messaging.SendMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.messaging.SendMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.messaging.SendMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.SendMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.messaging.SendMessageResponse}
 */
proto.sp.rpc.messaging.SendMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.messaging.SendMessageResponse;
  return proto.sp.rpc.messaging.SendMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.messaging.SendMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.messaging.SendMessageResponse}
 */
proto.sp.rpc.messaging.SendMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.messaging.SendMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.messaging.SendMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.messaging.SendMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.SendMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.messaging.RemoveMessagesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.messaging.RemoveMessagesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    messageBox: jspb.Message.getFieldWithDefault(msg, 2, ""),
    messageIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.messaging.RemoveMessagesRequest}
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.messaging.RemoveMessagesRequest;
  return proto.sp.rpc.messaging.RemoveMessagesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.messaging.RemoveMessagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.messaging.RemoveMessagesRequest}
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageBox(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMessageIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.messaging.RemoveMessagesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.messaging.RemoveMessagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getMessageBox();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessageIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.messaging.RemoveMessagesRequest} returns this
*/
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.messaging.RemoveMessagesRequest} returns this
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message_box = 2;
 * @return {string}
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.getMessageBox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.messaging.RemoveMessagesRequest} returns this
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.setMessageBox = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string message_ids = 3;
 * @return {!Array<string>}
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.getMessageIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sp.rpc.messaging.RemoveMessagesRequest} returns this
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.setMessageIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.messaging.RemoveMessagesRequest} returns this
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.addMessageIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.messaging.RemoveMessagesRequest} returns this
 */
proto.sp.rpc.messaging.RemoveMessagesRequest.prototype.clearMessageIdsList = function() {
  return this.setMessageIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.messaging.RemoveMessagesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.messaging.RemoveMessagesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.messaging.RemoveMessagesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.RemoveMessagesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.messaging.RemoveMessagesResponse}
 */
proto.sp.rpc.messaging.RemoveMessagesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.messaging.RemoveMessagesResponse;
  return proto.sp.rpc.messaging.RemoveMessagesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.messaging.RemoveMessagesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.messaging.RemoveMessagesResponse}
 */
proto.sp.rpc.messaging.RemoveMessagesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.messaging.RemoveMessagesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.messaging.RemoveMessagesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.messaging.RemoveMessagesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.RemoveMessagesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.messaging.SetReceiverTagsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.messaging.SetReceiverTagsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestContext: (f = msg.getRequestContext()) && SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.toObject(includeInstance, f),
    messageBox: jspb.Message.getFieldWithDefault(msg, 2, ""),
    messageId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    receiverTagsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsRequest}
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.messaging.SetReceiverTagsRequest;
  return proto.sp.rpc.messaging.SetReceiverTagsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.messaging.SetReceiverTagsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsRequest}
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext;
      reader.readMessage(value,SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageBox(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addReceiverTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.messaging.SetReceiverTagsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.messaging.SetReceiverTagsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getMessageBox();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReceiverTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional sp.rpc.emerald.BasicRequestContext request_context = 1;
 * @return {?proto.sp.rpc.emerald.BasicRequestContext}
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.sp.rpc.emerald.BasicRequestContext} */ (
    jspb.Message.getWrapperField(this, SP_Rpc_Emerald_basic_request_context_pb.BasicRequestContext, 1));
};


/**
 * @param {?proto.sp.rpc.emerald.BasicRequestContext|undefined} value
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsRequest} returns this
*/
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsRequest} returns this
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message_box = 2;
 * @return {string}
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.getMessageBox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsRequest} returns this
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.setMessageBox = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message_id = 3;
 * @return {string}
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsRequest} returns this
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string receiver_tags = 4;
 * @return {!Array<string>}
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.getReceiverTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsRequest} returns this
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.setReceiverTagsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsRequest} returns this
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.addReceiverTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsRequest} returns this
 */
proto.sp.rpc.messaging.SetReceiverTagsRequest.prototype.clearReceiverTagsList = function() {
  return this.setReceiverTagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sp.rpc.messaging.SetReceiverTagsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sp.rpc.messaging.SetReceiverTagsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sp.rpc.messaging.SetReceiverTagsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.SetReceiverTagsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsResponse}
 */
proto.sp.rpc.messaging.SetReceiverTagsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sp.rpc.messaging.SetReceiverTagsResponse;
  return proto.sp.rpc.messaging.SetReceiverTagsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sp.rpc.messaging.SetReceiverTagsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sp.rpc.messaging.SetReceiverTagsResponse}
 */
proto.sp.rpc.messaging.SetReceiverTagsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sp.rpc.messaging.SetReceiverTagsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sp.rpc.messaging.SetReceiverTagsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sp.rpc.messaging.SetReceiverTagsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sp.rpc.messaging.SetReceiverTagsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.sp.rpc.messaging);
