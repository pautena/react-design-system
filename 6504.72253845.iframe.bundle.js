/*! For license information please see 6504.72253845.iframe.bundle.js.LICENSE.txt */
(self.webpackChunk_pautena_react_design_system=self.webpackChunk_pautena_react_design_system||[]).push([[6504],{"./node_modules/@babel/runtime/helpers/interopRequireWildcard.js":(module,__unused_webpack_exports,__webpack_require__)=>{var _typeof=__webpack_require__("./node_modules/@babel/runtime/helpers/typeof.js").default;function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r})(e)}module.exports=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n},module.exports.__esModule=!0,module.exports.default=module.exports},"./node_modules/@babel/runtime/helpers/typeof.js":module=>{function _typeof(o){return module.exports=_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},module.exports.__esModule=!0,module.exports.default=module.exports,_typeof(o)}module.exports=_typeof,module.exports.__esModule=!0,module.exports.default=module.exports},"./node_modules/@mui/material/Badge/Badge.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Z:()=>Badge_Badge});var react=__webpack_require__("./node_modules/react/index.js"),clsx=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),usePreviousProps=__webpack_require__("./node_modules/@mui/utils/esm/usePreviousProps/usePreviousProps.js"),composeClasses=__webpack_require__("./node_modules/@mui/utils/esm/composeClasses/composeClasses.js"),useSlotProps=__webpack_require__("./node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js");const Badge_useBadge=function useBadge(parameters){const{badgeContent:badgeContentProp,invisible:invisibleProp=!1,max:maxProp=99,showZero=!1}=parameters,prevProps=(0,usePreviousProps.Z)({badgeContent:badgeContentProp,max:maxProp});let invisible=invisibleProp;!1!==invisibleProp||0!==badgeContentProp||showZero||(invisible=!0);const{badgeContent,max=maxProp}=invisible?prevProps:parameters;return{badgeContent,invisible,max,displayValue:badgeContent&&Number(badgeContent)>max?`${max}+`:badgeContent}};var styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),memoTheme=__webpack_require__("./node_modules/@mui/material/utils/memoTheme.js"),createSimplePaletteValueFilter=__webpack_require__("./node_modules/@mui/material/utils/createSimplePaletteValueFilter.js"),DefaultPropsProvider=__webpack_require__("./node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js"),capitalize=__webpack_require__("./node_modules/@mui/material/utils/capitalize.js"),generateUtilityClasses=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js"),generateUtilityClass=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js");function getBadgeUtilityClass(slot){return(0,generateUtilityClass.ZP)("MuiBadge",slot)}const Badge_badgeClasses=(0,generateUtilityClasses.Z)("MuiBadge",["root","badge","dot","standard","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft","invisible","colorError","colorInfo","colorPrimary","colorSecondary","colorSuccess","colorWarning","overlapRectangular","overlapCircular","anchorOriginTopLeftCircular","anchorOriginTopLeftRectangular","anchorOriginTopRightCircular","anchorOriginTopRightRectangular","anchorOriginBottomLeftCircular","anchorOriginBottomLeftRectangular","anchorOriginBottomRightCircular","anchorOriginBottomRightRectangular"]);var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const BadgeRoot=(0,styled.ZP)("span",{name:"MuiBadge",slot:"Root",overridesResolver:(props,styles)=>styles.root})({position:"relative",display:"inline-flex",verticalAlign:"middle",flexShrink:0}),BadgeBadge=(0,styled.ZP)("span",{name:"MuiBadge",slot:"Badge",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.badge,styles[ownerState.variant],styles[`anchorOrigin${(0,capitalize.Z)(ownerState.anchorOrigin.vertical)}${(0,capitalize.Z)(ownerState.anchorOrigin.horizontal)}${(0,capitalize.Z)(ownerState.overlap)}`],"default"!==ownerState.color&&styles[`color${(0,capitalize.Z)(ownerState.color)}`],ownerState.invisible&&styles.invisible]}})((0,memoTheme.Z)((({theme})=>({display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"center",alignContent:"center",alignItems:"center",position:"absolute",boxSizing:"border-box",fontFamily:theme.typography.fontFamily,fontWeight:theme.typography.fontWeightMedium,fontSize:theme.typography.pxToRem(12),minWidth:20,lineHeight:1,padding:"0 6px",height:20,borderRadius:10,zIndex:1,transition:theme.transitions.create("transform",{easing:theme.transitions.easing.easeInOut,duration:theme.transitions.duration.enteringScreen}),variants:[...Object.entries(theme.palette).filter((0,createSimplePaletteValueFilter.Z)(["contrastText"])).map((([color])=>({props:{color},style:{backgroundColor:(theme.vars||theme).palette[color].main,color:(theme.vars||theme).palette[color].contrastText}}))),{props:{variant:"dot"},style:{borderRadius:4,height:8,minWidth:8,padding:0}},{props:({ownerState})=>"top"===ownerState.anchorOrigin.vertical&&"right"===ownerState.anchorOrigin.horizontal&&"rectangular"===ownerState.overlap,style:{top:0,right:0,transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%",[`&.${Badge_badgeClasses.invisible}`]:{transform:"scale(0) translate(50%, -50%)"}}},{props:({ownerState})=>"bottom"===ownerState.anchorOrigin.vertical&&"right"===ownerState.anchorOrigin.horizontal&&"rectangular"===ownerState.overlap,style:{bottom:0,right:0,transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%",[`&.${Badge_badgeClasses.invisible}`]:{transform:"scale(0) translate(50%, 50%)"}}},{props:({ownerState})=>"top"===ownerState.anchorOrigin.vertical&&"left"===ownerState.anchorOrigin.horizontal&&"rectangular"===ownerState.overlap,style:{top:0,left:0,transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%",[`&.${Badge_badgeClasses.invisible}`]:{transform:"scale(0) translate(-50%, -50%)"}}},{props:({ownerState})=>"bottom"===ownerState.anchorOrigin.vertical&&"left"===ownerState.anchorOrigin.horizontal&&"rectangular"===ownerState.overlap,style:{bottom:0,left:0,transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%",[`&.${Badge_badgeClasses.invisible}`]:{transform:"scale(0) translate(-50%, 50%)"}}},{props:({ownerState})=>"top"===ownerState.anchorOrigin.vertical&&"right"===ownerState.anchorOrigin.horizontal&&"circular"===ownerState.overlap,style:{top:"14%",right:"14%",transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%",[`&.${Badge_badgeClasses.invisible}`]:{transform:"scale(0) translate(50%, -50%)"}}},{props:({ownerState})=>"bottom"===ownerState.anchorOrigin.vertical&&"right"===ownerState.anchorOrigin.horizontal&&"circular"===ownerState.overlap,style:{bottom:"14%",right:"14%",transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%",[`&.${Badge_badgeClasses.invisible}`]:{transform:"scale(0) translate(50%, 50%)"}}},{props:({ownerState})=>"top"===ownerState.anchorOrigin.vertical&&"left"===ownerState.anchorOrigin.horizontal&&"circular"===ownerState.overlap,style:{top:"14%",left:"14%",transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%",[`&.${Badge_badgeClasses.invisible}`]:{transform:"scale(0) translate(-50%, -50%)"}}},{props:({ownerState})=>"bottom"===ownerState.anchorOrigin.vertical&&"left"===ownerState.anchorOrigin.horizontal&&"circular"===ownerState.overlap,style:{bottom:"14%",left:"14%",transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%",[`&.${Badge_badgeClasses.invisible}`]:{transform:"scale(0) translate(-50%, 50%)"}}},{props:{invisible:!0},style:{transition:theme.transitions.create("transform",{easing:theme.transitions.easing.easeInOut,duration:theme.transitions.duration.leavingScreen})}}]}))));function getAnchorOrigin(anchorOrigin){return{vertical:anchorOrigin?.vertical??"top",horizontal:anchorOrigin?.horizontal??"right"}}const Badge_Badge=react.forwardRef((function Badge(inProps,ref){const props=(0,DefaultPropsProvider.i)({props:inProps,name:"MuiBadge"}),{anchorOrigin:anchorOriginProp,className,classes:classesProp,component,components={},componentsProps={},children,overlap:overlapProp="rectangular",color:colorProp="default",invisible:invisibleProp=!1,max:maxProp=99,badgeContent:badgeContentProp,slots,slotProps,showZero=!1,variant:variantProp="standard",...other}=props,{badgeContent,invisible:invisibleFromHook,max,displayValue:displayValueFromHook}=Badge_useBadge({max:maxProp,invisible:invisibleProp,badgeContent:badgeContentProp,showZero}),prevProps=(0,usePreviousProps.Z)({anchorOrigin:getAnchorOrigin(anchorOriginProp),color:colorProp,overlap:overlapProp,variant:variantProp,badgeContent:badgeContentProp}),invisible=invisibleFromHook||null==badgeContent&&"dot"!==variantProp,{color=colorProp,overlap=overlapProp,anchorOrigin:anchorOriginPropProp,variant=variantProp}=invisible?prevProps:props,anchorOrigin=getAnchorOrigin(anchorOriginPropProp),displayValue="dot"!==variant?displayValueFromHook:void 0,ownerState={...props,badgeContent,invisible,max,displayValue,showZero,anchorOrigin,color,overlap,variant},classes=(ownerState=>{const{color,anchorOrigin,invisible,overlap,variant,classes={}}=ownerState,slots={root:["root"],badge:["badge",variant,invisible&&"invisible",`anchorOrigin${(0,capitalize.Z)(anchorOrigin.vertical)}${(0,capitalize.Z)(anchorOrigin.horizontal)}`,`anchorOrigin${(0,capitalize.Z)(anchorOrigin.vertical)}${(0,capitalize.Z)(anchorOrigin.horizontal)}${(0,capitalize.Z)(overlap)}`,`overlap${(0,capitalize.Z)(overlap)}`,"default"!==color&&`color${(0,capitalize.Z)(color)}`]};return(0,composeClasses.Z)(slots,getBadgeUtilityClass,classes)})(ownerState),RootSlot=slots?.root??components.Root??BadgeRoot,BadgeSlot=slots?.badge??components.Badge??BadgeBadge,rootSlotProps=slotProps?.root??componentsProps.root,badgeSlotProps=slotProps?.badge??componentsProps.badge,rootProps=(0,useSlotProps.Z)({elementType:RootSlot,externalSlotProps:rootSlotProps,externalForwardedProps:other,additionalProps:{ref,as:component},ownerState,className:(0,clsx.Z)(rootSlotProps?.className,classes.root,className)}),badgeProps=(0,useSlotProps.Z)({elementType:BadgeSlot,externalSlotProps:badgeSlotProps,ownerState,className:(0,clsx.Z)(classes.badge,badgeSlotProps?.className)});return(0,jsx_runtime.jsxs)(RootSlot,{...rootProps,children:[children,(0,jsx_runtime.jsx)(BadgeSlot,{...badgeProps,children:displayValue})]})}))},"./node_modules/@mui/material/LinearProgress/LinearProgress.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),clsx__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),_mui_utils_composeClasses__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/utils/esm/composeClasses/composeClasses.js"),_mui_system_colorManipulator__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mui/system/esm/colorManipulator/colorManipulator.js"),_mui_system_RtlProvider__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@mui/system/esm/RtlProvider/index.js"),_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js"),_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_utils_memoTheme_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@mui/material/utils/memoTheme.js"),_utils_createSimplePaletteValueFilter_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@mui/material/utils/createSimplePaletteValueFilter.js"),_DefaultPropsProvider_index_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js"),_utils_capitalize_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/utils/capitalize.js"),_linearProgressClasses_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mui/material/LinearProgress/linearProgressClasses.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const indeterminate1Keyframe=_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_2__.F4`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`,indeterminate1Animation="string"!=typeof indeterminate1Keyframe?_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_2__.iv`
        animation: ${indeterminate1Keyframe} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
      `:null,indeterminate2Keyframe=_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_2__.F4`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`,indeterminate2Animation="string"!=typeof indeterminate2Keyframe?_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_2__.iv`
        animation: ${indeterminate2Keyframe} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
      `:null,bufferKeyframe=_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_2__.F4`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`,bufferAnimation="string"!=typeof bufferKeyframe?_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_2__.iv`
        animation: ${bufferKeyframe} 3s infinite linear;
      `:null,getColorShade=(theme,color)=>theme.vars?theme.vars.palette.LinearProgress[`${color}Bg`]:"light"===theme.palette.mode?(0,_mui_system_colorManipulator__WEBPACK_IMPORTED_MODULE_6__.$n)(theme.palette[color].main,.62):(0,_mui_system_colorManipulator__WEBPACK_IMPORTED_MODULE_6__._j)(theme.palette[color].main,.5),LinearProgressRoot=(0,_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_7__.ZP)("span",{name:"MuiLinearProgress",slot:"Root",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.root,styles[`color${(0,_utils_capitalize_js__WEBPACK_IMPORTED_MODULE_3__.Z)(ownerState.color)}`],styles[ownerState.variant]]}})((0,_utils_memoTheme_js__WEBPACK_IMPORTED_MODULE_8__.Z)((({theme})=>({position:"relative",overflow:"hidden",display:"block",height:4,zIndex:0,"@media print":{colorAdjust:"exact"},variants:[...Object.entries(theme.palette).filter((0,_utils_createSimplePaletteValueFilter_js__WEBPACK_IMPORTED_MODULE_9__.Z)()).map((([color])=>({props:{color},style:{backgroundColor:getColorShade(theme,color)}}))),{props:({ownerState})=>"inherit"===ownerState.color&&"buffer"!==ownerState.variant,style:{"&::before":{content:'""',position:"absolute",left:0,top:0,right:0,bottom:0,backgroundColor:"currentColor",opacity:.3}}},{props:{variant:"buffer"},style:{backgroundColor:"transparent"}},{props:{variant:"query"},style:{transform:"rotate(180deg)"}}]})))),LinearProgressDashed=(0,_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_7__.ZP)("span",{name:"MuiLinearProgress",slot:"Dashed",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.dashed,styles[`dashedColor${(0,_utils_capitalize_js__WEBPACK_IMPORTED_MODULE_3__.Z)(ownerState.color)}`]]}})((0,_utils_memoTheme_js__WEBPACK_IMPORTED_MODULE_8__.Z)((({theme})=>({position:"absolute",marginTop:0,height:"100%",width:"100%",backgroundSize:"10px 10px",backgroundPosition:"0 -23px",variants:[{props:{color:"inherit"},style:{opacity:.3,backgroundImage:"radial-gradient(currentColor 0%, currentColor 16%, transparent 42%)"}},...Object.entries(theme.palette).filter((0,_utils_createSimplePaletteValueFilter_js__WEBPACK_IMPORTED_MODULE_9__.Z)()).map((([color])=>{const backgroundColor=getColorShade(theme,color);return{props:{color},style:{backgroundImage:`radial-gradient(${backgroundColor} 0%, ${backgroundColor} 16%, transparent 42%)`}}}))]}))),bufferAnimation||{animation:`${bufferKeyframe} 3s infinite linear`}),LinearProgressBar1=(0,_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_7__.ZP)("span",{name:"MuiLinearProgress",slot:"Bar1",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.bar,styles.bar1,styles[`barColor${(0,_utils_capitalize_js__WEBPACK_IMPORTED_MODULE_3__.Z)(ownerState.color)}`],("indeterminate"===ownerState.variant||"query"===ownerState.variant)&&styles.bar1Indeterminate,"determinate"===ownerState.variant&&styles.bar1Determinate,"buffer"===ownerState.variant&&styles.bar1Buffer]}})((0,_utils_memoTheme_js__WEBPACK_IMPORTED_MODULE_8__.Z)((({theme})=>({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left",variants:[{props:{color:"inherit"},style:{backgroundColor:"currentColor"}},...Object.entries(theme.palette).filter((0,_utils_createSimplePaletteValueFilter_js__WEBPACK_IMPORTED_MODULE_9__.Z)()).map((([color])=>({props:{color},style:{backgroundColor:(theme.vars||theme).palette[color].main}}))),{props:{variant:"determinate"},style:{transition:"transform .4s linear"}},{props:{variant:"buffer"},style:{zIndex:1,transition:"transform .4s linear"}},{props:({ownerState})=>"indeterminate"===ownerState.variant||"query"===ownerState.variant,style:{width:"auto"}},{props:({ownerState})=>"indeterminate"===ownerState.variant||"query"===ownerState.variant,style:indeterminate1Animation||{animation:`${indeterminate1Keyframe} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite`}}]})))),LinearProgressBar2=(0,_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_7__.ZP)("span",{name:"MuiLinearProgress",slot:"Bar2",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.bar,styles.bar2,styles[`barColor${(0,_utils_capitalize_js__WEBPACK_IMPORTED_MODULE_3__.Z)(ownerState.color)}`],("indeterminate"===ownerState.variant||"query"===ownerState.variant)&&styles.bar2Indeterminate,"buffer"===ownerState.variant&&styles.bar2Buffer]}})((0,_utils_memoTheme_js__WEBPACK_IMPORTED_MODULE_8__.Z)((({theme})=>({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left",variants:[...Object.entries(theme.palette).filter((0,_utils_createSimplePaletteValueFilter_js__WEBPACK_IMPORTED_MODULE_9__.Z)()).map((([color])=>({props:{color},style:{"--LinearProgressBar2-barColor":(theme.vars||theme).palette[color].main}}))),{props:({ownerState})=>"buffer"!==ownerState.variant&&"inherit"!==ownerState.color,style:{backgroundColor:"var(--LinearProgressBar2-barColor, currentColor)"}},{props:({ownerState})=>"buffer"!==ownerState.variant&&"inherit"===ownerState.color,style:{backgroundColor:"currentColor"}},{props:{color:"inherit"},style:{opacity:.3}},...Object.entries(theme.palette).filter((0,_utils_createSimplePaletteValueFilter_js__WEBPACK_IMPORTED_MODULE_9__.Z)()).map((([color])=>({props:{color,variant:"buffer"},style:{backgroundColor:getColorShade(theme,color),transition:"transform .4s linear"}}))),{props:({ownerState})=>"indeterminate"===ownerState.variant||"query"===ownerState.variant,style:{width:"auto"}},{props:({ownerState})=>"indeterminate"===ownerState.variant||"query"===ownerState.variant,style:indeterminate2Animation||{animation:`${indeterminate2Keyframe} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite`}}]})))),__WEBPACK_DEFAULT_EXPORT__=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((function LinearProgress(inProps,ref){const props=(0,_DefaultPropsProvider_index_js__WEBPACK_IMPORTED_MODULE_10__.i)({props:inProps,name:"MuiLinearProgress"}),{className,color="primary",value,valueBuffer,variant="indeterminate",...other}=props,ownerState={...props,color,variant},classes=(ownerState=>{const{classes,variant,color}=ownerState,slots={root:["root",`color${(0,_utils_capitalize_js__WEBPACK_IMPORTED_MODULE_3__.Z)(color)}`,variant],dashed:["dashed",`dashedColor${(0,_utils_capitalize_js__WEBPACK_IMPORTED_MODULE_3__.Z)(color)}`],bar1:["bar","bar1",`barColor${(0,_utils_capitalize_js__WEBPACK_IMPORTED_MODULE_3__.Z)(color)}`,("indeterminate"===variant||"query"===variant)&&"bar1Indeterminate","determinate"===variant&&"bar1Determinate","buffer"===variant&&"bar1Buffer"],bar2:["bar","bar2","buffer"!==variant&&`barColor${(0,_utils_capitalize_js__WEBPACK_IMPORTED_MODULE_3__.Z)(color)}`,"buffer"===variant&&`color${(0,_utils_capitalize_js__WEBPACK_IMPORTED_MODULE_3__.Z)(color)}`,("indeterminate"===variant||"query"===variant)&&"bar2Indeterminate","buffer"===variant&&"bar2Buffer"]};return(0,_mui_utils_composeClasses__WEBPACK_IMPORTED_MODULE_4__.Z)(slots,_linearProgressClasses_js__WEBPACK_IMPORTED_MODULE_5__.E,classes)})(ownerState),isRtl=(0,_mui_system_RtlProvider__WEBPACK_IMPORTED_MODULE_11__.V)(),rootProps={},inlineStyles={bar1:{},bar2:{}};if("determinate"===variant||"buffer"===variant)if(void 0!==value){rootProps["aria-valuenow"]=Math.round(value),rootProps["aria-valuemin"]=0,rootProps["aria-valuemax"]=100;let transform=value-100;isRtl&&(transform=-transform),inlineStyles.bar1.transform=`translateX(${transform}%)`}else 0;if("buffer"===variant)if(void 0!==valueBuffer){let transform=(valueBuffer||0)-100;isRtl&&(transform=-transform),inlineStyles.bar2.transform=`translateX(${transform}%)`}else 0;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(LinearProgressRoot,{className:(0,clsx__WEBPACK_IMPORTED_MODULE_12__.Z)(classes.root,className),ownerState,role:"progressbar",...rootProps,ref,...other,children:["buffer"===variant?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(LinearProgressDashed,{className:classes.dashed,ownerState}):null,(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(LinearProgressBar1,{className:classes.bar1,ownerState,style:inlineStyles.bar1}),"determinate"===variant?null:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(LinearProgressBar2,{className:classes.bar2,ownerState,style:inlineStyles.bar2})]})}))},"./node_modules/@mui/material/LinearProgress/linearProgressClasses.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{E:()=>getLinearProgressUtilityClass,Z:()=>__WEBPACK_DEFAULT_EXPORT__});var _mui_utils_generateUtilityClasses__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js"),_mui_utils_generateUtilityClass__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js");function getLinearProgressUtilityClass(slot){return(0,_mui_utils_generateUtilityClass__WEBPACK_IMPORTED_MODULE_0__.ZP)("MuiLinearProgress",slot)}const __WEBPACK_DEFAULT_EXPORT__=(0,_mui_utils_generateUtilityClasses__WEBPACK_IMPORTED_MODULE_1__.Z)("MuiLinearProgress",["root","colorPrimary","colorSecondary","determinate","indeterminate","buffer","query","dashed","dashedColorPrimary","dashedColorSecondary","bar","bar1","bar2","barColorPrimary","barColorSecondary","bar1Indeterminate","bar1Determinate","bar1Buffer","bar2Indeterminate","bar2Buffer"])},"./node_modules/@mui/material/Table/TableContext.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=__webpack_require__("./node_modules/react/index.js").createContext()},"./node_modules/@mui/material/Table/Tablelvl2Context.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=__webpack_require__("./node_modules/react/index.js").createContext()},"./node_modules/@mui/material/TableCell/TableCell.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Z:()=>TableCell_TableCell});var react=__webpack_require__("./node_modules/react/index.js"),clsx=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),composeClasses=__webpack_require__("./node_modules/@mui/utils/esm/composeClasses/composeClasses.js"),colorManipulator=__webpack_require__("./node_modules/@mui/system/esm/colorManipulator/colorManipulator.js"),capitalize=__webpack_require__("./node_modules/@mui/material/utils/capitalize.js"),TableContext=__webpack_require__("./node_modules/@mui/material/Table/TableContext.js"),Tablelvl2Context=__webpack_require__("./node_modules/@mui/material/Table/Tablelvl2Context.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),memoTheme=__webpack_require__("./node_modules/@mui/material/utils/memoTheme.js"),DefaultPropsProvider=__webpack_require__("./node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js"),generateUtilityClasses=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js"),generateUtilityClass=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js");function getTableCellUtilityClass(slot){return(0,generateUtilityClass.ZP)("MuiTableCell",slot)}const TableCell_tableCellClasses=(0,generateUtilityClasses.Z)("MuiTableCell",["root","head","body","footer","sizeSmall","sizeMedium","paddingCheckbox","paddingNone","alignLeft","alignCenter","alignRight","alignJustify","stickyHeader"]);var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const TableCellRoot=(0,styled.ZP)("td",{name:"MuiTableCell",slot:"Root",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.root,styles[ownerState.variant],styles[`size${(0,capitalize.Z)(ownerState.size)}`],"normal"!==ownerState.padding&&styles[`padding${(0,capitalize.Z)(ownerState.padding)}`],"inherit"!==ownerState.align&&styles[`align${(0,capitalize.Z)(ownerState.align)}`],ownerState.stickyHeader&&styles.stickyHeader]}})((0,memoTheme.Z)((({theme})=>({...theme.typography.body2,display:"table-cell",verticalAlign:"inherit",borderBottom:theme.vars?`1px solid ${theme.vars.palette.TableCell.border}`:`1px solid\n    ${"light"===theme.palette.mode?(0,colorManipulator.$n)((0,colorManipulator.Fq)(theme.palette.divider,1),.88):(0,colorManipulator._j)((0,colorManipulator.Fq)(theme.palette.divider,1),.68)}`,textAlign:"left",padding:16,variants:[{props:{variant:"head"},style:{color:(theme.vars||theme).palette.text.primary,lineHeight:theme.typography.pxToRem(24),fontWeight:theme.typography.fontWeightMedium}},{props:{variant:"body"},style:{color:(theme.vars||theme).palette.text.primary}},{props:{variant:"footer"},style:{color:(theme.vars||theme).palette.text.secondary,lineHeight:theme.typography.pxToRem(21),fontSize:theme.typography.pxToRem(12)}},{props:{size:"small"},style:{padding:"6px 16px",[`&.${TableCell_tableCellClasses.paddingCheckbox}`]:{width:24,padding:"0 12px 0 16px","& > *":{padding:0}}}},{props:{padding:"checkbox"},style:{width:48,padding:"0 0 0 4px"}},{props:{padding:"none"},style:{padding:0}},{props:{align:"left"},style:{textAlign:"left"}},{props:{align:"center"},style:{textAlign:"center"}},{props:{align:"right"},style:{textAlign:"right",flexDirection:"row-reverse"}},{props:{align:"justify"},style:{textAlign:"justify"}},{props:({ownerState})=>ownerState.stickyHeader,style:{position:"sticky",top:0,zIndex:2,backgroundColor:(theme.vars||theme).palette.background.default}}]})))),TableCell_TableCell=react.forwardRef((function TableCell(inProps,ref){const props=(0,DefaultPropsProvider.i)({props:inProps,name:"MuiTableCell"}),{align="inherit",className,component:componentProp,padding:paddingProp,scope:scopeProp,size:sizeProp,sortDirection,variant:variantProp,...other}=props,table=react.useContext(TableContext.Z),tablelvl2=react.useContext(Tablelvl2Context.Z),isHeadCell=tablelvl2&&"head"===tablelvl2.variant;let component;component=componentProp||(isHeadCell?"th":"td");let scope=scopeProp;"td"===component?scope=void 0:!scope&&isHeadCell&&(scope="col");const variant=variantProp||tablelvl2&&tablelvl2.variant,ownerState={...props,align,component,padding:paddingProp||(table&&table.padding?table.padding:"normal"),size:sizeProp||(table&&table.size?table.size:"medium"),sortDirection,stickyHeader:"head"===variant&&table&&table.stickyHeader,variant},classes=(ownerState=>{const{classes,variant,align,padding,size,stickyHeader}=ownerState,slots={root:["root",variant,stickyHeader&&"stickyHeader","inherit"!==align&&`align${(0,capitalize.Z)(align)}`,"normal"!==padding&&`padding${(0,capitalize.Z)(padding)}`,`size${(0,capitalize.Z)(size)}`]};return(0,composeClasses.Z)(slots,getTableCellUtilityClass,classes)})(ownerState);let ariaSort=null;return sortDirection&&(ariaSort="asc"===sortDirection?"ascending":"descending"),(0,jsx_runtime.jsx)(TableCellRoot,{as:component,ref,className:(0,clsx.Z)(classes.root,className),"aria-sort":ariaSort,scope,ownerState,...other})}))},"./node_modules/@mui/material/Toolbar/Toolbar.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Z:()=>Toolbar_Toolbar});var react=__webpack_require__("./node_modules/react/index.js"),clsx=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),composeClasses=__webpack_require__("./node_modules/@mui/utils/esm/composeClasses/composeClasses.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),memoTheme=__webpack_require__("./node_modules/@mui/material/utils/memoTheme.js"),DefaultPropsProvider=__webpack_require__("./node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js"),generateUtilityClasses=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js"),generateUtilityClass=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js");function getToolbarUtilityClass(slot){return(0,generateUtilityClass.ZP)("MuiToolbar",slot)}(0,generateUtilityClasses.Z)("MuiToolbar",["root","gutters","regular","dense"]);var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const ToolbarRoot=(0,styled.ZP)("div",{name:"MuiToolbar",slot:"Root",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.root,!ownerState.disableGutters&&styles.gutters,styles[ownerState.variant]]}})((0,memoTheme.Z)((({theme})=>({position:"relative",display:"flex",alignItems:"center",variants:[{props:({ownerState})=>!ownerState.disableGutters,style:{paddingLeft:theme.spacing(2),paddingRight:theme.spacing(2),[theme.breakpoints.up("sm")]:{paddingLeft:theme.spacing(3),paddingRight:theme.spacing(3)}}},{props:{variant:"dense"},style:{minHeight:48}},{props:{variant:"regular"},style:theme.mixins.toolbar}]})))),Toolbar_Toolbar=react.forwardRef((function Toolbar(inProps,ref){const props=(0,DefaultPropsProvider.i)({props:inProps,name:"MuiToolbar"}),{className,component="div",disableGutters=!1,variant="regular",...other}=props,ownerState={...props,component,disableGutters,variant},classes=(ownerState=>{const{classes,disableGutters,variant}=ownerState,slots={root:["root",!disableGutters&&"gutters",variant]};return(0,composeClasses.Z)(slots,getToolbarUtilityClass,classes)})(ownerState);return(0,jsx_runtime.jsx)(ToolbarRoot,{as:component,className:(0,clsx.Z)(classes.root,className),ref,ownerState,...other})}))},"./node_modules/@mui/x-data-grid/DataGrid/DataGrid.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{_:()=>DataGrid});var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types);const reactMajor=parseInt(react.version,10),forwardRef=render=>{if(reactMajor>=19){const Component=props=>render(props,props.ref??null);return Component.displayName=render.displayName??render.name,Component}return react.forwardRef(render)};var objectWithoutPropertiesLoose=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),clsx=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),capitalize=__webpack_require__("./node_modules/@mui/utils/esm/capitalize/capitalize.js"),composeClasses=__webpack_require__("./node_modules/@mui/utils/esm/composeClasses/composeClasses.js"),useForkRef=__webpack_require__("./node_modules/@mui/utils/esm/useForkRef/useForkRef.js");const is=Object.is;function fastObjectShallowCompare(a,b){if(a===b)return!0;if(!(a instanceof Object&&b instanceof Object))return!1;let aLength=0,bLength=0;for(const key in a){if(aLength+=1,!is(a[key],b[key]))return!1;if(!(key in b))return!1}for(const _ in b)bLength+=1;return aLength===bLength}function fastMemo(component){return react.memo(component,fastObjectShallowCompare)}var colorManipulator=__webpack_require__("./node_modules/@mui/system/esm/colorManipulator/colorManipulator.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),generateUtilityClass=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js"),generateUtilityClasses=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js");function getDataGridUtilityClass(slot){return(0,generateUtilityClass.ZP)("MuiDataGrid",slot)}const gridClasses=(0,generateUtilityClasses.Z)("MuiDataGrid",["actionsCell","aggregationColumnHeader","aggregationColumnHeader--alignLeft","aggregationColumnHeader--alignCenter","aggregationColumnHeader--alignRight","aggregationColumnHeaderLabel","autoHeight","autosizing","booleanCell","cell--editable","cell--editing","cell--flex","cell--textCenter","cell--textLeft","cell--textRight","cell--rangeTop","cell--rangeBottom","cell--rangeLeft","cell--rangeRight","cell--pinnedLeft","cell--pinnedRight","cell--selectionMode","cell","cellCheckbox","cellEmpty","cellSkeleton","cellOffsetLeft","checkboxInput","columnHeader","columnHeader--alignCenter","columnHeader--alignLeft","columnHeader--alignRight","columnHeader--dragging","columnHeader--moving","columnHeader--numeric","columnHeader--sortable","columnHeader--sorted","columnHeader--filtered","columnHeader--pinnedLeft","columnHeader--pinnedRight","columnHeader--last","columnHeader--lastUnpinned","columnHeader--siblingFocused","columnHeaderCheckbox","columnHeaderDraggableContainer","columnHeaderTitle","columnHeaderTitleContainer","columnHeaderTitleContainerContent","columnHeader--filledGroup","columnHeader--emptyGroup","columnHeaders","columnSeparator--resizable","columnSeparator--resizing","columnSeparator--sideLeft","columnSeparator--sideRight","columnSeparator","columnsManagement","columnsManagementRow","columnsManagementHeader","columnsManagementSearchInput","columnsManagementFooter","container--top","container--bottom","detailPanel","detailPanels","detailPanelToggleCell","detailPanelToggleCell--expanded","footerCell","panel","panelHeader","panelWrapper","panelContent","panelFooter","paper","editBooleanCell","editInputCell","filler","filler--borderBottom","filler--pinnedLeft","filler--pinnedRight","filterForm","filterFormDeleteIcon","filterFormLogicOperatorInput","filterFormColumnInput","filterFormOperatorInput","filterFormValueInput","filterIcon","footerContainer","headerFilterRow","iconButtonContainer","iconSeparator","main","main--hasPinnedRight","main--hasSkeletonLoadingOverlay","menu","menuIcon","menuIconButton","menuOpen","menuList","overlay","overlayWrapper","overlayWrapperInner","root","root--densityStandard","root--densityComfortable","root--densityCompact","root--disableUserSelection","root--noToolbar","row","row--editable","row--editing","row--firstVisible","row--lastVisible","row--dragging","row--dynamicHeight","row--detailPanelExpanded","row--borderBottom","rowReorderCellPlaceholder","rowCount","rowReorderCellContainer","rowReorderCell","rowReorderCell--draggable","rowSkeleton","scrollArea--left","scrollArea--right","scrollArea","scrollbar","scrollbar--vertical","scrollbar--horizontal","scrollbarFiller","scrollbarFiller--header","scrollbarFiller--borderTop","scrollbarFiller--borderBottom","scrollbarFiller--pinnedRight","selectedRowCount","sortIcon","toolbarContainer","toolbarFilterList","virtualScroller","virtualScroller--hasScrollX","virtualScrollerContent","virtualScrollerContent--overflowed","virtualScrollerRenderZone","pinnedColumns","withVerticalBorder","withBorderColor","cell--withRightBorder","cell--withLeftBorder","columnHeader--withRightBorder","columnHeader--withLeftBorder","treeDataGroupingCell","treeDataGroupingCellToggle","treeDataGroupingCellLoadingContainer","groupingCriteriaCell","groupingCriteriaCellToggle","groupingCriteriaCellLoadingContainer","pinnedRows","pinnedRows--top","pinnedRows--bottom","pinnedRowsRenderZone"]);var shim=__webpack_require__("./node_modules/use-sync-external-store/shim/index.js"),useLazyRef=__webpack_require__("./node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js");function isOutputSelector(selector){return selector.acceptsApiRef}function applySelector(apiRef,selector){return isOutputSelector(selector)?selector(apiRef):selector(apiRef.current.state)}function applySelectorV8(apiRef,selector,args,instanceId){return isOutputSelector(selector)?selector(apiRef,args):selector(apiRef.current.state,instanceId)}const defaultCompare=Object.is,objectShallowCompare=fastObjectShallowCompare,arrayShallowCompare=(a,b)=>a===b||a.length===b.length&&a.every(((v,i)=>v===b[i])),createRefs=()=>({state:null,equals:null,selector:null,args:void 0}),EMPTY=[],emptyGetSnapshot=()=>null,useGridSelector=(apiRef,selector,equals=defaultCompare)=>{const refs=(0,useLazyRef.Z)(createRefs),didInit=null!==refs.current.selector,[state,setState]=react.useState(didInit?null:applySelector(apiRef,selector));refs.current.state=state,refs.current.equals=equals,refs.current.selector=selector;const subscribe=react.useCallback((()=>(refs.current.subscription||(refs.current.subscription=apiRef.current.store.subscribe((()=>{const newState=applySelector(apiRef,refs.current.selector);refs.current.equals(refs.current.state,newState)||(refs.current.state=newState,setState(newState))}))),null)),EMPTY),unsubscribe=react.useCallback((()=>()=>{refs.current.subscription&&(refs.current.subscription(),refs.current.subscription=void 0)}),EMPTY);return(0,shim.useSyncExternalStore)(unsubscribe,subscribe,emptyGetSnapshot),state},useGridSelectorV8=(apiRef,selector,args=undefined,equals=defaultCompare)=>{const refs=(0,useLazyRef.Z)(createRefs),didInit=null!==refs.current.selector,[state,setState]=react.useState(didInit?null:applySelectorV8(apiRef,selector,args,apiRef.current.instanceId));refs.current.state=state,refs.current.equals=equals,refs.current.selector=selector;const prevArgs=refs.current.args;if(refs.current.args=args,didInit&&!((prev,curr)=>{let fn=Object.is;return curr instanceof Array?fn=arrayShallowCompare:curr instanceof Object&&(fn=objectShallowCompare),fn(prev,curr)})(prevArgs,args)){const newState=applySelectorV8(apiRef,refs.current.selector,refs.current.args,apiRef.current.instanceId);refs.current.equals(refs.current.state,newState)||(refs.current.state=newState,setState(newState))}const subscribe=react.useCallback((()=>(refs.current.subscription||(refs.current.subscription=apiRef.current.store.subscribe((()=>{const newState=applySelectorV8(apiRef,refs.current.selector,refs.current.args,apiRef.current.instanceId);refs.current.equals(refs.current.state,newState)||(refs.current.state=newState,setState(newState))}))),null)),EMPTY),unsubscribe=react.useCallback((()=>()=>{refs.current.subscription&&(refs.current.subscription(),refs.current.subscription=void 0)}),EMPTY);return(0,shim.useSyncExternalStore)(unsubscribe,subscribe,emptyGetSnapshot),state},GridPrivateApiContext=react.createContext(void 0);function useGridPrivateApiContext(){const privateApiRef=react.useContext(GridPrivateApiContext);if(void 0===privateApiRef)throw new Error(["MUI X: Could not find the Data Grid private context.","It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.","This can also happen if you are bundling multiple versions of the Data Grid."].join("\n"));return privateApiRef}const columnHeaderStyles={[`& .${gridClasses.iconButtonContainer}`]:{visibility:"visible",width:"auto"},[`& .${gridClasses.menuIcon}`]:{width:"auto",visibility:"visible"}},separatorIconDragStyles={width:3,rx:1.5,x:10.5},shouldShowBorderTopRightRadiusSelector=state=>state.dimensions.hasScrollX&&(!state.dimensions.hasScrollY||0===state.dimensions.scrollbarSize),GridRootStyles=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"Root",overridesResolver:(props,styles)=>[styles.root,{[`&.${gridClasses.autoHeight}`]:styles.autoHeight},{[`&.${gridClasses.autosizing}`]:styles.autosizing},{[`&.${gridClasses["root--densityStandard"]}`]:styles["root--densityStandard"]},{[`&.${gridClasses["root--densityComfortable"]}`]:styles["root--densityComfortable"]},{[`&.${gridClasses["root--densityCompact"]}`]:styles["root--densityCompact"]},{[`&.${gridClasses["root--disableUserSelection"]}`]:styles["root--disableUserSelection"]},{[`&.${gridClasses["root--noToolbar"]}`]:styles["root--noToolbar"]},{[`&.${gridClasses.withVerticalBorder}`]:styles.withVerticalBorder},{[`& .${gridClasses.actionsCell}`]:styles.actionsCell},{[`& .${gridClasses.booleanCell}`]:styles.booleanCell},{[`& .${gridClasses.cell}`]:styles.cell},{[`& .${gridClasses["cell--editable"]}`]:styles["cell--editable"]},{[`& .${gridClasses["cell--editing"]}`]:styles["cell--editing"]},{[`& .${gridClasses["cell--flex"]}`]:styles["cell--flex"]},{[`& .${gridClasses["cell--pinnedLeft"]}`]:styles["cell--pinnedLeft"]},{[`& .${gridClasses["cell--pinnedRight"]}`]:styles["cell--pinnedRight"]},{[`& .${gridClasses["cell--rangeBottom"]}`]:styles["cell--rangeBottom"]},{[`& .${gridClasses["cell--rangeLeft"]}`]:styles["cell--rangeLeft"]},{[`& .${gridClasses["cell--rangeRight"]}`]:styles["cell--rangeRight"]},{[`& .${gridClasses["cell--rangeTop"]}`]:styles["cell--rangeTop"]},{[`& .${gridClasses["cell--selectionMode"]}`]:styles["cell--selectionMode"]},{[`& .${gridClasses["cell--textCenter"]}`]:styles["cell--textCenter"]},{[`& .${gridClasses["cell--textLeft"]}`]:styles["cell--textLeft"]},{[`& .${gridClasses["cell--textRight"]}`]:styles["cell--textRight"]},{[`& .${gridClasses["cell--withLeftBorder"]}`]:styles["cell--withLeftBorder"]},{[`& .${gridClasses["cell--withRightBorder"]}`]:styles["cell--withRightBorder"]},{[`& .${gridClasses.cellCheckbox}`]:styles.cellCheckbox},{[`& .${gridClasses.cellEmpty}`]:styles.cellEmpty},{[`& .${gridClasses.cellOffsetLeft}`]:styles.cellOffsetLeft},{[`& .${gridClasses.cellSkeleton}`]:styles.cellSkeleton},{[`& .${gridClasses.checkboxInput}`]:styles.checkboxInput},{[`& .${gridClasses.columnHeader}`]:styles.columnHeader},{[`& .${gridClasses["columnHeader--alignCenter"]}`]:styles["columnHeader--alignCenter"]},{[`& .${gridClasses["columnHeader--alignLeft"]}`]:styles["columnHeader--alignLeft"]},{[`& .${gridClasses["columnHeader--alignRight"]}`]:styles["columnHeader--alignRight"]},{[`& .${gridClasses["columnHeader--dragging"]}`]:styles["columnHeader--dragging"]},{[`& .${gridClasses["columnHeader--emptyGroup"]}`]:styles["columnHeader--emptyGroup"]},{[`& .${gridClasses["columnHeader--filledGroup"]}`]:styles["columnHeader--filledGroup"]},{[`& .${gridClasses["columnHeader--filtered"]}`]:styles["columnHeader--filtered"]},{[`& .${gridClasses["columnHeader--last"]}`]:styles["columnHeader--last"]},{[`& .${gridClasses["columnHeader--lastUnpinned"]}`]:styles["columnHeader--lastUnpinned"]},{[`& .${gridClasses["columnHeader--moving"]}`]:styles["columnHeader--moving"]},{[`& .${gridClasses["columnHeader--numeric"]}`]:styles["columnHeader--numeric"]},{[`& .${gridClasses["columnHeader--pinnedLeft"]}`]:styles["columnHeader--pinnedLeft"]},{[`& .${gridClasses["columnHeader--pinnedRight"]}`]:styles["columnHeader--pinnedRight"]},{[`& .${gridClasses["columnHeader--siblingFocused"]}`]:styles["columnHeader--siblingFocused"]},{[`& .${gridClasses["columnHeader--sortable"]}`]:styles["columnHeader--sortable"]},{[`& .${gridClasses["columnHeader--sorted"]}`]:styles["columnHeader--sorted"]},{[`& .${gridClasses["columnHeader--withLeftBorder"]}`]:styles["columnHeader--withLeftBorder"]},{[`& .${gridClasses["columnHeader--withRightBorder"]}`]:styles["columnHeader--withRightBorder"]},{[`& .${gridClasses.columnHeaderCheckbox}`]:styles.columnHeaderCheckbox},{[`& .${gridClasses.columnHeaderDraggableContainer}`]:styles.columnHeaderDraggableContainer},{[`& .${gridClasses.columnHeaderTitleContainer}`]:styles.columnHeaderTitleContainer},{[`& .${gridClasses.columnHeaderTitleContainerContent}`]:styles.columnHeaderTitleContainerContent},{[`& .${gridClasses.columnSeparator}`]:styles.columnSeparator},{[`& .${gridClasses["columnSeparator--resizable"]}`]:styles["columnSeparator--resizable"]},{[`& .${gridClasses["columnSeparator--resizing"]}`]:styles["columnSeparator--resizing"]},{[`& .${gridClasses["columnSeparator--sideLeft"]}`]:styles["columnSeparator--sideLeft"]},{[`& .${gridClasses["columnSeparator--sideRight"]}`]:styles["columnSeparator--sideRight"]},{[`& .${gridClasses["container--bottom"]}`]:styles["container--bottom"]},{[`& .${gridClasses["container--top"]}`]:styles["container--top"]},{[`& .${gridClasses.detailPanelToggleCell}`]:styles.detailPanelToggleCell},{[`& .${gridClasses["detailPanelToggleCell--expanded"]}`]:styles["detailPanelToggleCell--expanded"]},{[`& .${gridClasses.editBooleanCell}`]:styles.editBooleanCell},{[`& .${gridClasses.filterIcon}`]:styles.filterIcon},{[`& .${gridClasses["filler--borderBottom"]}`]:styles["filler--borderBottom"]},{[`& .${gridClasses["filler--pinnedLeft"]}`]:styles["filler--pinnedLeft"]},{[`& .${gridClasses["filler--pinnedRight"]}`]:styles["filler--pinnedRight"]},{[`& .${gridClasses.groupingCriteriaCell}`]:styles.groupingCriteriaCell},{[`& .${gridClasses.groupingCriteriaCellLoadingContainer}`]:styles.groupingCriteriaCellLoadingContainer},{[`& .${gridClasses.groupingCriteriaCellToggle}`]:styles.groupingCriteriaCellToggle},{[`& .${gridClasses.headerFilterRow}`]:styles.headerFilterRow},{[`& .${gridClasses.iconSeparator}`]:styles.iconSeparator},{[`& .${gridClasses.menuIcon}`]:styles.menuIcon},{[`& .${gridClasses.menuIconButton}`]:styles.menuIconButton},{[`& .${gridClasses.menuList}`]:styles.menuList},{[`& .${gridClasses.menuOpen}`]:styles.menuOpen},{[`& .${gridClasses.overlayWrapperInner}`]:styles.overlayWrapperInner},{[`& .${gridClasses.pinnedRows}`]:styles.pinnedRows},{[`& .${gridClasses["pinnedRows--bottom"]}`]:styles["pinnedRows--bottom"]},{[`& .${gridClasses["pinnedRows--top"]}`]:styles["pinnedRows--top"]},{[`& .${gridClasses.row}`]:styles.row},{[`& .${gridClasses["row--borderBottom"]}`]:styles["row--borderBottom"]},{[`& .${gridClasses["row--detailPanelExpanded"]}`]:styles["row--detailPanelExpanded"]},{[`& .${gridClasses["row--dragging"]}`]:styles["row--dragging"]},{[`& .${gridClasses["row--dynamicHeight"]}`]:styles["row--dynamicHeight"]},{[`& .${gridClasses["row--editable"]}`]:styles["row--editable"]},{[`& .${gridClasses["row--editing"]}`]:styles["row--editing"]},{[`& .${gridClasses["row--firstVisible"]}`]:styles["row--firstVisible"]},{[`& .${gridClasses["row--lastVisible"]}`]:styles["row--lastVisible"]},{[`& .${gridClasses.rowReorderCell}`]:styles.rowReorderCell},{[`& .${gridClasses["rowReorderCell--draggable"]}`]:styles["rowReorderCell--draggable"]},{[`& .${gridClasses.rowReorderCellContainer}`]:styles.rowReorderCellContainer},{[`& .${gridClasses.rowReorderCellPlaceholder}`]:styles.rowReorderCellPlaceholder},{[`& .${gridClasses.rowSkeleton}`]:styles.rowSkeleton},{[`& .${gridClasses.scrollbar}`]:styles.scrollbar},{[`& .${gridClasses["scrollbar--horizontal"]}`]:styles["scrollbar--horizontal"]},{[`& .${gridClasses["scrollbar--vertical"]}`]:styles["scrollbar--vertical"]},{[`& .${gridClasses.scrollbarFiller}`]:styles.scrollbarFiller},{[`& .${gridClasses["scrollbarFiller--borderBottom"]}`]:styles["scrollbarFiller--borderBottom"]},{[`& .${gridClasses["scrollbarFiller--borderTop"]}`]:styles["scrollbarFiller--borderTop"]},{[`& .${gridClasses["scrollbarFiller--header"]}`]:styles["scrollbarFiller--header"]},{[`& .${gridClasses["scrollbarFiller--pinnedRight"]}`]:styles["scrollbarFiller--pinnedRight"]},{[`& .${gridClasses.sortIcon}`]:styles.sortIcon},{[`& .${gridClasses.treeDataGroupingCell}`]:styles.treeDataGroupingCell},{[`& .${gridClasses.treeDataGroupingCellLoadingContainer}`]:styles.treeDataGroupingCellLoadingContainer},{[`& .${gridClasses.treeDataGroupingCellToggle}`]:styles.treeDataGroupingCellToggle},{[`& .${gridClasses.withBorderColor}`]:styles.withBorderColor}]})((({theme:t})=>{const apiRef=useGridPrivateApiContext(),shouldShowBorderTopRightRadius=useGridSelector(apiRef,shouldShowBorderTopRightRadiusSelector),borderColor=function getBorderColor(theme){return theme.vars?theme.vars.palette.TableCell.border:"light"===theme.palette.mode?(0,colorManipulator.$n)((0,colorManipulator.Fq)(theme.palette.divider,1),.88):(0,colorManipulator._j)((0,colorManipulator.Fq)(theme.palette.divider,1),.68)}(t),radius=t.shape.borderRadius,containerBackground=t.vars?t.vars.palette.background.default:t.mixins.MuiDataGrid?.containerBackground??t.palette.background.default,pinnedBackground=t.mixins.MuiDataGrid?.pinnedBackground??containerBackground,overlayBackground=t.vars?`rgba(${t.vars.palette.background.defaultChannel} / ${t.vars.palette.action.disabledOpacity})`:(0,colorManipulator.Fq)(t.palette.background.default,t.palette.action.disabledOpacity),hoverOpacity=(t.vars||t).palette.action.hoverOpacity,hoverColor=(t.vars||t).palette.action.hover,selectedOpacity=(t.vars||t).palette.action.selectedOpacity,selectedHoverOpacity=t.vars?`calc(${hoverOpacity} + ${selectedOpacity})`:hoverOpacity+selectedOpacity,selectedBackground=t.vars?`rgba(${t.vars.palette.primary.mainChannel} / ${selectedOpacity})`:(0,colorManipulator.Fq)(t.palette.primary.main,selectedOpacity),selectedHoverBackground=t.vars?`rgba(${t.vars.palette.primary.mainChannel} / ${selectedHoverOpacity})`:(0,colorManipulator.Fq)(t.palette.primary.main,selectedHoverOpacity),blendFn=t.vars?blendCssVars:blend,getPinnedBackgroundStyles=backgroundColor=>({[`& .${gridClasses["cell--pinnedLeft"]}, & .${gridClasses["cell--pinnedRight"]}`]:{backgroundColor,"&.Mui-selected":{backgroundColor:blendFn(backgroundColor,selectedBackground,selectedOpacity),"&:hover":{backgroundColor:blendFn(backgroundColor,selectedBackground,selectedHoverOpacity)}}}}),pinnedHoverStyles=getPinnedBackgroundStyles(blendFn(pinnedBackground,hoverColor,hoverOpacity)),pinnedSelectedBackgroundColor=blendFn(pinnedBackground,selectedBackground,selectedOpacity),pinnedSelectedStyles=getPinnedBackgroundStyles(pinnedSelectedBackgroundColor),pinnedSelectedHoverStyles=getPinnedBackgroundStyles(blendFn(pinnedBackground,selectedHoverBackground,selectedHoverOpacity)),selectedStyles={backgroundColor:selectedBackground,"&:hover":{backgroundColor:selectedHoverBackground,"@media (hover: none)":{backgroundColor:selectedBackground}}};return(0,esm_extends.Z)({"--unstable_DataGrid-radius":"number"==typeof radius?`${radius}px`:radius,"--unstable_DataGrid-headWeight":t.typography.fontWeightMedium,"--unstable_DataGrid-overlayBackground":overlayBackground,"--DataGrid-containerBackground":containerBackground,"--DataGrid-pinnedBackground":pinnedBackground,"--DataGrid-rowBorderColor":borderColor,"--DataGrid-cellOffsetMultiplier":2,"--DataGrid-width":"0px","--DataGrid-hasScrollX":"0","--DataGrid-hasScrollY":"0","--DataGrid-scrollbarSize":"10px","--DataGrid-rowWidth":"0px","--DataGrid-columnsTotalWidth":"0px","--DataGrid-leftPinnedWidth":"0px","--DataGrid-rightPinnedWidth":"0px","--DataGrid-headerHeight":"0px","--DataGrid-headersTotalHeight":"0px","--DataGrid-topContainerHeight":"0px","--DataGrid-bottomContainerHeight":"0px",flex:1,boxSizing:"border-box",position:"relative",borderWidth:"1px",borderStyle:"solid",borderColor,borderRadius:"var(--unstable_DataGrid-radius)",color:(t.vars||t).palette.text.primary},t.typography.body2,{outline:"none",height:"100%",display:"flex",minWidth:0,minHeight:0,flexDirection:"column",overflow:"hidden",overflowAnchor:"none",[`.${gridClasses.main} > *:first-child/* emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason */`]:{borderTopLeftRadius:"var(--unstable_DataGrid-radius)",borderTopRightRadius:"var(--unstable_DataGrid-radius)"},[`&.${gridClasses.autoHeight}`]:{height:"auto"},[`&.${gridClasses.autosizing}`]:{[`& .${gridClasses.columnHeaderTitleContainerContent} > *`]:{overflow:"visible !important"},"@media (hover: hover)":{[`& .${gridClasses.menuIcon}`]:{width:"0 !important",visibility:"hidden !important"}},[`& .${gridClasses.cell}`]:{overflow:"visible !important",whiteSpace:"nowrap",minWidth:"max-content !important",maxWidth:"max-content !important"},[`& .${gridClasses.groupingCriteriaCell}`]:{width:"unset"},[`& .${gridClasses.treeDataGroupingCell}`]:{width:"unset"}},[`& .${gridClasses.columnHeader}, & .${gridClasses.cell}`]:{WebkitTapHighlightColor:"transparent",padding:"0 10px",boxSizing:"border-box"},[`& .${gridClasses.columnHeader}:focus-within, & .${gridClasses.cell}:focus-within`]:{outline:`solid ${t.vars?`rgba(${t.vars.palette.primary.mainChannel} / 0.5)`:(0,colorManipulator.Fq)(t.palette.primary.main,.5)} 1px`,outlineOffset:-1},[`& .${gridClasses.columnHeader}:focus, & .${gridClasses.cell}:focus`]:{outline:`solid ${t.palette.primary.main} 1px`,outlineOffset:-1},[`& .${gridClasses.columnHeader}:focus,\n      & .${gridClasses["columnHeader--withLeftBorder"]},\n      & .${gridClasses["columnHeader--withRightBorder"]},\n      & .${gridClasses["columnHeader--siblingFocused"]},\n      & .${gridClasses["virtualScroller--hasScrollX"]} .${gridClasses["columnHeader--lastUnpinned"]},\n      & .${gridClasses["virtualScroller--hasScrollX"]} .${gridClasses["columnHeader--last"]}\n      `]:{[`& .${gridClasses.columnSeparator}`]:{opacity:0},"@media (hover: none)":{[`& .${gridClasses["columnSeparator--resizable"]}`]:{opacity:1}},[`& .${gridClasses["columnSeparator--resizable"]}:hover`]:{opacity:1}},[`&.${gridClasses["root--noToolbar"]} [aria-rowindex="1"] [aria-colindex="1"]`]:{borderTopLeftRadius:"calc(var(--unstable_DataGrid-radius) - 1px)"},[`&.${gridClasses["root--noToolbar"]} [aria-rowindex="1"] .${gridClasses["columnHeader--last"]}`]:{borderTopRightRadius:shouldShowBorderTopRightRadius?"calc(var(--unstable_DataGrid-radius) - 1px)":void 0},[`& .${gridClasses.columnHeaderCheckbox}, & .${gridClasses.cellCheckbox}`]:{padding:0,justifyContent:"center",alignItems:"center"},[`& .${gridClasses.columnHeader}`]:{position:"relative",display:"flex",alignItems:"center"},[`& .${gridClasses["virtualScroller--hasScrollX"]} .${gridClasses["columnHeader--last"]}`]:{overflow:"hidden"},[`& .${gridClasses["columnHeader--sorted"]} .${gridClasses.iconButtonContainer}, & .${gridClasses["columnHeader--filtered"]} .${gridClasses.iconButtonContainer}`]:{visibility:"visible",width:"auto"},[`& .${gridClasses.columnHeader}:not(.${gridClasses["columnHeader--sorted"]}) .${gridClasses.sortIcon}`]:{opacity:0,transition:t.transitions.create(["opacity"],{duration:t.transitions.duration.shorter})},[`& .${gridClasses.columnHeaderTitleContainer}`]:{display:"flex",alignItems:"center",gap:t.spacing(.25),minWidth:0,flex:1,whiteSpace:"nowrap",overflow:"hidden"},[`& .${gridClasses.columnHeaderTitleContainerContent}`]:{overflow:"hidden",display:"flex",alignItems:"center"},[`& .${gridClasses["columnHeader--filledGroup"]} .${gridClasses.columnHeaderTitleContainer}`]:{borderBottomWidth:"1px",borderBottomStyle:"solid",boxSizing:"border-box"},[`& .${gridClasses.sortIcon}, & .${gridClasses.filterIcon}`]:{fontSize:"inherit"},[`& .${gridClasses["columnHeader--sortable"]}`]:{cursor:"pointer"},[`& .${gridClasses["columnHeader--alignCenter"]} .${gridClasses.columnHeaderTitleContainer}`]:{justifyContent:"center"},[`& .${gridClasses["columnHeader--alignRight"]} .${gridClasses.columnHeaderDraggableContainer}, & .${gridClasses["columnHeader--alignRight"]} .${gridClasses.columnHeaderTitleContainer}`]:{flexDirection:"row-reverse"},[`& .${gridClasses["columnHeader--alignCenter"]} .${gridClasses.menuIcon}`]:{marginLeft:"auto"},[`& .${gridClasses["columnHeader--alignRight"]} .${gridClasses.menuIcon}`]:{marginRight:"auto",marginLeft:-5},[`& .${gridClasses["columnHeader--moving"]}`]:{backgroundColor:(t.vars||t).palette.action.hover},[`& .${gridClasses["columnHeader--pinnedLeft"]}, & .${gridClasses["columnHeader--pinnedRight"]}`]:{position:"sticky",zIndex:4,background:"var(--DataGrid-pinnedBackground)"},[`& .${gridClasses.columnSeparator}`]:{position:"absolute",overflow:"hidden",zIndex:3,display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",maxWidth:10,color:borderColor},[`& .${gridClasses.columnHeaders}`]:{width:"var(--DataGrid-rowWidth)"},"@media (hover: hover)":{[`& .${gridClasses.columnHeader}:hover`]:columnHeaderStyles,[`& .${gridClasses.columnHeader}:not(.${gridClasses["columnHeader--sorted"]}):hover .${gridClasses.sortIcon}`]:{opacity:.5}},"@media (hover: none)":{[`& .${gridClasses.columnHeader}`]:columnHeaderStyles,[`& .${gridClasses.columnHeader}:focus,\n        & .${gridClasses["columnHeader--siblingFocused"]}`]:{[`.${gridClasses["columnSeparator--resizable"]}`]:{color:(t.vars||t).palette.primary.main}}},[`& .${gridClasses["columnSeparator--sideLeft"]}`]:{left:-5},[`& .${gridClasses["columnSeparator--sideRight"]}`]:{right:-5},[`& .${gridClasses["columnHeader--withRightBorder"]} .${gridClasses["columnSeparator--sideLeft"]}`]:{left:-5.5},[`& .${gridClasses["columnHeader--withRightBorder"]} .${gridClasses["columnSeparator--sideRight"]}`]:{right:-5.5},[`& .${gridClasses["columnSeparator--resizable"]}`]:{cursor:"col-resize",touchAction:"none",[`&.${gridClasses["columnSeparator--resizing"]}`]:{color:(t.vars||t).palette.primary.main},"@media (hover: none)":{[`& .${gridClasses.iconSeparator} rect`]:separatorIconDragStyles},"@media (hover: hover)":{"&:hover":{color:(t.vars||t).palette.primary.main,[`& .${gridClasses.iconSeparator} rect`]:separatorIconDragStyles}},"& svg":{pointerEvents:"none"}},[`& .${gridClasses.iconSeparator}`]:{color:"inherit",transition:t.transitions.create(["color","width"],{duration:t.transitions.duration.shortest})},[`& .${gridClasses.menuIcon}`]:{width:0,visibility:"hidden",fontSize:20,marginRight:-5,display:"flex",alignItems:"center"},[`.${gridClasses.menuOpen}`]:{visibility:"visible",width:"auto"},[`& .${gridClasses.headerFilterRow}`]:{[`& .${gridClasses.columnHeader}`]:{boxSizing:"border-box",borderBottom:"1px solid var(--DataGrid-rowBorderColor)"}},[`& .${gridClasses["row--borderBottom"]} .${gridClasses.columnHeader},\n      & .${gridClasses["row--borderBottom"]} .${gridClasses.filler},\n      & .${gridClasses["row--borderBottom"]} .${gridClasses.scrollbarFiller}`]:{borderBottom:"1px solid var(--DataGrid-rowBorderColor)"},[`& .${gridClasses["row--borderBottom"]} .${gridClasses.cell}`]:{borderBottom:"1px solid var(--rowBorderColor)"},[`.${gridClasses.row}`]:{display:"flex",width:"var(--DataGrid-rowWidth)",breakInside:"avoid","--rowBorderColor":"var(--DataGrid-rowBorderColor)",[`&.${gridClasses["row--firstVisible"]}`]:{"--rowBorderColor":"transparent"},"&:hover":{backgroundColor:(t.vars||t).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${gridClasses.rowSkeleton}:hover`]:{backgroundColor:"transparent"},"&.Mui-selected":selectedStyles},[`& .${gridClasses["container--top"]}, & .${gridClasses["container--bottom"]}`]:{"[role=row]":{background:"var(--DataGrid-containerBackground)"}},[`& .${gridClasses.cell}`]:{flex:"0 0 auto",height:"var(--height)",width:"var(--width)",lineHeight:"calc(var(--height) - 1px)",boxSizing:"border-box",borderTop:"1px solid var(--rowBorderColor)",overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis","&.Mui-selected":selectedStyles},[`& .${gridClasses["virtualScrollerContent--overflowed"]} .${gridClasses["row--lastVisible"]} .${gridClasses.cell}`]:{borderTopColor:"transparent"},[`& .${gridClasses["pinnedRows--top"]} :first-of-type`]:{[`& .${gridClasses.cell}, .${gridClasses.scrollbarFiller}`]:{borderTop:"none"}},[`&.${gridClasses["root--disableUserSelection"]} .${gridClasses.cell}`]:{userSelect:"none"},[`& .${gridClasses["row--dynamicHeight"]} > .${gridClasses.cell}`]:{whiteSpace:"initial",lineHeight:"inherit"},[`& .${gridClasses.cellEmpty}`]:{flex:1,padding:0,height:"unset"},[`& .${gridClasses.cell}.${gridClasses["cell--selectionMode"]}`]:{cursor:"default"},[`& .${gridClasses.cell}.${gridClasses["cell--editing"]}`]:{padding:1,display:"flex",boxShadow:t.shadows[2],backgroundColor:(t.vars||t).palette.background.paper,"&:focus-within":{outline:`1px solid ${(t.vars||t).palette.primary.main}`,outlineOffset:-1}},[`& .${gridClasses["row--editing"]}`]:{boxShadow:t.shadows[2]},[`& .${gridClasses["row--editing"]} .${gridClasses.cell}`]:{boxShadow:t.shadows[0],backgroundColor:(t.vars||t).palette.background.paper},[`& .${gridClasses.editBooleanCell}`]:{display:"flex",height:"100%",width:"100%",alignItems:"center",justifyContent:"center"},[`& .${gridClasses.booleanCell}[data-value="true"]`]:{color:(t.vars||t).palette.text.secondary},[`& .${gridClasses.booleanCell}[data-value="false"]`]:{color:(t.vars||t).palette.text.disabled},[`& .${gridClasses.actionsCell}`]:{display:"inline-flex",alignItems:"center",gridGap:t.spacing(1)},[`& .${gridClasses.rowReorderCell}`]:{display:"inline-flex",flex:1,alignItems:"center",justifyContent:"center",opacity:(t.vars||t).palette.action.disabledOpacity},[`& .${gridClasses["rowReorderCell--draggable"]}`]:{cursor:"move",opacity:1},[`& .${gridClasses.rowReorderCellContainer}`]:{padding:0,display:"flex",alignItems:"stretch"},[`.${gridClasses.withBorderColor}`]:{borderColor},[`& .${gridClasses["cell--withLeftBorder"]}, & .${gridClasses["columnHeader--withLeftBorder"]}`]:{borderLeftColor:"var(--DataGrid-rowBorderColor)",borderLeftWidth:"1px",borderLeftStyle:"solid"},[`& .${gridClasses["cell--withRightBorder"]}, & .${gridClasses["columnHeader--withRightBorder"]}`]:{borderRightColor:"var(--DataGrid-rowBorderColor)",borderRightWidth:"1px",borderRightStyle:"solid"},[`& .${gridClasses["cell--flex"]}`]:{display:"flex",alignItems:"center",lineHeight:"inherit"},[`& .${gridClasses["cell--textLeft"]}`]:{textAlign:"left",justifyContent:"flex-start"},[`& .${gridClasses["cell--textRight"]}`]:{textAlign:"right",justifyContent:"flex-end"},[`& .${gridClasses["cell--textCenter"]}`]:{textAlign:"center",justifyContent:"center"},[`& .${gridClasses["cell--pinnedLeft"]}, & .${gridClasses["cell--pinnedRight"]}`]:{position:"sticky",zIndex:3,background:"var(--DataGrid-pinnedBackground)","&.Mui-selected":{backgroundColor:pinnedSelectedBackgroundColor}},[`& .${gridClasses.virtualScrollerContent} .${gridClasses.row}`]:{"&:hover":pinnedHoverStyles,"&.Mui-selected":pinnedSelectedStyles,"&.Mui-selected:hover":pinnedSelectedHoverStyles},[`& .${gridClasses.cellOffsetLeft}`]:{flex:"0 0 auto",display:"inline-block"},[`& .${gridClasses.cellSkeleton}`]:{flex:"0 0 auto",height:"100%",display:"inline-flex",alignItems:"center"},[`& .${gridClasses.columnHeaderDraggableContainer}`]:{display:"flex",width:"100%",height:"100%"},[`& .${gridClasses.rowReorderCellPlaceholder}`]:{display:"none"},[`& .${gridClasses["columnHeader--dragging"]}, & .${gridClasses["row--dragging"]}`]:{background:(t.vars||t).palette.background.paper,padding:"0 12px",borderRadius:"var(--unstable_DataGrid-radius)",opacity:(t.vars||t).palette.action.disabledOpacity},[`& .${gridClasses["row--dragging"]}`]:{background:(t.vars||t).palette.background.paper,padding:"0 12px",borderRadius:"var(--unstable_DataGrid-radius)",opacity:(t.vars||t).palette.action.disabledOpacity,[`& .${gridClasses.rowReorderCellPlaceholder}`]:{display:"flex"}},[`& .${gridClasses.treeDataGroupingCell}`]:{display:"flex",alignItems:"center",width:"100%"},[`& .${gridClasses.treeDataGroupingCellToggle}`]:{flex:"0 0 28px",alignSelf:"stretch",marginRight:t.spacing(2)},[`& .${gridClasses.treeDataGroupingCellLoadingContainer}, .${gridClasses.groupingCriteriaCellLoadingContainer}`]:{display:"flex",alignItems:"center",justifyContent:"center",height:"100%"},[`& .${gridClasses.groupingCriteriaCell}`]:{display:"flex",alignItems:"center",width:"100%"},[`& .${gridClasses.groupingCriteriaCellToggle}`]:{flex:"0 0 28px",alignSelf:"stretch",marginRight:t.spacing(2)},[`.${gridClasses.scrollbarFiller}`]:{minWidth:"calc(var(--DataGrid-hasScrollY) * var(--DataGrid-scrollbarSize))",alignSelf:"stretch",[`&.${gridClasses["scrollbarFiller--borderTop"]}`]:{borderTop:"1px solid var(--DataGrid-rowBorderColor)"},[`&.${gridClasses["scrollbarFiller--borderBottom"]}`]:{borderBottom:"1px solid var(--DataGrid-rowBorderColor)"},[`&.${gridClasses["scrollbarFiller--pinnedRight"]}`]:{backgroundColor:"var(--DataGrid-pinnedBackground)",position:"sticky",right:0}},[`& .${gridClasses.filler}`]:{flex:"1 0 auto"},[`& .${gridClasses["filler--borderBottom"]}`]:{borderBottom:"1px solid var(--DataGrid-rowBorderColor)"},[`& .${gridClasses["main--hasSkeletonLoadingOverlay"]}`]:{[`& .${gridClasses.virtualScrollerContent}`]:{position:"fixed",visibility:"hidden"},[`& .${gridClasses["scrollbar--vertical"]}, & .${gridClasses.pinnedRows}, & .${gridClasses.virtualScroller} > .${gridClasses.filler}`]:{display:"none"}}})}));function blend(background,overlay,opacity,gamma=1){const f=(b,o)=>Math.round((b**(1/gamma)*(1-opacity)+o**(1/gamma)*opacity)**gamma),backgroundColor=(0,colorManipulator.tB)(background),overlayColor=(0,colorManipulator.tB)(overlay),rgb=[f(backgroundColor.values[0],overlayColor.values[0]),f(backgroundColor.values[1],overlayColor.values[1]),f(backgroundColor.values[2],overlayColor.values[2])];return(0,colorManipulator.wy)({type:"rgb",values:rgb})}const removeOpacity=color=>`rgb(from ${color} r g b / 1)`;function blendCssVars(background,overlay,opacity){return`color-mix(in srgb,${background}, ${removeOpacity(overlay)} calc(${opacity} * 100%))`}const GridRootPropsContext=react.createContext(void 0);const useGridRootProps=()=>{const contextValue=react.useContext(GridRootPropsContext);if(!contextValue)throw new Error("MUI X: useGridRootProps should only be used inside the DataGrid, DataGridPro or DataGridPremium component.");return contextValue};var NOT_FOUND=Symbol("NOT_FOUND");function assertIsFunction(func,errorMessage="expected a function, instead received "+typeof func){if("function"!=typeof func)throw new TypeError(errorMessage)}var ensureIsArray=item=>Array.isArray(item)?item:[item];function getDependencies(createSelectorArgs){const dependencies=Array.isArray(createSelectorArgs[0])?createSelectorArgs[0]:createSelectorArgs;return function assertIsArrayOfFunctions(array,errorMessage="expected all items to be functions, instead received the following types: "){if(!array.every((item=>"function"==typeof item))){const itemTypes=array.map((item=>"function"==typeof item?`function ${item.name||"unnamed"}()`:typeof item)).join(", ");throw new TypeError(`${errorMessage}[${itemTypes}]`)}}(dependencies,"createSelector expects all input-selectors to be functions, but received the following types: "),dependencies}Symbol(),Object.getPrototypeOf({});var referenceEqualityCheck=(a,b)=>a===b;function createCacheKeyComparator(equalityCheck){return function areArgumentsShallowlyEqual(prev,next){if(null===prev||null===next||prev.length!==next.length)return!1;const{length}=prev;for(let i=0;i<length;i++)if(!equalityCheck(prev[i],next[i]))return!1;return!0}}function lruMemoize(func,equalityCheckOrOptions){const providedOptions="object"==typeof equalityCheckOrOptions?equalityCheckOrOptions:{equalityCheck:equalityCheckOrOptions},{equalityCheck=referenceEqualityCheck,maxSize=1,resultEqualityCheck}=providedOptions,comparator=createCacheKeyComparator(equalityCheck);let resultsCount=0;const cache=maxSize<=1?function createSingletonCache(equals){let entry;return{get:key=>entry&&equals(entry.key,key)?entry.value:NOT_FOUND,put(key,value){entry={key,value}},getEntries:()=>entry?[entry]:[],clear(){entry=void 0}}}(comparator):function createLruCache(maxSize,equals){let entries=[];function get(key){const cacheIndex=entries.findIndex((entry=>equals(key,entry.key)));if(cacheIndex>-1){const entry=entries[cacheIndex];return cacheIndex>0&&(entries.splice(cacheIndex,1),entries.unshift(entry)),entry.value}return NOT_FOUND}return{get,put:function put(key,value){get(key)===NOT_FOUND&&(entries.unshift({key,value}),entries.length>maxSize&&entries.pop())},getEntries:function getEntries(){return entries},clear:function clear(){entries=[]}}}(maxSize,comparator);function memoized(){let value=cache.get(arguments);if(value===NOT_FOUND){if(value=func.apply(null,arguments),resultsCount++,resultEqualityCheck){const matchingEntry=cache.getEntries().find((entry=>resultEqualityCheck(entry.value,value)));matchingEntry&&(value=matchingEntry.value,0!==resultsCount&&resultsCount--)}cache.put(arguments,value)}return value}return memoized.clearCache=()=>{cache.clear(),memoized.resetResultsCount()},memoized.resultsCount=()=>resultsCount,memoized.resetResultsCount=()=>{resultsCount=0},memoized}var Ref="undefined"!=typeof WeakRef?WeakRef:class{constructor(value){this.value=value}deref(){return this.value}},UNTERMINATED=0,TERMINATED=1;function createCacheNode(){return{s:UNTERMINATED,v:void 0,o:null,p:null}}function weakMapMemoize(func,options={}){let fnNode=createCacheNode();const{resultEqualityCheck}=options;let lastResult,resultsCount=0;function memoized(){let cacheNode=fnNode;const{length}=arguments;for(let i=0,l=length;i<l;i++){const arg=arguments[i];if("function"==typeof arg||"object"==typeof arg&&null!==arg){let objectCache=cacheNode.o;null===objectCache&&(cacheNode.o=objectCache=new WeakMap);const objectNode=objectCache.get(arg);void 0===objectNode?(cacheNode=createCacheNode(),objectCache.set(arg,cacheNode)):cacheNode=objectNode}else{let primitiveCache=cacheNode.p;null===primitiveCache&&(cacheNode.p=primitiveCache=new Map);const primitiveNode=primitiveCache.get(arg);void 0===primitiveNode?(cacheNode=createCacheNode(),primitiveCache.set(arg,cacheNode)):cacheNode=primitiveNode}}const terminatedNode=cacheNode;let result;if(cacheNode.s===TERMINATED)result=cacheNode.v;else if(result=func.apply(null,arguments),resultsCount++,resultEqualityCheck){const lastResultValue=lastResult?.deref?.()??lastResult;null!=lastResultValue&&resultEqualityCheck(lastResultValue,result)&&(result=lastResultValue,0!==resultsCount&&resultsCount--);lastResult="object"==typeof result&&null!==result||"function"==typeof result?new Ref(result):result}return terminatedNode.s=TERMINATED,terminatedNode.v=result,result}return memoized.clearCache=()=>{fnNode=createCacheNode(),memoized.resetResultsCount()},memoized.resultsCount=()=>resultsCount,memoized.resetResultsCount=()=>{resultsCount=0},memoized}function createSelectorCreator(memoizeOrOptions,...memoizeOptionsFromArgs){const createSelectorCreatorOptions="function"==typeof memoizeOrOptions?{memoize:memoizeOrOptions,memoizeOptions:memoizeOptionsFromArgs}:memoizeOrOptions,createSelector2=(...createSelectorArgs)=>{let lastResult,recomputations=0,dependencyRecomputations=0,directlyPassedOptions={},resultFunc=createSelectorArgs.pop();"object"==typeof resultFunc&&(directlyPassedOptions=resultFunc,resultFunc=createSelectorArgs.pop()),assertIsFunction(resultFunc,`createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`);const combinedOptions={...createSelectorCreatorOptions,...directlyPassedOptions},{memoize,memoizeOptions=[],argsMemoize=weakMapMemoize,argsMemoizeOptions=[],devModeChecks={}}=combinedOptions,finalMemoizeOptions=ensureIsArray(memoizeOptions),finalArgsMemoizeOptions=ensureIsArray(argsMemoizeOptions),dependencies=getDependencies(createSelectorArgs),memoizedResultFunc=memoize((function recomputationWrapper(){return recomputations++,resultFunc.apply(null,arguments)}),...finalMemoizeOptions);const selector=argsMemoize((function dependenciesChecker(){dependencyRecomputations++;const inputSelectorResults=function collectInputSelectorResults(dependencies,inputSelectorArgs){const inputSelectorResults=[],{length}=dependencies;for(let i=0;i<length;i++)inputSelectorResults.push(dependencies[i].apply(null,inputSelectorArgs));return inputSelectorResults}(dependencies,arguments);return lastResult=memoizedResultFunc.apply(null,inputSelectorResults),lastResult}),...finalArgsMemoizeOptions);return Object.assign(selector,{resultFunc,memoizedResultFunc,dependencies,dependencyRecomputations:()=>dependencyRecomputations,resetDependencyRecomputations:()=>{dependencyRecomputations=0},lastResult:()=>lastResult,recomputations:()=>recomputations,resetRecomputations:()=>{recomputations=0},memoize,argsMemoize})};return Object.assign(createSelector2,{withTypes:()=>createSelector2}),createSelector2}var createSelector=createSelectorCreator(weakMapMemoize),createStructuredSelector=Object.assign(((inputSelectorsObject,selectorCreator=createSelector)=>{!function assertIsObject(object,errorMessage="expected an object, instead received "+typeof object){if("object"!=typeof object)throw new TypeError(errorMessage)}(inputSelectorsObject,"createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+typeof inputSelectorsObject);const inputSelectorKeys=Object.keys(inputSelectorsObject);return selectorCreator(inputSelectorKeys.map((key=>inputSelectorsObject[key])),((...inputSelectorResults)=>inputSelectorResults.reduce(((composition,value,index)=>(composition[inputSelectorKeys[index]]=value,composition)),{})))}),{withTypes:()=>createStructuredSelector});const reselectCreateSelector=createSelectorCreator({memoize:lruMemoize,memoizeOptions:{maxSize:1,equalityCheck:Object.is}}),cache=new WeakMap;function checkIsAPIRef(value){return"current"in value&&"instanceId"in value.current}const DEFAULT_INSTANCE_ID={id:"default"},createSelector_createSelector=(a,b,c,d,e,f,...other)=>{if(other.length>0)throw new Error("Unsupported number of selectors");let selector;if(a&&b&&c&&d&&e&&f)selector=(stateOrApiRef,instanceIdParam)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),instanceId=instanceIdParam??(isAPIRef?stateOrApiRef.current.instanceId:DEFAULT_INSTANCE_ID),state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef,va=a(state,instanceId),vb=b(state,instanceId),vc=c(state,instanceId),vd=d(state,instanceId),ve=e(state,instanceId);return f(va,vb,vc,vd,ve)};else if(a&&b&&c&&d&&e)selector=(stateOrApiRef,instanceIdParam)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),instanceId=instanceIdParam??(isAPIRef?stateOrApiRef.current.instanceId:DEFAULT_INSTANCE_ID),state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef,va=a(state,instanceId),vb=b(state,instanceId),vc=c(state,instanceId),vd=d(state,instanceId);return e(va,vb,vc,vd)};else if(a&&b&&c&&d)selector=(stateOrApiRef,instanceIdParam)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),instanceId=instanceIdParam??(isAPIRef?stateOrApiRef.current.instanceId:DEFAULT_INSTANCE_ID),state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef,va=a(state,instanceId),vb=b(state,instanceId),vc=c(state,instanceId);return d(va,vb,vc)};else if(a&&b&&c)selector=(stateOrApiRef,instanceIdParam)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),instanceId=instanceIdParam??(isAPIRef?stateOrApiRef.current.instanceId:DEFAULT_INSTANCE_ID),state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef,va=a(state,instanceId),vb=b(state,instanceId);return c(va,vb)};else{if(!a||!b)throw new Error("Missing arguments");selector=(stateOrApiRef,instanceIdParam)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),instanceId=instanceIdParam??(isAPIRef?stateOrApiRef.current.instanceId:DEFAULT_INSTANCE_ID),state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef,va=a(state,instanceId);return b(va)}}return selector.acceptsApiRef=!0,selector},createSelectorV8=(a,b,c,d,e,f,...other)=>{if(other.length>0)throw new Error("Unsupported number of selectors");let selector;if(a&&b&&c&&d&&e&&f)selector=(stateOrApiRef,args,instanceIdParam)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),instanceId=instanceIdParam??(isAPIRef?stateOrApiRef.current.instanceId:DEFAULT_INSTANCE_ID),state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef,va=a(state,args,instanceId),vb=b(state,args,instanceId),vc=c(state,args,instanceId),vd=d(state,args,instanceId),ve=e(state,args,instanceId);return f(va,vb,vc,vd,ve,args)};else if(a&&b&&c&&d&&e)selector=(stateOrApiRef,args,instanceIdParam)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),instanceId=instanceIdParam??(isAPIRef?stateOrApiRef.current.instanceId:DEFAULT_INSTANCE_ID),state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef,va=a(state,args,instanceId),vb=b(state,args,instanceId),vc=c(state,args,instanceId),vd=d(state,args,instanceId);return e(va,vb,vc,vd,args)};else if(a&&b&&c&&d)selector=(stateOrApiRef,args,instanceIdParam)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),instanceId=instanceIdParam??(isAPIRef?stateOrApiRef.current.instanceId:DEFAULT_INSTANCE_ID),state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef,va=a(state,args,instanceId),vb=b(state,args,instanceId),vc=c(state,args,instanceId);return d(va,vb,vc,args)};else if(a&&b&&c)selector=(stateOrApiRef,args,instanceIdParam)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),instanceId=instanceIdParam??(isAPIRef?stateOrApiRef.current.instanceId:DEFAULT_INSTANCE_ID),state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef,va=a(state,args,instanceId),vb=b(state,args,instanceId);return c(va,vb,args)};else{if(!a||!b)throw new Error("Missing arguments");selector=(stateOrApiRef,args,instanceIdParam)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),instanceId=instanceIdParam??(isAPIRef?stateOrApiRef.current.instanceId:DEFAULT_INSTANCE_ID),state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef,va=a(state,args,instanceId);return b(va,args)}}return selector.acceptsApiRef=!0,selector},createSelectorMemoized=(...args)=>{const selector=(stateOrApiRef,instanceId)=>{const isAPIRef=checkIsAPIRef(stateOrApiRef),cacheKey=isAPIRef?stateOrApiRef.current.instanceId:instanceId??DEFAULT_INSTANCE_ID,state=isAPIRef?stateOrApiRef.current.state:stateOrApiRef;const cacheArgsInit=cache.get(cacheKey),cacheArgs=cacheArgsInit??new Map,cacheFn=cacheArgs?.get(args);if(cacheArgs&&cacheFn)return cacheFn(state,cacheKey);const fn=reselectCreateSelector(...args);return cacheArgsInit||cache.set(cacheKey,cacheArgs),cacheArgs.set(args,fn),fn(state,cacheKey)};return selector.acceptsApiRef=!0,selector},DENSITY_FACTORS={compact:.7,comfortable:1.3,standard:1},gridDensitySelector=state=>state.density,gridDensityFactorSelector=createSelector_createSelector(gridDensitySelector,(density=>DENSITY_FACTORS[density])),emptySubscribe=()=>()=>{},clientSnapshot=()=>!1,serverSnapshot=()=>!0;let GridPinnedColumnPosition=function(GridPinnedColumnPosition){return GridPinnedColumnPosition.LEFT="left",GridPinnedColumnPosition.RIGHT="right",GridPinnedColumnPosition}({});const EMPTY_PINNED_COLUMN_FIELDS={left:[],right:[]},gridColumnsStateSelector=state=>state.columns,gridColumnFieldsSelector=createSelector_createSelector(gridColumnsStateSelector,(columnsState=>columnsState.orderedFields)),gridColumnLookupSelector=createSelector_createSelector(gridColumnsStateSelector,(columnsState=>columnsState.lookup)),gridColumnDefinitionsSelector=createSelectorMemoized(gridColumnFieldsSelector,gridColumnLookupSelector,((allFields,lookup)=>allFields.map((field=>lookup[field])))),gridColumnVisibilityModelSelector=createSelector_createSelector(gridColumnsStateSelector,(columnsState=>columnsState.columnVisibilityModel)),gridVisibleColumnDefinitionsSelector=createSelectorMemoized(gridColumnDefinitionsSelector,gridColumnVisibilityModelSelector,((columns,columnVisibilityModel)=>columns.filter((column=>!1!==columnVisibilityModel[column.field])))),gridVisibleColumnFieldsSelector=createSelectorMemoized(gridVisibleColumnDefinitionsSelector,(visibleColumns=>visibleColumns.map((column=>column.field)))),gridVisiblePinnedColumnDefinitionsSelector=createSelectorMemoized(gridColumnsStateSelector,(state=>state.pinnedColumns),gridVisibleColumnFieldsSelector,(state=>state.isRtl),((columnsState,model,visibleColumnFields,isRtl)=>{const visiblePinnedFields=function filterVisibleColumns(pinnedColumns,columns,invert){if(!Array.isArray(pinnedColumns.left)&&!Array.isArray(pinnedColumns.right))return EMPTY_PINNED_COLUMN_FIELDS;if(0===pinnedColumns.left?.length&&0===pinnedColumns.right?.length)return EMPTY_PINNED_COLUMN_FIELDS;const filter=(newPinnedColumns,remainingColumns)=>Array.isArray(newPinnedColumns)?newPinnedColumns.filter((field=>remainingColumns.includes(field))):[],leftPinnedColumns=filter(pinnedColumns.left,columns),columnsWithoutLeftPinnedColumns=columns.filter((field=>!leftPinnedColumns.includes(field))),rightPinnedColumns=filter(pinnedColumns.right,columnsWithoutLeftPinnedColumns);if(invert)return{left:rightPinnedColumns,right:leftPinnedColumns};return{left:leftPinnedColumns,right:rightPinnedColumns}}(model,visibleColumnFields,isRtl);return{left:visiblePinnedFields.left.map((field=>columnsState.lookup[field])),right:visiblePinnedFields.right.map((field=>columnsState.lookup[field]))}}));const gridColumnPositionsSelector=createSelectorMemoized(gridVisibleColumnDefinitionsSelector,(visibleColumns=>{const positions=[];let currentPosition=0;for(let i=0;i<visibleColumns.length;i+=1)positions.push(currentPosition),currentPosition+=visibleColumns[i].computedWidth;return positions})),gridFilterableColumnDefinitionsSelector=createSelectorMemoized(gridColumnDefinitionsSelector,(columns=>columns.filter((col=>col.filterable)))),gridFilterableColumnLookupSelector=createSelectorMemoized(gridColumnDefinitionsSelector,(columns=>columns.reduce(((acc,col)=>(col.filterable&&(acc[col.field]=col),acc)),{}))),gridHasColSpanSelector=createSelectorMemoized(gridColumnDefinitionsSelector,(columns=>columns.some((column=>void 0!==column.colSpan)))),gridPreferencePanelStateSelector=state=>state.preferencePanel,gridPreferencePanelSelectorWithLabel=createSelectorV8(gridPreferencePanelStateSelector,((panel,labelId)=>!(!panel.open||panel.labelId!==labelId)));var GridPreferencePanelsValue=function(GridPreferencePanelsValue){return GridPreferencePanelsValue.filters="filters",GridPreferencePanelsValue.columns="columns",GridPreferencePanelsValue}(GridPreferencePanelsValue||{});const GridApiContext=react.createContext(void 0);function useGridApiContext(){const apiRef=react.useContext(GridApiContext);if(void 0===apiRef)throw new Error(["MUI X: Could not find the Data Grid context.","It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.","This can also happen if you are bundling multiple versions of the Data Grid."].join("\n"));return apiRef}var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function GridPreferencesPanel(){const apiRef=useGridApiContext(),columns=useGridSelector(apiRef,gridColumnDefinitionsSelector),rootProps=useGridRootProps(),preferencePanelState=useGridSelector(apiRef,gridPreferencePanelStateSelector),panelContent=apiRef.current.unstable_applyPipeProcessors("preferencePanel",null,preferencePanelState.openedPanelValue??GridPreferencePanelsValue.filters);return(0,jsx_runtime.jsx)(rootProps.slots.panel,(0,esm_extends.Z)({as:rootProps.slots.basePopper,open:columns.length>0&&preferencePanelState.open,id:preferencePanelState.panelId,"aria-labelledby":preferencePanelState.labelId},rootProps.slotProps?.panel,rootProps.slotProps?.basePopper,{children:panelContent}))}function GridHeader(){const rootProps=useGridRootProps();return(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(GridPreferencesPanel,{}),rootProps.slots.toolbar&&(0,jsx_runtime.jsx)(rootProps.slots.toolbar,(0,esm_extends.Z)({},rootProps.slotProps?.toolbar))]})}var styled_styled=__webpack_require__("./node_modules/@mui/system/esm/styled/styled.js");const gridDimensionsSelector=state=>state.dimensions,gridColumnsTotalWidthSelector=createSelector_createSelector(gridDimensionsSelector,(dimensions=>dimensions.columnsTotalWidth)),gridRowHeightSelector=state=>state.dimensions.rowHeight,gridContentHeightSelector=state=>state.dimensions.contentSize.height,gridHasScrollXSelector=state=>state.dimensions.hasScrollX,gridHasScrollYSelector=state=>state.dimensions.hasScrollY,gridHasFillerSelector=state=>state.dimensions.columnsTotalWidth<state.dimensions.viewportOuterSize.width,gridHeaderHeightSelector=state=>state.dimensions.headerHeight,gridGroupHeaderHeightSelector=state=>state.dimensions.groupHeaderHeight,gridVerticalScrollbarWidthSelector=state=>state.dimensions.hasScrollY?state.dimensions.scrollbarSize:0,gridHasBottomFillerSelector=state=>{const height=state.dimensions.hasScrollX?state.dimensions.scrollbarSize:0,needsLastRowBorder=state.dimensions.viewportOuterSize.height-state.dimensions.minimumSize.height>0;return!(0===height&&!needsLastRowBorder)};var useEventCallback=__webpack_require__("./node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js");class TimerBasedCleanupTracking{constructor(timeout=1e3){this.timeouts=new Map,this.cleanupTimeout=1e3,this.cleanupTimeout=timeout}register(object,unsubscribe,unregisterToken){this.timeouts||(this.timeouts=new Map);const timeout=setTimeout((()=>{"function"==typeof unsubscribe&&unsubscribe(),this.timeouts.delete(unregisterToken.cleanupToken)}),this.cleanupTimeout);this.timeouts.set(unregisterToken.cleanupToken,timeout)}unregister(unregisterToken){const timeout=this.timeouts.get(unregisterToken.cleanupToken);timeout&&(this.timeouts.delete(unregisterToken.cleanupToken),clearTimeout(timeout))}reset(){this.timeouts&&(this.timeouts.forEach(((value,key)=>{this.unregister({cleanupToken:key})})),this.timeouts=void 0)}}class FinalizationRegistryBasedCleanupTracking{constructor(){this.registry=new FinalizationRegistry((unsubscribe=>{"function"==typeof unsubscribe&&unsubscribe()}))}register(object,unsubscribe,unregisterToken){this.registry.register(object,unsubscribe,unregisterToken)}unregister(unregisterToken){this.registry.unregister(unregisterToken)}reset(){}}var GridSignature=function(GridSignature){return GridSignature.DataGrid="DataGrid",GridSignature.DataGridPro="DataGridPro",GridSignature.DataGridPremium="DataGridPremium",GridSignature}(GridSignature||{});class ObjectToBeRetainedByReact{}const registryContainer={registry:null},useGridApiEventHandler=function createUseGridApiEventHandler(registryContainer){let cleanupTokensCounter=0;return function useGridApiEventHandler(apiRef,eventName,handler,options){null===registryContainer.registry&&(registryContainer.registry="undefined"!=typeof FinalizationRegistry?new FinalizationRegistryBasedCleanupTracking:new TimerBasedCleanupTracking);const[objectRetainedByReact]=react.useState(new ObjectToBeRetainedByReact),subscription=react.useRef(null),handlerRef=react.useRef(null);handlerRef.current=handler;const cleanupTokenRef=react.useRef(null);if(!subscription.current&&handlerRef.current){const enhancedHandler=(params,event,details)=>{event.defaultMuiPrevented||handlerRef.current?.(params,event,details)};subscription.current=apiRef.current.subscribeEvent(eventName,enhancedHandler,options),cleanupTokensCounter+=1,cleanupTokenRef.current={cleanupToken:cleanupTokensCounter},registryContainer.registry.register(objectRetainedByReact,(()=>{subscription.current?.(),subscription.current=null,cleanupTokenRef.current=null}),cleanupTokenRef.current)}else!handlerRef.current&&subscription.current&&(subscription.current(),subscription.current=null,cleanupTokenRef.current&&(registryContainer.registry.unregister(cleanupTokenRef.current),cleanupTokenRef.current=null));react.useEffect((()=>{if(!subscription.current&&handlerRef.current){const enhancedHandler=(params,event,details)=>{event.defaultMuiPrevented||handlerRef.current?.(params,event,details)};subscription.current=apiRef.current.subscribeEvent(eventName,enhancedHandler,options)}return cleanupTokenRef.current&&registryContainer.registry&&(registryContainer.registry.unregister(cleanupTokenRef.current),cleanupTokenRef.current=null),()=>{subscription.current?.(),subscription.current=null}}),[apiRef,eventName,options])}}(registryContainer),optionsSubscriberOptions={isFirst:!0};function useGridApiOptionHandler(apiRef,eventName,handler){useGridApiEventHandler(apiRef,eventName,handler,optionsSubscriberOptions)}var useTimeout=__webpack_require__("./node_modules/@mui/utils/esm/useTimeout/useTimeout.js"),resolveProps=__webpack_require__("./node_modules/@mui/utils/esm/resolveProps/resolveProps.js"),useEnhancedEffect=__webpack_require__("./node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js"),InputBase=__webpack_require__("./node_modules/@mui/material/InputBase/InputBase.js");const _excluded=["id","value","formattedValue","api","field","row","rowNode","colDef","cellMode","isEditable","tabIndex","hasFocus","isValidating","debounceMs","isProcessingProps","onValueChange"],GridEditInputCellRoot=(0,styled.ZP)(InputBase.ZP,{name:"MuiDataGrid",slot:"EditInputCell",overridesResolver:(props,styles)=>styles.editInputCell})((({theme})=>(0,esm_extends.Z)({},theme.typography.body2,{padding:"1px 0","& input":{padding:"0 16px",height:"100%"}}))),GridEditInputCell=forwardRef(((props,ref)=>{const rootProps=useGridRootProps(),{id,value,field,colDef,hasFocus,debounceMs=200,isProcessingProps,onValueChange}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,_excluded),apiRef=useGridApiContext(),inputRef=react.useRef(null),[valueState,setValueState]=react.useState(value),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["editInputCell"]},getDataGridUtilityClass,classes)})(rootProps),handleChange=react.useCallback((async event=>{const newValue=event.target.value;onValueChange&&await onValueChange(event,newValue);const column=apiRef.current.getColumn(field);let parsedValue=newValue;column.valueParser&&(parsedValue=column.valueParser(newValue,apiRef.current.getRow(id),column,apiRef)),setValueState(parsedValue),apiRef.current.setEditCellValue({id,field,value:parsedValue,debounceMs,unstable_skipValueParser:!0},event)}),[apiRef,debounceMs,field,id,onValueChange]),meta=apiRef.current.unstable_getEditCellMeta(id,field);return react.useEffect((()=>{"debouncedSetEditCellValue"!==meta?.changeReason&&setValueState(value)}),[meta,value]),(0,useEnhancedEffect.Z)((()=>{hasFocus&&inputRef.current.focus()}),[hasFocus]),(0,jsx_runtime.jsx)(GridEditInputCellRoot,(0,esm_extends.Z)({inputRef,className:classes.root,ownerState:rootProps,fullWidth:!0,type:"number"===colDef.type?colDef.type:"text",value:valueState??"",onChange:handleChange,endAdornment:isProcessingProps?(0,jsx_runtime.jsx)(rootProps.slots.loadIcon,{fontSize:"small",color:"action"}):void 0},other,{ref}))})),gridRowsStateSelector=state=>state.rows,gridRowCountSelector=createSelector_createSelector(gridRowsStateSelector,(rows=>rows.totalRowCount)),gridRowsLoadingSelector=createSelector_createSelector(gridRowsStateSelector,(rows=>rows.loading)),gridTopLevelRowCountSelector=createSelector_createSelector(gridRowsStateSelector,(rows=>rows.totalTopLevelRowCount)),gridRowsLookupSelector=createSelector_createSelector(gridRowsStateSelector,(rows=>rows.dataRowIdToModelLookup)),gridRowsDataRowIdToIdLookupSelector=createSelector_createSelector(gridRowsStateSelector,(rows=>rows.dataRowIdToIdLookup)),gridRowTreeSelector=createSelector_createSelector(gridRowsStateSelector,(rows=>rows.tree)),gridRowGroupsToFetchSelector=createSelector_createSelector(gridRowsStateSelector,(rows=>rows.groupsToFetch)),gridRowGroupingNameSelector=createSelector_createSelector(gridRowsStateSelector,(rows=>rows.groupingName)),gridRowTreeDepthsSelector=createSelector_createSelector(gridRowsStateSelector,(rows=>rows.treeDepths)),gridRowMaximumTreeDepthSelector=createSelectorMemoized(gridRowsStateSelector,(rows=>{const entries=Object.entries(rows.treeDepths);return 0===entries.length?1:(entries.filter((([,nodeCount])=>nodeCount>0)).map((([depth])=>Number(depth))).sort(((a,b)=>b-a))[0]??0)+1})),gridDataRowIdsSelector=createSelector_createSelector(gridRowsStateSelector,(rows=>rows.dataRowIds)),gridPinnedRowsSelector=createSelectorMemoized(createSelector_createSelector(gridRowsStateSelector,(rows=>rows?.additionalRowGroups)),(additionalRowGroups=>{const rawPinnedRows=additionalRowGroups?.pinnedRows;return{bottom:rawPinnedRows?.bottom?.map((rowEntry=>({id:rowEntry.id,model:rowEntry.model??{}})))??[],top:rawPinnedRows?.top?.map((rowEntry=>({id:rowEntry.id,model:rowEntry.model??{}})))??[]}})),gridPinnedRowsCountSelector=createSelector_createSelector(gridPinnedRowsSelector,(pinnedRows=>(pinnedRows?.top?.length||0)+(pinnedRows?.bottom?.length||0))),sanitizeSortModel=(model,disableMultipleColumnsSorting)=>disableMultipleColumnsSorting&&model.length>1?[model[0]]:model,mergeStateWithSortModel=(sortModel,disableMultipleColumnsSorting)=>state=>(0,esm_extends.Z)({},state,{sorting:(0,esm_extends.Z)({},state.sorting,{sortModel:sanitizeSortModel(sortModel,disableMultipleColumnsSorting)})}),buildAggregatedSortingApplier=(sortModel,apiRef)=>{const comparatorList=sortModel.map((item=>((sortItem,apiRef)=>{const column=apiRef.current.getColumn(sortItem.field);if(!column||null===sortItem.sort)return null;let comparator;return comparator=column.getSortComparator?column.getSortComparator(sortItem.sort):"desc"===sortItem.sort?(...args)=>-1*column.sortComparator(...args):column.sortComparator,comparator?{getSortCellParams:id=>({id,field:column.field,rowNode:gridRowTreeSelector(apiRef)[id],value:apiRef.current.getCellValue(id,column.field),api:apiRef.current}),comparator}:null})(item,apiRef))).filter((comparator=>!!comparator));return 0===comparatorList.length?null:rowList=>rowList.map((node=>({node,params:comparatorList.map((el=>el.getSortCellParams(node.id)))}))).sort(((a,b)=>{return row1=a,row2=b,comparatorList.reduce(((res,item,index)=>{if(0!==res)return res;const sortCellParams1=row1.params[index],sortCellParams2=row2.params[index];return item.comparator(sortCellParams1.value,sortCellParams2.value,sortCellParams1,sortCellParams2)}),0);var row1,row2})).map((row=>row.node.id))},getNextGridSortDirection=(sortingOrder,current)=>{const currentIdx=sortingOrder.indexOf(current);return current&&-1!==currentIdx&&currentIdx+1!==sortingOrder.length?sortingOrder[currentIdx+1]:sortingOrder[0]},gridNillComparator=(v1,v2)=>null==v1&&null!=v2?-1:null==v2&&null!=v1?1:null==v1&&null==v2?0:null,collator=new Intl.Collator,gridNumberComparator=(value1,value2)=>{const nillResult=gridNillComparator(value1,value2);return null!==nillResult?nillResult:Number(value1)-Number(value2)},gridDateComparator=(value1,value2)=>{const nillResult=gridNillComparator(value1,value2);return null!==nillResult?nillResult:value1>value2?1:value1<value2?-1:0};var useId=__webpack_require__("./node_modules/@mui/utils/esm/useId/useId.js");const GridFilterInputValue_excluded=["item","applyValue","type","apiRef","focusElementRef","tabIndex","disabled","isFilterActive","clearButton","InputProps","variant"];function GridFilterInputValue(props){const{item,applyValue,type,apiRef,focusElementRef,tabIndex,disabled,clearButton,InputProps,variant="standard"}=props,others=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputValue_excluded),filterTimeout=(0,useTimeout.Z)(),[filterValueState,setFilterValueState]=react.useState(sanitizeFilterItemValue(item.value)),[applying,setIsApplying]=react.useState(!1),id=(0,useId.Z)(),rootProps=useGridRootProps(),onFilterChange=react.useCallback((event=>{const value=sanitizeFilterItemValue(event.target.value);setFilterValueState(value),setIsApplying(!0),filterTimeout.start(rootProps.filterDebounceMs,(()=>{const newItem=(0,esm_extends.Z)({},item,{value:"number"!==type||Number.isNaN(Number(value))?value:Number(value),fromInput:id});applyValue(newItem),setIsApplying(!1)}))}),[filterTimeout,rootProps.filterDebounceMs,item,type,id,applyValue]);return react.useEffect((()=>{item.fromInput===id&&null!=item.value||setFilterValueState(sanitizeFilterItemValue(item.value))}),[id,item]),(0,jsx_runtime.jsx)(rootProps.slots.baseTextField,(0,esm_extends.Z)({id,label:apiRef.current.getLocaleText("filterPanelInputLabel"),placeholder:apiRef.current.getLocaleText("filterPanelInputPlaceholder"),value:filterValueState??"",onChange:onFilterChange,variant,type:type||"text",InputProps:(0,esm_extends.Z)({},applying||clearButton?{endAdornment:applying?(0,jsx_runtime.jsx)(rootProps.slots.loadIcon,{fontSize:"small",color:"action"}):clearButton}:{},{disabled},InputProps,{inputProps:(0,esm_extends.Z)({tabIndex},InputProps?.inputProps)}),InputLabelProps:{shrink:!0},inputRef:focusElementRef},others,rootProps.slotProps?.baseTextField))}function sanitizeFilterItemValue(value){if(null!=value&&""!==value)return String(value)}function isObject(value){return"object"==typeof value&&null!==value}function escapeRegExp(value){return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}const clamp=(value,min,max)=>Math.max(min,Math.min(max,value));function range(from,to){return Array.from({length:to-from}).map(((_,i)=>from+i))}function isDeepEqual(a,b){if(a===b)return!0;if(a&&b&&"object"==typeof a&&"object"==typeof b){if(a.constructor!==b.constructor)return!1;if(Array.isArray(a)){const length=a.length;if(length!==b.length)return!1;for(let i=0;i<length;i+=1)if(!isDeepEqual(a[i],b[i]))return!1;return!0}if(a instanceof Map&&b instanceof Map){if(a.size!==b.size)return!1;const entriesA=Array.from(a.entries());for(let i=0;i<entriesA.length;i+=1)if(!b.has(entriesA[i][0]))return!1;for(let i=0;i<entriesA.length;i+=1){const entryA=entriesA[i];if(!isDeepEqual(entryA[1],b.get(entryA[0])))return!1}return!0}if(a instanceof Set&&b instanceof Set){if(a.size!==b.size)return!1;const entries=Array.from(a.entries());for(let i=0;i<entries.length;i+=1)if(!b.has(entries[i][0]))return!1;return!0}if(ArrayBuffer.isView(a)&&ArrayBuffer.isView(b)){const length=a.length;if(length!==b.length)return!1;for(let i=0;i<length;i+=1)if(a[i]!==b[i])return!1;return!0}if(a.constructor===RegExp)return a.source===b.source&&a.flags===b.flags;if(a.valueOf!==Object.prototype.valueOf)return a.valueOf()===b.valueOf();if(a.toString!==Object.prototype.toString)return a.toString()===b.toString();const keys=Object.keys(a),length=keys.length;if(length!==Object.keys(b).length)return!1;for(let i=0;i<length;i+=1)if(!Object.prototype.hasOwnProperty.call(b,keys[i]))return!1;for(let i=0;i<length;i+=1){const key=keys[i];if(!isDeepEqual(a[key],b[key]))return!1}return!0}return a!=a&&b!=b}function deepClone(obj){return"function"==typeof structuredClone?structuredClone(obj):JSON.parse(JSON.stringify(obj))}const runIf=(condition,fn)=>params=>{condition&&fn(params)};var Autocomplete=__webpack_require__("./node_modules/@mui/material/Autocomplete/Autocomplete.js");const GridFilterInputMultipleValue_excluded=["item","applyValue","type","apiRef","focusElementRef","color","error","helperText","size","variant"],_excluded2=["key"];function GridFilterInputMultipleValue(props){const{item,applyValue,type,apiRef,focusElementRef,color,error,helperText,size,variant="standard"}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputMultipleValue_excluded),TextFieldProps={color,error,helperText,size,variant},[filterValueState,setFilterValueState]=react.useState(item.value||[]),id=(0,useId.Z)(),rootProps=useGridRootProps();react.useEffect((()=>{const itemValue=item.value??[];setFilterValueState(itemValue.map(String))}),[item.value]);const handleChange=react.useCallback(((event,value)=>{setFilterValueState(value.map(String)),applyValue((0,esm_extends.Z)({},item,{value:[...value.map((filterItemValue=>"number"===type?Number(filterItemValue):filterItemValue))]}))}),[applyValue,item,type]);return(0,jsx_runtime.jsx)(Autocomplete.Z,(0,esm_extends.Z)({multiple:!0,freeSolo:!0,options:[],filterOptions:(options,params)=>{const{inputValue}=params;return null==inputValue||""===inputValue?[]:[inputValue]},id,value:filterValueState,onChange:handleChange,renderTags:(value,getTagProps)=>value.map(((option,index)=>{const _getTagProps=getTagProps({index}),{key}=_getTagProps,tagProps=(0,objectWithoutPropertiesLoose.Z)(_getTagProps,_excluded2);return(0,jsx_runtime.jsx)(rootProps.slots.baseChip,(0,esm_extends.Z)({variant:"outlined",size:"small",label:option},tagProps),key)})),renderInput:params=>(0,jsx_runtime.jsx)(rootProps.slots.baseTextField,(0,esm_extends.Z)({},params,{label:apiRef.current.getLocaleText("filterPanelInputLabel"),placeholder:apiRef.current.getLocaleText("filterPanelInputPlaceholder"),InputLabelProps:(0,esm_extends.Z)({},params.InputLabelProps,{shrink:!0}),inputRef:focusElementRef,type:type||"text"},TextFieldProps,rootProps.slotProps?.baseTextField))},other))}var GridLogicOperator=function(GridLogicOperator){return GridLogicOperator.And="and",GridLogicOperator.Or="or",GridLogicOperator}(GridLogicOperator||{});const defaultGridFilterLookup={filteredRowsLookup:{},filteredChildrenCountLookup:{},filteredDescendantCountLookup:{}},getDefaultGridFilterModel=()=>({items:[],logicOperator:GridLogicOperator.And,quickFilterValues:[],quickFilterLogicOperator:GridLogicOperator.And});function getPublicApiRef(apiRef){return{current:apiRef.current.getPublicApi()}}let hasEval;const cleanFilterItem=(item,apiRef)=>{const cleanItem=(0,esm_extends.Z)({},item);if(null==cleanItem.id&&(cleanItem.id=Math.round(1e5*Math.random())),null==cleanItem.operator){const column=gridColumnLookupSelector(apiRef)[cleanItem.field];cleanItem.operator=column&&column.filterOperators[0].value}return cleanItem},sanitizeFilterModel=(model,disableMultipleColumnsFiltering,apiRef)=>{const hasSeveralItems=model.items.length>1;let items;items=hasSeveralItems&&disableMultipleColumnsFiltering?[model.items[0]]:model.items;const hasItemsWithoutIds=hasSeveralItems&&items.some((item=>null==item.id));return items.some((item=>null==item.operator))||hasItemsWithoutIds?(0,esm_extends.Z)({},model,{items:items.map((item=>cleanFilterItem(item,apiRef)))}):model.items!==items?(0,esm_extends.Z)({},model,{items}):model},mergeStateWithFilterModel=(filterModel,disableMultipleColumnsFiltering,apiRef)=>filteringState=>(0,esm_extends.Z)({},filteringState,{filterModel:sanitizeFilterModel(filterModel,disableMultipleColumnsFiltering,apiRef)}),removeDiacritics=value=>"string"==typeof value?value.normalize("NFD").replace(/[\u0300-\u036f]/g,""):value,getFilterCallbackFromItem=(filterItem,apiRef)=>{if(!filterItem.field||!filterItem.operator)return null;const column=apiRef.current.getColumn(filterItem.field);if(!column)return null;let parsedValue;if(column.valueParser){const parser=column.valueParser;parsedValue=Array.isArray(filterItem.value)?filterItem.value?.map((x=>parser(x,void 0,column,apiRef))):parser(filterItem.value,void 0,column,apiRef)}else parsedValue=filterItem.value;const{ignoreDiacritics}=apiRef.current.rootProps;ignoreDiacritics&&(parsedValue=removeDiacritics(parsedValue));const newFilterItem=(0,esm_extends.Z)({},filterItem,{value:parsedValue}),filterOperators=column.filterOperators;if(!filterOperators?.length)throw new Error(`MUI X: No filter operators found for column '${column.field}'.`);const filterOperator=filterOperators.find((operator=>operator.value===newFilterItem.operator));if(!filterOperator)throw new Error(`MUI X: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operator}'.`);const publicApiRef=getPublicApiRef(apiRef),applyFilterOnRow=filterOperator.getApplyFilterFn(newFilterItem,column);return"function"!=typeof applyFilterOnRow?null:{item:newFilterItem,fn:row=>{let value=apiRef.current.getRowValue(row,column);return ignoreDiacritics&&(value=removeDiacritics(value)),applyFilterOnRow(value,row,column,publicApiRef)}}};let filterItemsApplierId=1;const buildAggregatedFilterItemsApplier=(filterModel,apiRef,disableEval)=>{const{items}=filterModel,appliers=items.map((item=>getFilterCallbackFromItem(item,apiRef))).filter((callback=>!!callback));if(0===appliers.length)return null;if(disableEval||!function getHasEval(){if(void 0!==hasEval)return hasEval;try{hasEval=new Function("return true")()}catch(_){hasEval=!1}return hasEval}())return(row,shouldApplyFilter)=>{const resultPerItemId={};for(let i=0;i<appliers.length;i+=1){const applier=appliers[i];shouldApplyFilter&&!shouldApplyFilter(applier.item.field)||(resultPerItemId[applier.item.id]=applier.fn(row))}return resultPerItemId};const filterItemCore=new Function("appliers","row","shouldApplyFilter",`"use strict";\n${appliers.map(((applier,i)=>`const shouldApply${i} = !shouldApplyFilter || shouldApplyFilter(${JSON.stringify(applier.item.field)});`)).join("\n")}\n\nconst result$$ = {\n${appliers.map(((applier,i)=>`  ${JSON.stringify(String(applier.item.id))}: !shouldApply${i} ? false : appliers[${i}].fn(row),`)).join("\n")}\n};\n\nreturn result$$;`.replaceAll("$$",String(filterItemsApplierId)));filterItemsApplierId+=1;return(row,shouldApplyItem)=>filterItemCore(appliers,row,shouldApplyItem)},shouldQuickFilterExcludeHiddenColumns=filterModel=>filterModel.quickFilterExcludeHiddenColumns??!0,buildAggregatedFilterApplier=(filterModel,apiRef,disableEval)=>{const isRowMatchingFilterItems=buildAggregatedFilterItemsApplier(filterModel,apiRef,disableEval),isRowMatchingQuickFilter=((filterModel,apiRef)=>{const quickFilterValues=filterModel.quickFilterValues?.filter(Boolean)??[];if(0===quickFilterValues.length)return null;const columnFields=shouldQuickFilterExcludeHiddenColumns(filterModel)?gridVisibleColumnFieldsSelector(apiRef):gridColumnFieldsSelector(apiRef),appliersPerField=[],{ignoreDiacritics}=apiRef.current.rootProps,publicApiRef=getPublicApiRef(apiRef);return columnFields.forEach((field=>{const column=apiRef.current.getColumn(field),getApplyQuickFilterFn=column?.getApplyQuickFilterFn;getApplyQuickFilterFn&&appliersPerField.push({column,appliers:quickFilterValues.map((quickFilterValue=>{const value=ignoreDiacritics?removeDiacritics(quickFilterValue):quickFilterValue;return{fn:getApplyQuickFilterFn(value,column,publicApiRef)}}))})})),function isRowMatchingQuickFilter(row,shouldApplyFilter){const result={};outer:for(let v=0;v<quickFilterValues.length;v+=1){const filterValue=quickFilterValues[v];for(let i=0;i<appliersPerField.length;i+=1){const{column,appliers}=appliersPerField[i],{field}=column;if(shouldApplyFilter&&!shouldApplyFilter(field))continue;const applier=appliers[v];let value=apiRef.current.getRowValue(row,column);if(null!==applier.fn&&(ignoreDiacritics&&(value=removeDiacritics(value)),applier.fn(value,row,column,publicApiRef))){result[filterValue]=!0;continue outer}}result[filterValue]=!1}return result}})(filterModel,apiRef);return function isRowMatchingFilters(row,shouldApplyFilter,result){result.passingFilterItems=isRowMatchingFilterItems?.(row,shouldApplyFilter)??null,result.passingQuickFilterValues=isRowMatchingQuickFilter?.(row,shouldApplyFilter)??null}},isNotNull=result=>null!=result,passFilterLogic=(allFilterItemResults,allQuickFilterResults,filterModel,apiRef,cache)=>{const cleanedFilterItems=((cache,apiRef,items)=>(cache.cleanedFilterItems||(cache.cleanedFilterItems=items.filter((item=>null!==getFilterCallbackFromItem(item,apiRef)))),cache.cleanedFilterItems))(cache,apiRef,filterModel.items),cleanedFilterItemResults=allFilterItemResults.filter(isNotNull),cleanedQuickFilterResults=allQuickFilterResults.filter(isNotNull);if(cleanedFilterItemResults.length>0){const filterItemPredicate=item=>cleanedFilterItemResults.some((filterItemResult=>filterItemResult[item.id]));if((filterModel.logicOperator??getDefaultGridFilterModel().logicOperator)===GridLogicOperator.And){if(!cleanedFilterItems.every(filterItemPredicate))return!1}else{if(!cleanedFilterItems.some(filterItemPredicate))return!1}}if(cleanedQuickFilterResults.length>0&&null!=filterModel.quickFilterValues){const quickFilterValuePredicate=value=>cleanedQuickFilterResults.some((quickFilterValueResult=>quickFilterValueResult[value]));if((filterModel.quickFilterLogicOperator??getDefaultGridFilterModel().quickFilterLogicOperator)===GridLogicOperator.And){if(!filterModel.quickFilterValues.every(quickFilterValuePredicate))return!1}else{if(!filterModel.quickFilterValues.some(quickFilterValuePredicate))return!1}}return!0},createContainsFilterFn=(disableTrim,negate)=>filterItem=>{if(!filterItem.value)return null;const trimmedValue=disableTrim?filterItem.value:filterItem.value.trim(),filterRegex=new RegExp(escapeRegExp(trimmedValue),"i");return value=>{if(null==value)return negate;const matches=filterRegex.test(String(value));return negate?!matches:matches}},createEqualityFilterFn=(disableTrim,negate)=>filterItem=>{if(!filterItem.value)return null;const trimmedValue=disableTrim?filterItem.value:filterItem.value.trim(),collator=new Intl.Collator(void 0,{sensitivity:"base",usage:"search"});return value=>{if(null==value)return negate;const isEqual=0===collator.compare(trimmedValue,value.toString());return negate?!isEqual:isEqual}},createEmptyFilterFn=negate=>()=>value=>{const isEmpty=""===value||null==value;return negate?!isEmpty:isEmpty},GRID_STRING_COL_DEF={width:100,minWidth:50,maxWidth:1/0,hideable:!0,sortable:!0,resizable:!0,filterable:!0,groupable:!0,pinnable:!0,aggregable:!0,editable:!1,sortComparator:(value1,value2)=>{const nillResult=gridNillComparator(value1,value2);return null!==nillResult?nillResult:"string"==typeof value1?collator.compare(value1.toString(),value2.toString()):value1-value2},type:"string",align:"left",filterOperators:((disableTrim=!1)=>[{value:"contains",getApplyFilterFn:createContainsFilterFn(disableTrim,!1),InputComponent:GridFilterInputValue},{value:"doesNotContain",getApplyFilterFn:createContainsFilterFn(disableTrim,!0),InputComponent:GridFilterInputValue},{value:"equals",getApplyFilterFn:createEqualityFilterFn(disableTrim,!1),InputComponent:GridFilterInputValue},{value:"doesNotEqual",getApplyFilterFn:createEqualityFilterFn(disableTrim,!0),InputComponent:GridFilterInputValue},{value:"startsWith",getApplyFilterFn:filterItem=>{if(!filterItem.value)return null;const filterItemValue=disableTrim?filterItem.value:filterItem.value.trim(),filterRegex=new RegExp(`^${escapeRegExp(filterItemValue)}.*$`,"i");return value=>null!=value&&filterRegex.test(value.toString())},InputComponent:GridFilterInputValue},{value:"endsWith",getApplyFilterFn:filterItem=>{if(!filterItem.value)return null;const filterItemValue=disableTrim?filterItem.value:filterItem.value.trim(),filterRegex=new RegExp(`.*${escapeRegExp(filterItemValue)}$`,"i");return value=>null!=value&&filterRegex.test(value.toString())},InputComponent:GridFilterInputValue},{value:"isEmpty",getApplyFilterFn:createEmptyFilterFn(!1),requiresFilterValue:!1},{value:"isNotEmpty",getApplyFilterFn:createEmptyFilterFn(!0),requiresFilterValue:!1},{value:"isAnyOf",getApplyFilterFn:filterItem=>{if(!Array.isArray(filterItem.value)||0===filterItem.value.length)return null;const filterItemValue=disableTrim?filterItem.value:filterItem.value.map((val=>val.trim())),collator=new Intl.Collator(void 0,{sensitivity:"base",usage:"search"});return value=>null!=value&&filterItemValue.some((filterValue=>0===collator.compare(filterValue,value.toString()||"")))},InputComponent:GridFilterInputMultipleValue}])(),renderEditCell:params=>(0,jsx_runtime.jsx)(GridEditInputCell,(0,esm_extends.Z)({},params)),getApplyQuickFilterFn:value=>{if(!value)return null;const filterRegex=new RegExp(escapeRegExp(value),"i");return(_,row,column,apiRef)=>{let columnValue=apiRef.current.getRowFormattedValue(row,column);return apiRef.current.ignoreDiacritics&&(columnValue=removeDiacritics(columnValue)),null!=columnValue&&filterRegex.test(columnValue.toString())}}},parseNumericValue=value=>null==value?null:Number(value),GRID_NUMERIC_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"number",align:"right",headerAlign:"right",sortComparator:gridNumberComparator,valueParser:value=>""===value?null:Number(value),valueFormatter:value=>function isNumber(value){return"number"==typeof value&&!Number.isNaN(value)}(value)?value.toLocaleString():value||"",filterOperators:[{value:"=",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:value=>parseNumericValue(value)===filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:"!=",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:value=>parseNumericValue(value)!==filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:">",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:value=>null!=value&&parseNumericValue(value)>filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:">=",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:value=>null!=value&&parseNumericValue(value)>=filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:"<",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:value=>null!=value&&parseNumericValue(value)<filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:"<=",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:value=>null!=value&&parseNumericValue(value)<=filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:"isEmpty",getApplyFilterFn:()=>value=>null==value,requiresFilterValue:!1},{value:"isNotEmpty",getApplyFilterFn:()=>value=>null!=value,requiresFilterValue:!1},{value:"isAnyOf",getApplyFilterFn:filterItem=>Array.isArray(filterItem.value)&&0!==filterItem.value.length?value=>null!=value&&filterItem.value.includes(Number(value)):null,InputComponent:GridFilterInputMultipleValue,InputComponentProps:{type:"number"}}],getApplyQuickFilterFn:value=>null==value||Number.isNaN(value)||""===value?null:columnValue=>parseNumericValue(columnValue)===parseNumericValue(value)}),GridFilterInputDate_excluded=["item","applyValue","type","apiRef","focusElementRef","InputProps","isFilterActive","clearButton","tabIndex","disabled"];function convertFilterItemValueToInputValue(itemValue,inputType){if(null==itemValue)return"";const dateCopy=new Date(itemValue);return Number.isNaN(dateCopy.getTime())?"":"date"===inputType?dateCopy.toISOString().substring(0,10):"datetime-local"===inputType?(dateCopy.setMinutes(dateCopy.getMinutes()-dateCopy.getTimezoneOffset()),dateCopy.toISOString().substring(0,19)):dateCopy.toISOString().substring(0,10)}function GridFilterInputDate(props){const{item,applyValue,type,apiRef,focusElementRef,InputProps,clearButton,tabIndex,disabled}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputDate_excluded),filterTimeout=(0,useTimeout.Z)(),[filterValueState,setFilterValueState]=react.useState((()=>convertFilterItemValueToInputValue(item.value,type))),[applying,setIsApplying]=react.useState(!1),id=(0,useId.Z)(),rootProps=useGridRootProps(),onFilterChange=react.useCallback((event=>{filterTimeout.clear();const value=event.target.value;setFilterValueState(value),setIsApplying(!0),filterTimeout.start(rootProps.filterDebounceMs,(()=>{const date=new Date(value);applyValue((0,esm_extends.Z)({},item,{value:Number.isNaN(date.getTime())?void 0:date})),setIsApplying(!1)}))}),[applyValue,item,rootProps.filterDebounceMs,filterTimeout]);return react.useEffect((()=>{const value=convertFilterItemValueToInputValue(item.value,type);setFilterValueState(value)}),[item.value,type]),(0,jsx_runtime.jsx)(rootProps.slots.baseTextField,(0,esm_extends.Z)({fullWidth:!0,id,label:apiRef.current.getLocaleText("filterPanelInputLabel"),placeholder:apiRef.current.getLocaleText("filterPanelInputPlaceholder"),value:filterValueState,onChange:onFilterChange,variant:"standard",type:type||"text",InputLabelProps:{shrink:!0},inputRef:focusElementRef,InputProps:(0,esm_extends.Z)({},applying||clearButton?{endAdornment:applying?(0,jsx_runtime.jsx)(rootProps.slots.loadIcon,{fontSize:"small",color:"action"}):clearButton}:{},{disabled},InputProps,{inputProps:(0,esm_extends.Z)({max:"datetime-local"===type?"9999-12-31T23:59":"9999-12-31",tabIndex},InputProps?.inputProps)})},other,rootProps.slotProps?.baseTextField))}function buildApplyFilterFn(filterItem,compareFn,showTime,keepHours){if(!filterItem.value)return null;const date=new Date(filterItem.value);showTime?date.setSeconds(0,0):(date.setMinutes(date.getMinutes()+date.getTimezoneOffset()),date.setHours(0,0,0,0));const time=date.getTime();return value=>{if(!value)return!1;if(keepHours)return compareFn(value.getTime(),time);const dateCopy=new Date(value);return showTime?dateCopy.setSeconds(0,0):dateCopy.setHours(0,0,0,0),compareFn(dateCopy.getTime(),time)}}const getGridDateOperators=showTime=>[{value:"is",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1===value2),showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"not",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1!==value2),showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"after",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1>value2),showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"onOrAfter",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1>=value2),showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"before",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1<value2),showTime,!showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"onOrBefore",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1<=value2),showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"isEmpty",getApplyFilterFn:()=>value=>null==value,requiresFilterValue:!1},{value:"isNotEmpty",getApplyFilterFn:()=>value=>null!=value,requiresFilterValue:!1}],GridEditDateCell_excluded=["id","value","formattedValue","api","field","row","rowNode","colDef","cellMode","isEditable","tabIndex","hasFocus","inputProps","isValidating","isProcessingProps","onValueChange"],StyledInputBase=(0,styled.ZP)(InputBase.ZP)({fontSize:"inherit"});function GridEditDateCell(props){const{id,value:valueProp,field,colDef,hasFocus,inputProps,onValueChange}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridEditDateCell_excluded),isDateTime="dateTime"===colDef.type,apiRef=useGridApiContext(),inputRef=react.useRef(null),valueTransformed=react.useMemo((()=>{let parsedDate,formattedDate;if(parsedDate=null==valueProp?null:valueProp instanceof Date?valueProp:new Date((valueProp??"").toString()),null==parsedDate||Number.isNaN(parsedDate.getTime()))formattedDate="";else{formattedDate=new Date(parsedDate.getTime()-60*parsedDate.getTimezoneOffset()*1e3).toISOString().substr(0,isDateTime?16:10)}return{parsed:parsedDate,formatted:formattedDate}}),[valueProp,isDateTime]),[valueState,setValueState]=react.useState(valueTransformed),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["editInputCell"]},getDataGridUtilityClass,classes)})({classes:useGridRootProps().classes}),parseValueToDate=react.useCallback((value=>{if(""===value)return null;const[date,time]=value.split("T"),[year,month,day]=date.split("-"),parsedDate=new Date;if(parsedDate.setFullYear(Number(year),Number(month)-1,Number(day)),parsedDate.setHours(0,0,0,0),time){const[hours,minutes]=time.split(":");parsedDate.setHours(Number(hours),Number(minutes),0,0)}return parsedDate}),[]),handleChange=react.useCallback((async event=>{const newFormattedDate=event.target.value,newParsedDate=parseValueToDate(newFormattedDate);onValueChange&&await onValueChange(event,newParsedDate),setValueState({parsed:newParsedDate,formatted:newFormattedDate}),apiRef.current.setEditCellValue({id,field,value:newParsedDate},event)}),[apiRef,field,id,onValueChange,parseValueToDate]);return react.useEffect((()=>{setValueState((state=>valueTransformed.parsed!==state.parsed&&valueTransformed.parsed?.getTime()!==state.parsed?.getTime()?valueTransformed:state))}),[valueTransformed]),(0,useEnhancedEffect.Z)((()=>{hasFocus&&inputRef.current.focus()}),[hasFocus]),(0,jsx_runtime.jsx)(StyledInputBase,(0,esm_extends.Z)({inputRef,fullWidth:!0,className:classes.root,type:isDateTime?"datetime-local":"date",inputProps:(0,esm_extends.Z)({max:isDateTime?"9999-12-31T23:59":"9999-12-31"},inputProps),value:valueState.formatted,onChange:handleChange},other))}const renderEditDateCell=params=>(0,jsx_runtime.jsx)(GridEditDateCell,(0,esm_extends.Z)({},params)),GRID_ROOT_GROUP_ID="auto-generated-group-node-root",GRID_ID_AUTOGENERATED=Symbol("mui.id_autogenerated");const getRowIdFromRowModel=(rowModel,getRowId,detailErrorMessage)=>{const id=getRowId?getRowId(rowModel):rowModel.id;return function checkGridRowIdIsValid(id,row,detailErrorMessage="A row was provided without id in the rows prop:"){if(null==id)throw new Error(["MUI X: The Data Grid component requires all rows to have a unique `id` property.","Alternatively, you can use the `getRowId` prop to specify a custom id for each row.",detailErrorMessage,JSON.stringify(row)].join("\n"))}(id,rowModel,detailErrorMessage),id},createRowsInternalCache=({rows,getRowId,loading,rowCount})=>{const updates={type:"full",rows:[]},dataRowIdToModelLookup={},dataRowIdToIdLookup={};for(let i=0;i<rows.length;i+=1){const model=rows[i],id=getRowIdFromRowModel(model,getRowId);dataRowIdToModelLookup[id]=model,dataRowIdToIdLookup[id]=id,updates.rows.push(id)}return{rowsBeforePartialUpdates:rows,loadingPropBeforePartialUpdates:loading,rowCountPropBeforePartialUpdates:rowCount,updates,dataRowIdToIdLookup,dataRowIdToModelLookup}},getTopLevelRowCount=({tree,rowCountProp=0})=>{const rootGroupNode=tree[GRID_ROOT_GROUP_ID];return Math.max(rowCountProp,rootGroupNode.children.length+(null==rootGroupNode.footerId?0:1))},getRowsStateFromCache=({apiRef,rowCountProp=0,loadingProp,previousTree,previousTreeDepths,previousGroupsToFetch})=>{const cache=apiRef.current.caches.rows,{tree:unProcessedTree,treeDepths:unProcessedTreeDepths,dataRowIds:unProcessedDataRowIds,groupingName,groupsToFetch=[]}=apiRef.current.applyStrategyProcessor("rowTreeCreation",{previousTree,previousTreeDepths,updates:cache.updates,dataRowIdToIdLookup:cache.dataRowIdToIdLookup,dataRowIdToModelLookup:cache.dataRowIdToModelLookup,previousGroupsToFetch}),groupingParamsWithHydrateRows=apiRef.current.unstable_applyPipeProcessors("hydrateRows",{tree:unProcessedTree,treeDepths:unProcessedTreeDepths,dataRowIdToIdLookup:cache.dataRowIdToIdLookup,dataRowIds:unProcessedDataRowIds,dataRowIdToModelLookup:cache.dataRowIdToModelLookup});return apiRef.current.caches.rows.updates={type:"partial",actions:{insert:[],modify:[],remove:[]},idToActionLookup:{}},(0,esm_extends.Z)({},groupingParamsWithHydrateRows,{totalRowCount:Math.max(rowCountProp,groupingParamsWithHydrateRows.dataRowIds.length),totalTopLevelRowCount:getTopLevelRowCount({tree:groupingParamsWithHydrateRows.tree,rowCountProp}),groupingName,loading:loadingProp,groupsToFetch})},isAutogeneratedRowNode=rowNode=>"skeletonRow"===rowNode.type||"footer"===rowNode.type||"group"===rowNode.type&&rowNode.isAutoGenerated||"pinnedRow"===rowNode.type&&rowNode.isAutoGenerated,getTreeNodeDescendants=(tree,parentId,skipAutoGeneratedRows)=>{const node=tree[parentId];if("group"!==node.type)return[];const validDescendants=[];for(let i=0;i<node.children.length;i+=1){const child=node.children[i];skipAutoGeneratedRows&&isAutogeneratedRowNode(tree[child])||validDescendants.push(child);const childDescendants=getTreeNodeDescendants(tree,child,skipAutoGeneratedRows);for(let j=0;j<childDescendants.length;j+=1)validDescendants.push(childDescendants[j])}return skipAutoGeneratedRows||null==node.footerId||validDescendants.push(node.footerId),validDescendants},updateCacheWithNewRows=({previousCache,getRowId,updates,groupKeys})=>{if("full"===previousCache.updates.type)throw new Error("MUI X: Unable to prepare a partial update if a full update is not applied yet.");const uniqueUpdates=new Map;updates.forEach((update=>{const id=getRowIdFromRowModel(update,getRowId,"A row was provided without id when calling updateRows():");uniqueUpdates.has(id)?uniqueUpdates.set(id,(0,esm_extends.Z)({},uniqueUpdates.get(id),update)):uniqueUpdates.set(id,update)}));const partialUpdates={type:"partial",actions:{insert:[...previousCache.updates.actions.insert??[]],modify:[...previousCache.updates.actions.modify??[]],remove:[...previousCache.updates.actions.remove??[]]},idToActionLookup:(0,esm_extends.Z)({},previousCache.updates.idToActionLookup),groupKeys},dataRowIdToModelLookup=(0,esm_extends.Z)({},previousCache.dataRowIdToModelLookup),dataRowIdToIdLookup=(0,esm_extends.Z)({},previousCache.dataRowIdToIdLookup),alreadyAppliedActionsToRemove={insert:{},modify:{},remove:{}};uniqueUpdates.forEach(((partialRow,id)=>{const actionAlreadyAppliedToRow=partialUpdates.idToActionLookup[id];if("delete"===partialRow._action){if("remove"===actionAlreadyAppliedToRow||!dataRowIdToModelLookup[id])return;return null!=actionAlreadyAppliedToRow&&(alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id]=!0),partialUpdates.actions.remove.push(id),delete dataRowIdToModelLookup[id],void delete dataRowIdToIdLookup[id]}const oldRow=dataRowIdToModelLookup[id];if(oldRow)return"remove"===actionAlreadyAppliedToRow?(alreadyAppliedActionsToRemove.remove[id]=!0,partialUpdates.actions.modify.push(id)):null==actionAlreadyAppliedToRow&&partialUpdates.actions.modify.push(id),void(dataRowIdToModelLookup[id]=(0,esm_extends.Z)({},oldRow,partialRow));"remove"===actionAlreadyAppliedToRow?(alreadyAppliedActionsToRemove.remove[id]=!0,partialUpdates.actions.insert.push(id)):null==actionAlreadyAppliedToRow&&partialUpdates.actions.insert.push(id),dataRowIdToModelLookup[id]=partialRow,dataRowIdToIdLookup[id]=id}));const actionTypeWithActionsToRemove=Object.keys(alreadyAppliedActionsToRemove);for(let i=0;i<actionTypeWithActionsToRemove.length;i+=1){const actionType=actionTypeWithActionsToRemove[i],idsToRemove=alreadyAppliedActionsToRemove[actionType];Object.keys(idsToRemove).length>0&&(partialUpdates.actions[actionType]=partialUpdates.actions[actionType].filter((id=>!idsToRemove[id])))}return{dataRowIdToModelLookup,dataRowIdToIdLookup,updates:partialUpdates,rowsBeforePartialUpdates:previousCache.rowsBeforePartialUpdates,loadingPropBeforePartialUpdates:previousCache.loadingPropBeforePartialUpdates,rowCountPropBeforePartialUpdates:previousCache.rowCountPropBeforePartialUpdates}},minimalContentHeight="var(--DataGrid-overlayHeight, calc(var(--height) * 2))";function computeRowsUpdates(apiRef,updates,getRowId){const nonPinnedRowsUpdates=[];return updates.forEach((update=>{const id=getRowIdFromRowModel(update,getRowId,"A row was provided without id when calling updateRows():"),rowNode=apiRef.current.getRowNode(id);if("pinnedRow"===rowNode?.type){const pinnedRowsCache=apiRef.current.caches.pinnedRows,prevModel=pinnedRowsCache.idLookup[id];prevModel&&(pinnedRowsCache.idLookup[id]=(0,esm_extends.Z)({},prevModel,update))}else nonPinnedRowsUpdates.push(update)})),nonPinnedRowsUpdates}const getValidRowHeight=(rowHeightProp,defaultRowHeight,warningMessage)=>"number"==typeof rowHeightProp&&rowHeightProp>0?rowHeightProp:defaultRowHeight,rowHeightWarning=["MUI X: The `rowHeight` prop should be a number greater than 0.","The default value will be used instead."].join("\n"),getRowHeightWarning=["MUI X: The `getRowHeight` prop should return a number greater than 0 or 'auto'.","The default value will be used instead."].join("\n"),gridRowIdSelector=(state,row)=>GRID_ID_AUTOGENERATED in row?row[GRID_ID_AUTOGENERATED]:state.props.getRowId?state.props.getRowId(row):row.id;function throwIfNotDateObject({value,columnType,rowId,field}){if(!(value instanceof Date))throw new Error([`MUI X: \`${columnType}\` column type only accepts \`Date\` objects as values.`,"Use `valueGetter` to transform the value into a `Date` object.",`Row ID: ${rowId}, field: "${field}".`].join("\n"))}const GRID_DATE_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"date",sortComparator:gridDateComparator,valueFormatter:(value,row,column,apiRef)=>{if(!value)return"";return throwIfNotDateObject({value,columnType:"date",rowId:gridRowIdSelector(apiRef.current.state,row),field:column.field}),value.toLocaleDateString()},filterOperators:getGridDateOperators(),renderEditCell:renderEditDateCell,pastedValueParser:value=>new Date(value)}),GRID_DATETIME_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"dateTime",sortComparator:gridDateComparator,valueFormatter:(value,row,column,apiRef)=>{if(!value)return"";return throwIfNotDateObject({value,columnType:"dateTime",rowId:gridRowIdSelector(apiRef.current.state,row),field:column.field}),value.toLocaleString()},filterOperators:getGridDateOperators(!0),renderEditCell:renderEditDateCell,pastedValueParser:value=>new Date(value)});let PinnedColumnPosition=function(PinnedColumnPosition){return PinnedColumnPosition[PinnedColumnPosition.NONE=0]="NONE",PinnedColumnPosition[PinnedColumnPosition.LEFT=1]="LEFT",PinnedColumnPosition[PinnedColumnPosition.RIGHT=2]="RIGHT",PinnedColumnPosition[PinnedColumnPosition.VIRTUAL=3]="VIRTUAL",PinnedColumnPosition}({});const GridBooleanCell_excluded=["id","value","formattedValue","api","field","row","rowNode","colDef","cellMode","isEditable","hasFocus","tabIndex","hideDescendantCount"];function GridBooleanCellRaw(props){const{value,rowNode}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridBooleanCell_excluded),apiRef=useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["booleanCell"]},getDataGridUtilityClass,classes)})({classes:rootProps.classes}),isServerSideRowGroupingRow=useGridSelector(apiRef,gridRowMaximumTreeDepthSelector)>0&&"group"===rowNode.type&&!1===rootProps.treeData,Icon=react.useMemo((()=>value?rootProps.slots.booleanCellTrueIcon:rootProps.slots.booleanCellFalseIcon),[rootProps.slots.booleanCellFalseIcon,rootProps.slots.booleanCellTrueIcon,value]);return isServerSideRowGroupingRow&&void 0===value?null:(0,jsx_runtime.jsx)(Icon,(0,esm_extends.Z)({fontSize:"small",className:classes.root,titleAccess:apiRef.current.getLocaleText(value?"booleanCellTrueLabel":"booleanCellFalseLabel"),"data-value":Boolean(value)},other))}const GridBooleanCell=react.memo(GridBooleanCellRaw),GridEditBooleanCell_excluded=["id","value","formattedValue","api","field","row","rowNode","colDef","cellMode","isEditable","tabIndex","className","hasFocus","isValidating","isProcessingProps","error","onValueChange"];function GridEditBooleanCell(props){const{id:idProp,value,field,className,hasFocus,onValueChange}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridEditBooleanCell_excluded),apiRef=useGridApiContext(),inputRef=react.useRef(null),id=(0,useId.Z)(),[valueState,setValueState]=react.useState(value),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["editBooleanCell"]},getDataGridUtilityClass,classes)})({classes:rootProps.classes}),handleChange=react.useCallback((async event=>{const newValue=event.target.checked;onValueChange&&await onValueChange(event,newValue),setValueState(newValue),await apiRef.current.setEditCellValue({id:idProp,field,value:newValue},event)}),[apiRef,field,idProp,onValueChange]);return react.useEffect((()=>{setValueState(value)}),[value]),(0,useEnhancedEffect.Z)((()=>{hasFocus&&inputRef.current.focus()}),[hasFocus]),(0,jsx_runtime.jsx)("label",(0,esm_extends.Z)({htmlFor:id,className:(0,clsx.Z)(classes.root,className)},other,{children:(0,jsx_runtime.jsx)(rootProps.slots.baseCheckbox,(0,esm_extends.Z)({id,inputRef,checked:Boolean(valueState),onChange:handleChange,size:"small"},rootProps.slotProps?.baseCheckbox))}))}const GridFilterInputBoolean_excluded=["item","applyValue","apiRef","focusElementRef","isFilterActive","clearButton","tabIndex","label","variant","InputLabelProps"],GridFilterInputBoolean_sanitizeFilterItemValue=value=>"true"===String(value).toLowerCase()||"false"!==String(value).toLowerCase()&&void 0,BooleanOperatorContainer=(0,styled.ZP)("div")({display:"flex",alignItems:"center",width:"100%","& button":{margin:"auto 0px 5px 5px"}});function GridFilterInputBoolean(props){const{item,applyValue,apiRef,focusElementRef,clearButton,tabIndex,label:labelProp,variant="standard"}=props,others=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputBoolean_excluded),[filterValueState,setFilterValueState]=react.useState(GridFilterInputBoolean_sanitizeFilterItemValue(item.value)),rootProps=useGridRootProps(),labelId=(0,useId.Z)(),selectId=(0,useId.Z)(),baseSelectProps=rootProps.slotProps?.baseSelect||{},isSelectNative=baseSelectProps.native??!1,baseSelectOptionProps=rootProps.slotProps?.baseSelectOption||{},onFilterChange=react.useCallback((event=>{const value=GridFilterInputBoolean_sanitizeFilterItemValue(event.target.value);setFilterValueState(value),applyValue((0,esm_extends.Z)({},item,{value}))}),[applyValue,item]);react.useEffect((()=>{setFilterValueState(GridFilterInputBoolean_sanitizeFilterItemValue(item.value))}),[item.value]);const label=labelProp??apiRef.current.getLocaleText("filterPanelInputLabel");return(0,jsx_runtime.jsxs)(BooleanOperatorContainer,{children:[(0,jsx_runtime.jsxs)(rootProps.slots.baseFormControl,{fullWidth:!0,children:[(0,jsx_runtime.jsx)(rootProps.slots.baseInputLabel,(0,esm_extends.Z)({},rootProps.slotProps?.baseInputLabel,{id:labelId,shrink:!0,variant,children:label})),(0,jsx_runtime.jsxs)(rootProps.slots.baseSelect,(0,esm_extends.Z)({labelId,id:selectId,label,value:void 0===filterValueState?"":String(filterValueState),onChange:onFilterChange,variant,notched:"outlined"===variant||void 0,native:isSelectNative,displayEmpty:!0,inputProps:{ref:focusElementRef,tabIndex}},others,baseSelectProps,{children:[(0,jsx_runtime.jsx)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isSelectNative,value:"",children:apiRef.current.getLocaleText("filterValueAny")})),(0,jsx_runtime.jsx)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isSelectNative,value:"true",children:apiRef.current.getLocaleText("filterValueTrue")})),(0,jsx_runtime.jsx)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isSelectNative,value:"false",children:apiRef.current.getLocaleText("filterValueFalse")}))]}))]}),clearButton]})}const GRID_BOOLEAN_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"boolean",display:"flex",align:"center",headerAlign:"center",renderCell:params=>"__row_group_by_columns_group__"!==params.field&&isAutogeneratedRowNode(params.rowNode)?"":(0,jsx_runtime.jsx)(GridBooleanCell,(0,esm_extends.Z)({},params)),renderEditCell:params=>(0,jsx_runtime.jsx)(GridEditBooleanCell,(0,esm_extends.Z)({},params)),sortComparator:gridNumberComparator,valueFormatter:(value,row,column,apiRef)=>value?apiRef.current.getLocaleText("booleanCellTrueLabel"):apiRef.current.getLocaleText("booleanCellFalseLabel"),filterOperators:[{value:"is",getApplyFilterFn:filterItem=>{const sanitizedValue=GridFilterInputBoolean_sanitizeFilterItemValue(filterItem.value);return void 0===sanitizedValue?null:value=>Boolean(value)===sanitizedValue},InputComponent:GridFilterInputBoolean}],getApplyQuickFilterFn:void 0,aggregable:!1,pastedValueParser:value=>(value=>{switch(value.toLowerCase().trim()){case"true":case"yes":case"1":return!0;case"false":case"no":case"0":case"null":case"undefined":return!1;default:return}})(value)});var GridCellEditStartReasons=function(GridCellEditStartReasons){return GridCellEditStartReasons.enterKeyDown="enterKeyDown",GridCellEditStartReasons.cellDoubleClick="cellDoubleClick",GridCellEditStartReasons.printableKeyDown="printableKeyDown",GridCellEditStartReasons.deleteKeyDown="deleteKeyDown",GridCellEditStartReasons.pasteKeyDown="pasteKeyDown",GridCellEditStartReasons}(GridCellEditStartReasons||{}),GridCellEditStopReasons=function(GridCellEditStopReasons){return GridCellEditStopReasons.cellFocusOut="cellFocusOut",GridCellEditStopReasons.escapeKeyDown="escapeKeyDown",GridCellEditStopReasons.enterKeyDown="enterKeyDown",GridCellEditStopReasons.tabKeyDown="tabKeyDown",GridCellEditStopReasons.shiftTabKeyDown="shiftTabKeyDown",GridCellEditStopReasons}(GridCellEditStopReasons||{}),GridEditModes=function(GridEditModes){return GridEditModes.Cell="cell",GridEditModes.Row="row",GridEditModes}(GridEditModes||{}),GridCellModes=function(GridCellModes){return GridCellModes.Edit="edit",GridCellModes.View="view",GridCellModes}(GridCellModes||{}),GridRowModes=function(GridRowModes){return GridRowModes.Edit="edit",GridRowModes.View="view",GridRowModes}(GridRowModes||{});function isSingleSelectColDef(colDef){return"singleSelect"===colDef?.type}function getValueOptions(column,additionalParams){if(column)return"function"==typeof column.valueOptions?column.valueOptions((0,esm_extends.Z)({field:column.field},additionalParams)):column.valueOptions}function getValueFromValueOptions(value,valueOptions,getOptionValue){if(void 0===valueOptions)return;const result=valueOptions.find((option=>{const optionValue=getOptionValue(option);return String(optionValue)===String(value)}));return getOptionValue(result)}const GridEditSingleSelectCell_excluded=["id","value","formattedValue","api","field","row","rowNode","colDef","cellMode","isEditable","tabIndex","className","hasFocus","isValidating","isProcessingProps","error","onValueChange","initialOpen"],GridEditSingleSelectCell_excluded2=["MenuProps"];function GridEditSingleSelectCell(props){const rootProps=useGridRootProps(),{id,value:valueProp,field,row,colDef,hasFocus,error,onValueChange,initialOpen=rootProps.editMode===GridEditModes.Cell}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridEditSingleSelectCell_excluded),apiRef=useGridApiContext(),ref=react.useRef(null),inputRef=react.useRef(null),[open,setOpen]=react.useState(initialOpen),isSelectNative=(rootProps.slotProps?.baseSelect||{}).native??!1,_ref=rootProps.slotProps?.baseSelect||{},{MenuProps}=_ref,otherBaseSelectProps=(0,objectWithoutPropertiesLoose.Z)(_ref,GridEditSingleSelectCell_excluded2);if((0,useEnhancedEffect.Z)((()=>{hasFocus&&inputRef.current?.focus()}),[hasFocus]),!isSingleSelectColDef(colDef))return null;const valueOptions=getValueOptions(colDef,{id,row});if(!valueOptions)return null;const getOptionValue=colDef.getOptionValue,getOptionLabel=colDef.getOptionLabel;return valueOptions&&colDef?(0,jsx_runtime.jsx)(rootProps.slots.baseSelect,(0,esm_extends.Z)({ref,inputRef,value:valueProp,onChange:async event=>{if(!isSingleSelectColDef(colDef)||!valueOptions)return;setOpen(!1);const formattedTargetValue=getValueFromValueOptions(event.target.value,valueOptions,getOptionValue);onValueChange&&await onValueChange(event,formattedTargetValue),await apiRef.current.setEditCellValue({id,field,value:formattedTargetValue},event)},open,onOpen:event=>{(function isKeyboardEvent(event){return!!event.key})(event)&&"Enter"===event.key||setOpen(!0)},MenuProps:(0,esm_extends.Z)({onClose:(event,reason)=>{if(rootProps.editMode!==GridEditModes.Row){if("backdropClick"===reason||"Escape"===event.key){const params=apiRef.current.getCellParams(id,field);apiRef.current.publishEvent("cellEditStop",(0,esm_extends.Z)({},params,{reason:"Escape"===event.key?GridCellEditStopReasons.escapeKeyDown:GridCellEditStopReasons.cellFocusOut}))}}else setOpen(!1)}},MenuProps),error,native:isSelectNative,fullWidth:!0},other,otherBaseSelectProps,{children:valueOptions.map((valueOption=>{const value=getOptionValue(valueOption);return(0,react.createElement)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},rootProps.slotProps?.baseSelectOption||{},{native:isSelectNative,key:value,value}),getOptionLabel(valueOption))}))})):null}const GridFilterInputSingleSelect_excluded=["item","applyValue","type","apiRef","focusElementRef","placeholder","tabIndex","label","variant","isFilterActive","clearButton","InputLabelProps"],renderSingleSelectOptions=({column,OptionComponent,getOptionLabel,getOptionValue,isSelectNative,baseSelectOptionProps})=>["",...getValueOptions(column)||[]].map((option=>{const value=getOptionValue(option);let label=getOptionLabel(option);return""===label&&(label=" "),(0,react.createElement)(OptionComponent,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isSelectNative,key:value,value}),label)})),SingleSelectOperatorContainer=(0,styled.ZP)("div")({display:"flex",alignItems:"flex-end",width:"100%","& button":{margin:"auto 0px 5px 5px"}});function GridFilterInputSingleSelect(props){const{item,applyValue,type,apiRef,focusElementRef,placeholder,tabIndex,label:labelProp,variant="standard",clearButton}=props,others=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputSingleSelect_excluded),filterValue=item.value??"",id=(0,useId.Z)(),labelId=(0,useId.Z)(),rootProps=useGridRootProps(),isSelectNative=rootProps.slotProps?.baseSelect?.native??!1;let resolvedColumn=null;if(item.field){const column=apiRef.current.getColumn(item.field);isSingleSelectColDef(column)&&(resolvedColumn=column)}const getOptionValue=resolvedColumn?.getOptionValue,getOptionLabel=resolvedColumn?.getOptionLabel,currentValueOptions=react.useMemo((()=>getValueOptions(resolvedColumn)),[resolvedColumn]),onFilterChange=react.useCallback((event=>{let value=event.target.value;value=getValueFromValueOptions(value,currentValueOptions,getOptionValue),applyValue((0,esm_extends.Z)({},item,{value}))}),[currentValueOptions,getOptionValue,applyValue,item]);if(!isSingleSelectColDef(resolvedColumn))return null;const label=labelProp??apiRef.current.getLocaleText("filterPanelInputLabel");return(0,jsx_runtime.jsxs)(SingleSelectOperatorContainer,{children:[(0,jsx_runtime.jsxs)(rootProps.slots.baseFormControl,{fullWidth:!0,children:[(0,jsx_runtime.jsx)(rootProps.slots.baseInputLabel,(0,esm_extends.Z)({},rootProps.slotProps?.baseInputLabel,{id:labelId,htmlFor:id,shrink:!0,variant,children:label})),(0,jsx_runtime.jsx)(rootProps.slots.baseSelect,(0,esm_extends.Z)({id,label,labelId,value:filterValue,onChange:onFilterChange,variant,type:type||"text",inputProps:{tabIndex,ref:focusElementRef,placeholder:placeholder??apiRef.current.getLocaleText("filterPanelInputPlaceholder")},native:isSelectNative,notched:"outlined"===variant||void 0},others,rootProps.slotProps?.baseSelect,{children:renderSingleSelectOptions({column:resolvedColumn,OptionComponent:rootProps.slots.baseSelectOption,getOptionLabel,getOptionValue,isSelectNative,baseSelectOptionProps:rootProps.slotProps?.baseSelectOption})}))]}),clearButton]})}var useAutocomplete=__webpack_require__("./node_modules/@mui/material/useAutocomplete/useAutocomplete.js");const GridFilterInputMultipleSingleSelect_excluded=["item","applyValue","type","apiRef","focusElementRef","color","error","helperText","size","variant"],GridFilterInputMultipleSingleSelect_excluded2=["key"],filter=(0,useAutocomplete.D)();function GridFilterInputMultipleSingleSelect(props){const{item,applyValue,apiRef,focusElementRef,color,error,helperText,size,variant="standard"}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputMultipleSingleSelect_excluded),TextFieldProps={color,error,helperText,size,variant},id=(0,useId.Z)(),rootProps=useGridRootProps();let resolvedColumn=null;if(item.field){const column=apiRef.current.getColumn(item.field);isSingleSelectColDef(column)&&(resolvedColumn=column)}const getOptionValue=resolvedColumn?.getOptionValue,getOptionLabel=resolvedColumn?.getOptionLabel,isOptionEqualToValue=react.useCallback(((option,value)=>getOptionValue(option)===getOptionValue(value)),[getOptionValue]),resolvedValueOptions=react.useMemo((()=>getValueOptions(resolvedColumn)||[]),[resolvedColumn]),filteredValues=react.useMemo((()=>Array.isArray(item.value)?item.value.reduce(((acc,value)=>{const resolvedValue=resolvedValueOptions.find((v=>getOptionValue(v)===value));return null!=resolvedValue&&acc.push(resolvedValue),acc}),[]):[]),[getOptionValue,item.value,resolvedValueOptions]),handleChange=react.useCallback(((event,value)=>{applyValue((0,esm_extends.Z)({},item,{value:value.map(getOptionValue)}))}),[applyValue,item,getOptionValue]);return(0,jsx_runtime.jsx)(Autocomplete.Z,(0,esm_extends.Z)({multiple:!0,options:resolvedValueOptions,isOptionEqualToValue,filterOptions:filter,id,value:filteredValues,onChange:handleChange,getOptionLabel,renderTags:(value,getTagProps)=>value.map(((option,index)=>{const _getTagProps=getTagProps({index}),{key}=_getTagProps,tagProps=(0,objectWithoutPropertiesLoose.Z)(_getTagProps,GridFilterInputMultipleSingleSelect_excluded2);return(0,jsx_runtime.jsx)(rootProps.slots.baseChip,(0,esm_extends.Z)({variant:"outlined",size:"small",label:getOptionLabel(option)},tagProps),key)})),renderInput:params=>(0,jsx_runtime.jsx)(rootProps.slots.baseTextField,(0,esm_extends.Z)({},params,{label:apiRef.current.getLocaleText("filterPanelInputLabel"),placeholder:apiRef.current.getLocaleText("filterPanelInputPlaceholder"),InputLabelProps:(0,esm_extends.Z)({},params.InputLabelProps,{shrink:!0}),inputRef:focusElementRef,type:"singleSelect"},TextFieldProps,rootProps.slotProps?.baseTextField))},other))}const parseObjectValue=value=>null!=value&&isObject(value)?value.value:value,GRID_SINGLE_SELECT_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"singleSelect",getOptionLabel:value=>isObject(value)?value.label:String(value),getOptionValue:value=>isObject(value)?value.value:value,valueFormatter(value,row,colDef,apiRef){const rowId=gridRowIdSelector(apiRef.current.state,row);if(!isSingleSelectColDef(colDef))return"";const valueOptions=getValueOptions(colDef,{id:rowId,row});if(null==value)return"";if(!valueOptions)return value;if("object"!=typeof valueOptions[0])return colDef.getOptionLabel(value);const valueOption=valueOptions.find((option=>colDef.getOptionValue(option)===value));return valueOption?colDef.getOptionLabel(valueOption):""},renderEditCell:params=>(0,jsx_runtime.jsx)(GridEditSingleSelectCell,(0,esm_extends.Z)({},params)),filterOperators:[{value:"is",getApplyFilterFn:filterItem=>null==filterItem.value||""===filterItem.value?null:value=>parseObjectValue(value)===parseObjectValue(filterItem.value),InputComponent:GridFilterInputSingleSelect},{value:"not",getApplyFilterFn:filterItem=>null==filterItem.value||""===filterItem.value?null:value=>parseObjectValue(value)!==parseObjectValue(filterItem.value),InputComponent:GridFilterInputSingleSelect},{value:"isAnyOf",getApplyFilterFn:filterItem=>{if(!Array.isArray(filterItem.value)||0===filterItem.value.length)return null;const filterItemValues=filterItem.value.map(parseObjectValue);return value=>filterItemValues.includes(parseObjectValue(value))},InputComponent:GridFilterInputMultipleSingleSelect}],pastedValueParser:(value,row,column)=>{const colDef=column,valueOptions=getValueOptions(colDef)||[],getOptionValue=colDef.getOptionValue;if(valueOptions.find((option=>getOptionValue(option)===value)))return value}});var MenuList=__webpack_require__("./node_modules/@mui/material/MenuList/MenuList.js"),RtlProvider=__webpack_require__("./node_modules/@mui/system/esm/RtlProvider/index.js"),ClickAwayListener=__webpack_require__("./node_modules/@mui/material/ClickAwayListener/ClickAwayListener.js"),Grow=__webpack_require__("./node_modules/@mui/material/Grow/Grow.js"),Paper=__webpack_require__("./node_modules/@mui/material/Paper/Paper.js"),Popper=__webpack_require__("./node_modules/@mui/material/Popper/Popper.js");const GridMenu_excluded=["open","target","onClose","children","position","className","onExited"],GridMenu_useUtilityClasses=ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["menu"]},getDataGridUtilityClass,classes)},GridMenuRoot=(0,styled.ZP)(Popper.Z,{name:"MuiDataGrid",slot:"Menu",overridesResolver:(_,styles)=>styles.menu})((({theme})=>({zIndex:theme.zIndex.modal,[`& .${gridClasses.menuList}`]:{outline:0}}))),transformOrigin={"bottom-start":"top left","bottom-end":"top right"};function GridMenu(props){const{open,target,onClose,children,position,className,onExited}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridMenu_excluded),apiRef=useGridApiContext(),rootProps=useGridRootProps(),classes=GridMenu_useUtilityClasses(rootProps),savedFocusRef=react.useRef(null);(0,useEnhancedEffect.Z)((()=>{open?savedFocusRef.current=document.activeElement instanceof HTMLElement?document.activeElement:null:(savedFocusRef.current?.focus?.(),savedFocusRef.current=null)}),[open]),react.useEffect((()=>{const eventName=open?"menuOpen":"menuClose";apiRef.current.publishEvent(eventName,{target})}),[apiRef,open,target]);const handleClickAway=event=>{event.target&&(target===event.target||target?.contains(event.target))||onClose(event)};return(0,jsx_runtime.jsx)(GridMenuRoot,(0,esm_extends.Z)({as:rootProps.slots.basePopper,className:(0,clsx.Z)(classes.root,className),ownerState:rootProps,open,anchorEl:target,transition:!0,placement:position},other,rootProps.slotProps?.basePopper,{children:({TransitionProps,placement})=>{return(0,jsx_runtime.jsx)(ClickAwayListener.d,{onClickAway:handleClickAway,mouseEvent:"onMouseDown",children:(0,jsx_runtime.jsx)(Grow.Z,(0,esm_extends.Z)({},TransitionProps,{style:{transformOrigin:transformOrigin[placement]},onExited:(popperOnExited=TransitionProps?.onExited,node=>{popperOnExited&&popperOnExited(),onExited&&onExited(node)}),children:(0,jsx_runtime.jsx)(Paper.Z,{children})}))});var popperOnExited}}))}const GridActionsCell_excluded=["api","colDef","id","hasFocus","isEditable","field","value","formattedValue","row","rowNode","cellMode","tabIndex","position","focusElementRef"];function GridActionsCell(props){const{colDef,id,hasFocus,tabIndex,position="bottom-end",focusElementRef}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridActionsCell_excluded),[focusedButtonIndex,setFocusedButtonIndex]=react.useState(-1),[open,setOpen]=react.useState(!1),apiRef=useGridApiContext(),rootRef=react.useRef(null),buttonRef=react.useRef(null),ignoreCallToFocus=react.useRef(!1),touchRippleRefs=react.useRef({}),isRtl=(0,RtlProvider.V)(),menuId=(0,useId.Z)(),buttonId=(0,useId.Z)(),rootProps=useGridRootProps();if(!(colDef=>"function"==typeof colDef.getActions)(colDef))throw new Error("MUI X: Missing the `getActions` property in the `GridColDef`.");const options=colDef.getActions(apiRef.current.getRowParams(id)),iconButtons=options.filter((option=>!option.props.showInMenu)),menuButtons=options.filter((option=>option.props.showInMenu)),numberOfButtons=iconButtons.length+(menuButtons.length?1:0);react.useLayoutEffect((()=>{hasFocus||Object.entries(touchRippleRefs.current).forEach((([index,ref])=>{ref?.stop({},(()=>{delete touchRippleRefs.current[index]}))}))}),[hasFocus]),react.useEffect((()=>{if(focusedButtonIndex<0||!rootRef.current)return;if(focusedButtonIndex>=rootRef.current.children.length)return;rootRef.current.children[focusedButtonIndex].focus({preventScroll:!0})}),[focusedButtonIndex]),react.useEffect((()=>{hasFocus||(setFocusedButtonIndex(-1),ignoreCallToFocus.current=!1)}),[hasFocus]),react.useImperativeHandle(focusElementRef,(()=>({focus(){if(!ignoreCallToFocus.current){const focusableButtonIndex=options.findIndex((o=>!o.props.disabled));setFocusedButtonIndex(focusableButtonIndex)}}})),[options]),react.useEffect((()=>{focusedButtonIndex>=numberOfButtons&&setFocusedButtonIndex(numberOfButtons-1)}),[focusedButtonIndex,numberOfButtons]);const hideMenu=()=>{setOpen(!1)},handleTouchRippleRef=index=>instance=>{touchRippleRefs.current[index]=instance},handleButtonClick=(index,onClick)=>event=>{setFocusedButtonIndex(index),ignoreCallToFocus.current=!0,onClick&&onClick(event)};return(0,jsx_runtime.jsxs)("div",(0,esm_extends.Z)({role:"menu",ref:rootRef,tabIndex:-1,className:gridClasses.actionsCell,onKeyDown:event=>{if(numberOfButtons<=1)return;const getNewIndex=(index,direction)=>{if(index<0||index>options.length)return index;const indexMod=("left"===direction?-1:1)*(isRtl?-1:1);return options[index+indexMod]?.props.disabled?getNewIndex(index+indexMod,direction):index+indexMod};let newIndex=focusedButtonIndex;"ArrowRight"===event.key?newIndex=getNewIndex(focusedButtonIndex,"right"):"ArrowLeft"===event.key&&(newIndex=getNewIndex(focusedButtonIndex,"left")),newIndex<0||newIndex>=numberOfButtons||newIndex!==focusedButtonIndex&&(event.preventDefault(),event.stopPropagation(),setFocusedButtonIndex(newIndex))}},other,{children:[iconButtons.map(((button,index)=>react.cloneElement(button,{key:index,touchRippleRef:handleTouchRippleRef(index),onClick:handleButtonClick(index,button.props.onClick),tabIndex:focusedButtonIndex===index?tabIndex:-1}))),menuButtons.length>0&&buttonId&&(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({ref:buttonRef,id:buttonId,"aria-label":apiRef.current.getLocaleText("actionsCellMore"),"aria-haspopup":"menu","aria-expanded":open,"aria-controls":open?menuId:void 0,role:"menuitem",size:"small",onClick:()=>{open?hideMenu():(setOpen(!0),setFocusedButtonIndex(numberOfButtons-1),ignoreCallToFocus.current=!0)},touchRippleRef:handleTouchRippleRef(buttonId),tabIndex:focusedButtonIndex===iconButtons.length?tabIndex:-1},rootProps.slotProps?.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.moreActionsIcon,{fontSize:"small"})})),menuButtons.length>0&&(0,jsx_runtime.jsx)(GridMenu,{open,target:buttonRef.current,position,onClose:hideMenu,children:(0,jsx_runtime.jsx)(MenuList.Z,{id:menuId,className:gridClasses.menuList,onKeyDown:event=>{"Tab"===event.key&&event.preventDefault(),["Tab","Escape"].includes(event.key)&&hideMenu()},"aria-labelledby":buttonId,variant:"menu",autoFocusItem:!0,children:menuButtons.map(((button,index)=>react.cloneElement(button,{key:index,closeMenu:hideMenu})))})})]}))}const GRID_ACTIONS_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{sortable:!1,filterable:!1,aggregable:!1,width:100,display:"flex",align:"center",headerAlign:"center",headerName:"",disableColumnMenu:!0,disableExport:!0,renderCell:params=>(0,jsx_runtime.jsx)(GridActionsCell,(0,esm_extends.Z)({},params)),getApplyQuickFilterFn:void 0}),gridHeaderFilteringStateSelector=state=>state.headerFiltering,gridHeaderFilteringEnabledSelector=createSelector_createSelector(gridHeaderFilteringStateSelector,(headerFilteringState=>headerFilteringState?.enabled??!1)),gridHeaderFilteringEditFieldSelector=createSelector_createSelector(gridHeaderFilteringStateSelector,(headerFilteringState=>headerFilteringState.editing)),gridHeaderFilteringMenuSelector=createSelector_createSelector(gridHeaderFilteringStateSelector,(headerFilteringState=>headerFilteringState.menuOpen)),gridColumnGroupingSelector=state=>state.columnGrouping,gridColumnGroupsUnwrappedModelSelector=createSelectorMemoized(gridColumnGroupingSelector,(columnGrouping=>columnGrouping?.unwrappedGroupingModel??{})),gridColumnGroupsLookupSelector=createSelectorMemoized(gridColumnGroupingSelector,(columnGrouping=>columnGrouping?.lookup??{})),gridColumnGroupsHeaderStructureSelector=createSelectorMemoized(gridColumnGroupingSelector,(columnGrouping=>columnGrouping?.headerStructure??[])),gridColumnGroupsHeaderMaxDepthSelector=createSelector_createSelector(gridColumnGroupingSelector,(columnGrouping=>columnGrouping?.maxDepth??0)),COLUMNS_DIMENSION_PROPERTIES=["maxWidth","minWidth","width","flex"],COLUMN_TYPES={string:GRID_STRING_COL_DEF,number:GRID_NUMERIC_COL_DEF,date:GRID_DATE_COL_DEF,dateTime:GRID_DATETIME_COL_DEF,boolean:GRID_BOOLEAN_COL_DEF,singleSelect:GRID_SINGLE_SELECT_COL_DEF,actions:GRID_ACTIONS_COL_DEF,custom:GRID_STRING_COL_DEF};const hydrateColumnsWidth=(rawState,dimensions)=>{const columnsLookup={};let totalFlexUnits=0,widthAllocatedBeforeFlex=0;const flexColumns=[];rawState.orderedFields.forEach((columnField=>{let column=rawState.lookup[columnField],computedWidth=0,isFlex=!1;!1!==rawState.columnVisibilityModel[columnField]&&(column.flex&&column.flex>0?(totalFlexUnits+=column.flex,isFlex=!0):computedWidth=clamp(column.width||GRID_STRING_COL_DEF.width,column.minWidth||GRID_STRING_COL_DEF.minWidth,column.maxWidth||GRID_STRING_COL_DEF.maxWidth),widthAllocatedBeforeFlex+=computedWidth),column.computedWidth!==computedWidth&&(column=(0,esm_extends.Z)({},column,{computedWidth})),isFlex&&flexColumns.push(column),columnsLookup[columnField]=column}));const availableWidth=void 0===dimensions?0:dimensions.viewportOuterSize.width-(dimensions.hasScrollY?dimensions.scrollbarSize:0),initialFreeSpace=Math.max(availableWidth-widthAllocatedBeforeFlex,0);if(totalFlexUnits>0&&availableWidth>0){const computedColumnWidths=function computeFlexColumnsWidth({initialFreeSpace,totalFlexUnits,flexColumns}){const uniqueFlexColumns=new Set(flexColumns.map((col=>col.field))),flexColumnsLookup={all:{},frozenFields:[],freeze:field=>{const value=flexColumnsLookup.all[field];value&&!0!==value.frozen&&(flexColumnsLookup.all[field].frozen=!0,flexColumnsLookup.frozenFields.push(field))}};return function loopOverFlexItems(){if(flexColumnsLookup.frozenFields.length===uniqueFlexColumns.size)return;const violationsLookup={min:{},max:{}};let remainingFreeSpace=initialFreeSpace,flexUnits=totalFlexUnits,totalViolation=0;flexColumnsLookup.frozenFields.forEach((field=>{remainingFreeSpace-=flexColumnsLookup.all[field].computedWidth,flexUnits-=flexColumnsLookup.all[field].flex}));for(let i=0;i<flexColumns.length;i+=1){const column=flexColumns[i];if(flexColumnsLookup.all[column.field]&&!0===flexColumnsLookup.all[column.field].frozen)continue;let computedWidth=remainingFreeSpace/flexUnits*column.flex;computedWidth<column.minWidth?(totalViolation+=column.minWidth-computedWidth,computedWidth=column.minWidth,violationsLookup.min[column.field]=!0):computedWidth>column.maxWidth&&(totalViolation+=column.maxWidth-computedWidth,computedWidth=column.maxWidth,violationsLookup.max[column.field]=!0),flexColumnsLookup.all[column.field]={frozen:!1,computedWidth,flex:column.flex}}totalViolation<0?Object.keys(violationsLookup.max).forEach((field=>{flexColumnsLookup.freeze(field)})):totalViolation>0?Object.keys(violationsLookup.min).forEach((field=>{flexColumnsLookup.freeze(field)})):flexColumns.forEach((({field})=>{flexColumnsLookup.freeze(field)})),loopOverFlexItems()}(),flexColumnsLookup.all}({initialFreeSpace,totalFlexUnits,flexColumns});Object.keys(computedColumnWidths).forEach((field=>{columnsLookup[field].computedWidth=computedColumnWidths[field].computedWidth}))}return(0,esm_extends.Z)({},rawState,{lookup:columnsLookup})};function getDefaultColTypeDef(type){let colDef=COLUMN_TYPES.string;return type&&COLUMN_TYPES[type]&&(colDef=COLUMN_TYPES[type]),colDef}const createColumnsState=({apiRef,columnsToUpsert,initialState,columnVisibilityModel=gridColumnVisibilityModelSelector(apiRef),keepOnlyColumnsToUpsert=!1})=>{const isInsideStateInitializer=!apiRef.current.state.columns;let columnsState;if(isInsideStateInitializer)columnsState={orderedFields:[],lookup:{},columnVisibilityModel};else{const currentState=gridColumnsStateSelector(apiRef.current.state);columnsState={orderedFields:keepOnlyColumnsToUpsert?[]:[...currentState.orderedFields],lookup:(0,esm_extends.Z)({},currentState.lookup),columnVisibilityModel}}let columnsToKeep={};keepOnlyColumnsToUpsert&&!isInsideStateInitializer&&(columnsToKeep=Object.keys(columnsState.lookup).reduce(((acc,key)=>(0,esm_extends.Z)({},acc,{[key]:!1})),{}));const columnsToUpsertLookup={};columnsToUpsert.forEach((newColumn=>{const{field}=newColumn;columnsToUpsertLookup[field]=!0,columnsToKeep[field]=!0;let existingState=columnsState.lookup[field];null==existingState?(existingState=(0,esm_extends.Z)({},getDefaultColTypeDef(newColumn.type),{field,hasBeenResized:!1}),columnsState.orderedFields.push(field)):keepOnlyColumnsToUpsert&&columnsState.orderedFields.push(field),existingState&&existingState.type!==newColumn.type&&(existingState=(0,esm_extends.Z)({},getDefaultColTypeDef(newColumn.type),{field}));let hasBeenResized=existingState.hasBeenResized;COLUMNS_DIMENSION_PROPERTIES.forEach((key=>{void 0!==newColumn[key]&&(hasBeenResized=!0,-1===newColumn[key]&&(newColumn[key]=1/0))})),columnsState.lookup[field]=(0,resolveProps.Z)(existingState,(0,esm_extends.Z)({},newColumn,{hasBeenResized}))})),keepOnlyColumnsToUpsert&&!isInsideStateInitializer&&Object.keys(columnsState.lookup).forEach((field=>{columnsToKeep[field]||delete columnsState.lookup[field]}));const columnsStateWithPortableColumns=((columnsState,initialState)=>{if(!initialState)return columnsState;const{orderedFields=[],dimensions={}}=initialState,columnsWithUpdatedDimensions=Object.keys(dimensions);if(0===columnsWithUpdatedDimensions.length&&0===orderedFields.length)return columnsState;const orderedFieldsLookup={},cleanOrderedFields=[];for(let i=0;i<orderedFields.length;i+=1){const field=orderedFields[i];columnsState.lookup[field]&&(orderedFieldsLookup[field]=!0,cleanOrderedFields.push(field))}const newOrderedFields=0===cleanOrderedFields.length?columnsState.orderedFields:[...cleanOrderedFields,...columnsState.orderedFields.filter((field=>!orderedFieldsLookup[field]))],newColumnLookup=(0,esm_extends.Z)({},columnsState.lookup);for(let i=0;i<columnsWithUpdatedDimensions.length;i+=1){const field=columnsWithUpdatedDimensions[i],newColDef=(0,esm_extends.Z)({},newColumnLookup[field],{hasBeenResized:!0});Object.entries(dimensions[field]).forEach((([key,value])=>{newColDef[key]=-1===value?1/0:value})),newColumnLookup[field]=newColDef}return(0,esm_extends.Z)({},columnsState,{orderedFields:newOrderedFields,lookup:newColumnLookup})})(apiRef.current.unstable_applyPipeProcessors("hydrateColumns",columnsState),initialState);return hydrateColumnsWidth(columnsStateWithPortableColumns,apiRef.current.getRootDimensions?.()??void 0)};function getTotalHeaderHeight(apiRef,props){if(props.unstable_listView)return 0;const densityFactor=gridDensityFactorSelector(apiRef),maxDepth=gridColumnGroupsHeaderMaxDepthSelector(apiRef),isHeaderFilteringEnabled=gridHeaderFilteringEnabledSelector(apiRef);return Math.floor(props.columnHeaderHeight*densityFactor)+Math.floor((props.columnGroupHeaderHeight??props.columnHeaderHeight)*densityFactor)*maxDepth+(isHeaderFilteringEnabled?Math.floor((props.headerFilterHeight??props.columnHeaderHeight)*densityFactor):0)}const CLIFF=1,SLOP=1.5,GridScrollArea_useUtilityClasses=ownerState=>{const{scrollDirection,classes}=ownerState,slots={root:["scrollArea",`scrollArea--${scrollDirection}`]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)},GridScrollAreaRawRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"ScrollArea",overridesResolver:(props,styles)=>[{[`&.${gridClasses["scrollArea--left"]}`]:styles["scrollArea--left"]},{[`&.${gridClasses["scrollArea--right"]}`]:styles["scrollArea--right"]},styles.scrollArea]})((()=>({position:"absolute",top:0,zIndex:101,width:20,bottom:0,[`&.${gridClasses["scrollArea--left"]}`]:{left:0},[`&.${gridClasses["scrollArea--right"]}`]:{right:0}}))),offsetSelector=createSelectorV8(gridDimensionsSelector,((dimensions,direction)=>"left"===direction?dimensions.leftPinnedWidth:"right"===direction?dimensions.rightPinnedWidth+(dimensions.hasScrollX?dimensions.scrollbarSize:0):0));function GridScrollAreaContent(props){const{scrollDirection,scrollPosition}=props,rootRef=react.useRef(null),apiRef=useGridApiContext(),timeout=(0,useTimeout.Z)(),densityFactor=useGridSelector(apiRef,gridDensityFactorSelector),columnsTotalWidth=useGridSelector(apiRef,gridColumnsTotalWidthSelector),sideOffset=useGridSelectorV8(apiRef,offsetSelector,scrollDirection),getCanScrollMore=()=>{const dimensions=gridDimensionsSelector(apiRef.current.state);if("left"===scrollDirection)return scrollPosition.current.left>0;if("right"===scrollDirection){const maxScrollLeft=columnsTotalWidth-dimensions.viewportInnerSize.width;return scrollPosition.current.left<maxScrollLeft}return!1},[canScrollMore,setCanScrollMore]=react.useState(getCanScrollMore),rootProps=useGridRootProps(),ownerState=(0,esm_extends.Z)({},rootProps,{scrollDirection}),classes=GridScrollArea_useUtilityClasses(ownerState),totalHeaderHeight=getTotalHeaderHeight(apiRef,rootProps),headerHeight=Math.floor(rootProps.columnHeaderHeight*densityFactor),style={height:headerHeight,top:totalHeaderHeight-headerHeight};"left"===scrollDirection?style.left=sideOffset:"right"===scrollDirection&&(style.right=sideOffset);const handleDragOver=(0,useEventCallback.Z)((event=>{let offset;if(event.preventDefault(),"left"===scrollDirection)offset=event.clientX-rootRef.current.getBoundingClientRect().right;else{if("right"!==scrollDirection)throw new Error("MUI X: Wrong drag direction");offset=Math.max(1,event.clientX-rootRef.current.getBoundingClientRect().left)}offset=(offset-CLIFF)*SLOP+CLIFF,timeout.start(0,(()=>{apiRef.current.scroll({left:scrollPosition.current.left+offset,top:scrollPosition.current.top})}))}));return useGridApiEventHandler(apiRef,"scrollPositionChange",(()=>{setCanScrollMore(getCanScrollMore)})),canScrollMore?(0,jsx_runtime.jsx)(GridScrollAreaRawRoot,{ref:rootRef,className:(0,clsx.Z)(classes.root),ownerState,onDragOver:handleDragOver,style}):null}const GridScrollArea=fastMemo((function GridScrollAreaWrapper(props){const apiRef=useGridApiContext(),[dragging,setDragging]=react.useState(!1);return useGridApiEventHandler(apiRef,"columnHeaderDragStart",(()=>setDragging(!0))),useGridApiEventHandler(apiRef,"columnHeaderDragEnd",(()=>setDragging(!1))),dragging?(0,jsx_runtime.jsx)(GridScrollAreaContent,(0,esm_extends.Z)({},props)):null}));var react_dom=__webpack_require__("./node_modules/react-dom/index.js"),x_internals_reactMajor=__webpack_require__("./node_modules/@mui/x-internals/reactMajor.js");const noop=()=>{},gridSortingStateSelector=state=>state.sorting,gridSortedRowIdsSelector=createSelector_createSelector(gridSortingStateSelector,(sortingState=>sortingState.sortedRows)),gridSortedRowEntriesSelector=createSelectorMemoized(gridSortedRowIdsSelector,gridRowsLookupSelector,gridRowTreeSelector,((sortedIds,idRowsLookup,rowTree)=>sortedIds.reduce(((acc,id)=>{const model=idRowsLookup[id];if(model)acc.push({id,model});else{const rowNode=rowTree[id];rowNode&&isAutogeneratedRowNode(rowNode)&&acc.push({id,model:{[GRID_ID_AUTOGENERATED]:id}})}return acc}),[]))),gridSortModelSelector=createSelector_createSelector(gridSortingStateSelector,(sorting=>sorting.sortModel)),gridSortColumnLookupSelector=createSelectorMemoized(gridSortModelSelector,(sortModel=>sortModel.reduce(((res,sortItem,index)=>(res[sortItem.field]={sortDirection:sortItem.sort,sortIndex:sortModel.length>1?index+1:void 0},res)),{}))),gridFilterStateSelector=(createSelectorMemoized(gridSortedRowIdsSelector,(sortedIds=>sortedIds.reduce(((acc,id,index)=>(acc[id]=index,acc)),Object.create(null)))),state=>state.filter),gridFilterModelSelector=createSelector_createSelector(gridFilterStateSelector,(filterState=>filterState.filterModel)),gridQuickFilterValuesSelector=createSelector_createSelector(gridFilterModelSelector,(filterModel=>filterModel.quickFilterValues)),gridFilteredRowsLookupSelector=createSelector_createSelector(gridFilterStateSelector,(filterState=>filterState.filteredRowsLookup)),gridExpandedSortedRowEntriesSelector=(createSelector_createSelector(gridFilterStateSelector,(filterState=>filterState.filteredChildrenCountLookup)),createSelector_createSelector(gridFilterStateSelector,(filterState=>filterState.filteredDescendantCountLookup)),createSelectorMemoized((state=>state.visibleRowsLookup),gridSortedRowEntriesSelector,gridRowMaximumTreeDepthSelector,gridFilterModelSelector,gridQuickFilterValuesSelector,((visibleRowsLookup,sortedRows,maxDepth,filterModel,quickFilterValues)=>maxDepth<2&&!filterModel.items.length&&!quickFilterValues?.length?sortedRows:sortedRows.filter((row=>!1!==visibleRowsLookup[row.id]))))),gridExpandedSortedRowIdsSelector=createSelectorMemoized(gridExpandedSortedRowEntriesSelector,(visibleSortedRowEntries=>visibleSortedRowEntries.map((row=>row.id)))),gridFilteredSortedRowEntriesSelector=createSelectorMemoized(gridFilteredRowsLookupSelector,gridSortedRowEntriesSelector,((filteredRowsLookup,sortedRows)=>sortedRows.filter((row=>!1!==filteredRowsLookup[row.id])))),gridFilteredSortedRowIdsSelector=createSelectorMemoized(gridFilteredSortedRowEntriesSelector,(filteredSortedRowEntries=>filteredSortedRowEntries.map((row=>row.id)))),gridFilteredSortedTopLevelRowEntriesSelector=(createSelectorMemoized(gridExpandedSortedRowIdsSelector,gridRowTreeSelector,((visibleSortedRowIds,rowTree)=>{const depthPositionCounter={};let lastDepth=0;return visibleSortedRowIds.reduce(((acc,rowId)=>{const rowNode=rowTree[rowId];return depthPositionCounter[rowNode.depth]||(depthPositionCounter[rowNode.depth]=0),rowNode.depth>lastDepth&&(depthPositionCounter[rowNode.depth]=0),lastDepth=rowNode.depth,depthPositionCounter[rowNode.depth]+=1,acc[rowId]=depthPositionCounter[rowNode.depth],acc}),{})})),createSelectorMemoized(gridExpandedSortedRowEntriesSelector,gridRowTreeSelector,gridRowMaximumTreeDepthSelector,((visibleSortedRows,rowTree,rowTreeDepth)=>rowTreeDepth<2?visibleSortedRows:visibleSortedRows.filter((row=>0===rowTree[row.id]?.depth))))),gridExpandedRowCountSelector=createSelector_createSelector(gridExpandedSortedRowEntriesSelector,(visibleSortedRows=>visibleSortedRows.length)),gridFilteredTopLevelRowCountSelector=createSelector_createSelector(gridFilteredSortedTopLevelRowEntriesSelector,(visibleSortedTopLevelRows=>visibleSortedTopLevelRows.length)),gridFilteredRowCountSelector=createSelector_createSelector(gridFilteredSortedRowEntriesSelector,(filteredSortedRowEntries=>filteredSortedRowEntries.length)),gridFilterActiveItemsSelector=(createSelector_createSelector(gridFilteredRowCountSelector,gridFilteredTopLevelRowCountSelector,((totalRowCount,topLevelRowCount)=>totalRowCount-topLevelRowCount)),createSelectorMemoized(gridFilterModelSelector,gridColumnLookupSelector,((filterModel,columnLookup)=>filterModel.items?.filter((item=>{if(!item.field)return!1;const column=columnLookup[item.field];if(!column?.filterOperators||0===column?.filterOperators?.length)return!1;const filterOperator=column.filterOperators.find((operator=>operator.value===item.operator));return!!filterOperator&&(!filterOperator.InputComponent||null!=item.value&&""!==item.value?.toString())}))))),gridFilterActiveItemsLookupSelector=createSelectorMemoized(gridFilterActiveItemsSelector,(activeFilters=>activeFilters.reduce(((res,filterItem)=>(res[filterItem.field]?res[filterItem.field].push(filterItem):res[filterItem.field]=[filterItem],res)),{}))),getPageCount=(rowCount,pageSize,page)=>pageSize>0&&rowCount>0?Math.ceil(rowCount/pageSize):-1===rowCount?page+2:0,getDefaultGridPaginationModel=autoPageSize=>({page:0,pageSize:autoPageSize?0:100}),throwIfPageSizeExceedsTheLimit=(pageSize,signatureProp)=>{if(signatureProp===GridSignature.DataGrid&&pageSize>100)throw new Error(["MUI X: `pageSize` cannot exceed 100 in the MIT version of the DataGrid.","You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"))},gridPaginationSelector=state=>state.pagination,gridPaginationEnabledClientSideSelector=createSelector_createSelector(gridPaginationSelector,(pagination=>pagination.enabled&&"client"===pagination.paginationMode)),gridPaginationModelSelector=createSelector_createSelector(gridPaginationSelector,(pagination=>pagination.paginationModel)),gridPaginationRowCountSelector=createSelector_createSelector(gridPaginationSelector,(pagination=>pagination.rowCount)),gridPaginationMetaSelector=createSelector_createSelector(gridPaginationSelector,(pagination=>pagination.meta)),gridPageSelector=createSelector_createSelector(gridPaginationModelSelector,(paginationModel=>paginationModel.page)),gridPageSizeSelector=createSelector_createSelector(gridPaginationModelSelector,(paginationModel=>paginationModel.pageSize)),gridPageCountSelector=createSelector_createSelector(gridPaginationModelSelector,gridPaginationRowCountSelector,((paginationModel,rowCount)=>getPageCount(rowCount,paginationModel.pageSize,paginationModel.page))),gridPaginationRowRangeSelector=createSelectorMemoized(gridPaginationEnabledClientSideSelector,gridPaginationModelSelector,gridRowTreeSelector,gridRowMaximumTreeDepthSelector,gridExpandedSortedRowEntriesSelector,gridFilteredSortedTopLevelRowEntriesSelector,((clientSidePaginationEnabled,paginationModel,rowTree,rowTreeDepth,visibleSortedRowEntries,visibleSortedTopLevelRowEntries)=>{if(!clientSidePaginationEnabled)return null;const visibleTopLevelRowCount=visibleSortedTopLevelRowEntries.length,topLevelFirstRowIndex=Math.min(paginationModel.pageSize*paginationModel.page,visibleTopLevelRowCount-1),topLevelLastRowIndex=-1===paginationModel.pageSize?visibleTopLevelRowCount-1:Math.min(topLevelFirstRowIndex+paginationModel.pageSize-1,visibleTopLevelRowCount-1);if(-1===topLevelFirstRowIndex||-1===topLevelLastRowIndex)return null;if(rowTreeDepth<2)return{firstRowIndex:topLevelFirstRowIndex,lastRowIndex:topLevelLastRowIndex};const topLevelFirstRow=visibleSortedTopLevelRowEntries[topLevelFirstRowIndex],topLevelRowsInCurrentPageCount=topLevelLastRowIndex-topLevelFirstRowIndex+1,firstRowIndex=visibleSortedRowEntries.findIndex((row=>row.id===topLevelFirstRow.id));let lastRowIndex=firstRowIndex,topLevelRowAdded=0;for(;lastRowIndex<visibleSortedRowEntries.length&&topLevelRowAdded<=topLevelRowsInCurrentPageCount;){const row=visibleSortedRowEntries[lastRowIndex],depth=rowTree[row.id]?.depth;void 0===depth?lastRowIndex+=1:((topLevelRowAdded<topLevelRowsInCurrentPageCount||depth>0)&&(lastRowIndex+=1),0===depth&&(topLevelRowAdded+=1))}return{firstRowIndex,lastRowIndex:lastRowIndex-1}})),gridPaginatedVisibleSortedGridRowEntriesSelector=createSelectorMemoized(gridExpandedSortedRowEntriesSelector,gridPaginationRowRangeSelector,((visibleSortedRowEntries,paginationRange)=>paginationRange?visibleSortedRowEntries.slice(paginationRange.firstRowIndex,paginationRange.lastRowIndex+1):[])),gridPaginatedVisibleSortedGridRowIdsSelector=createSelectorMemoized(gridExpandedSortedRowIdsSelector,gridPaginationRowRangeSelector,((visibleSortedRowIds,paginationRange)=>paginationRange?visibleSortedRowIds.slice(paginationRange.firstRowIndex,paginationRange.lastRowIndex+1):[])),gridVisibleRowsSelector=createSelectorMemoized(gridPaginationEnabledClientSideSelector,gridPaginationRowRangeSelector,gridPaginatedVisibleSortedGridRowEntriesSelector,gridExpandedSortedRowEntriesSelector,((clientPaginationEnabled,paginationRowRange,paginationRows,expandedSortedRowEntries)=>clientPaginationEnabled?{rows:paginationRows,range:paginationRowRange,rowToIndexMap:paginationRows.reduce(((lookup,row,index)=>(lookup.set(row.model,index),lookup)),new Map)}:{rows:expandedSortedRowEntries,range:0===expandedSortedRowEntries.length?null:{firstRowIndex:0,lastRowIndex:expandedSortedRowEntries.length-1},rowToIndexMap:expandedSortedRowEntries.reduce(((lookup,row,index)=>(lookup.set(row.model,index),lookup)),new Map)})),getVisibleRows=(apiRef,props)=>gridVisibleRowsSelector(apiRef),useGridVisibleRows=(apiRef,props)=>useGridSelector(apiRef,gridVisibleRowsSelector),isFirefox=("undefined"!=typeof navigator?navigator.userAgent.toLowerCase():"empty").includes("firefox"),gridRowSelectionStateSelector=state=>state.rowSelection,selectedGridRowsCountSelector=createSelector_createSelector(gridRowSelectionStateSelector,(selection=>selection.length)),selectedGridRowsSelector=createSelectorMemoized(gridRowSelectionStateSelector,gridRowsLookupSelector,((selectedRows,rowsLookup)=>new Map(selectedRows.map((id=>[id,rowsLookup[id]]))))),selectedIdsLookupSelector=createSelectorMemoized(gridRowSelectionStateSelector,(selection=>selection.reduce(((lookup,rowId)=>(lookup[rowId]=rowId,lookup)),{}))),gridRowsMetaSelector=state=>state.rowsMeta,gridVirtualizationSelector=state=>state.virtualization,gridVirtualizationColumnEnabledSelector=(createSelector_createSelector(gridVirtualizationSelector,(state=>state.enabled)),createSelector_createSelector(gridVirtualizationSelector,(state=>state.enabledForColumns))),gridVirtualizationRowEnabledSelector=createSelector_createSelector(gridVirtualizationSelector,(state=>state.enabledForRows)),gridRenderContextSelector=createSelector_createSelector(gridVirtualizationSelector,(state=>state.renderContext)),gridRenderContextColumnsSelector=createSelectorMemoized((state=>state.virtualization.renderContext.firstColumnIndex),(state=>state.virtualization.renderContext.lastColumnIndex),((firstColumnIndex,lastColumnIndex)=>({firstColumnIndex,lastColumnIndex})));function useGridApiMethod(privateApiRef,apiMethods,visibility){const isFirstRender=react.useRef(!0);(0,useEnhancedEffect.Z)((()=>{isFirstRender.current=!1,privateApiRef.current.register(visibility,apiMethods)}),[privateApiRef,visibility,apiMethods]),isFirstRender.current&&privateApiRef.current.register(visibility,apiMethods)}const EMPTY_RENDER_CONTEXT={firstRowIndex:0,lastRowIndex:0,firstColumnIndex:0,lastColumnIndex:0},virtualizationStateInitializer=(state,props)=>{const{disableVirtualization,autoHeight}=props,virtualization={enabled:!disableVirtualization,enabledForColumns:!disableVirtualization,enabledForRows:!disableVirtualization&&!autoHeight,renderContext:EMPTY_RENDER_CONTEXT};return(0,esm_extends.Z)({},state,{virtualization})};const gridRowSpanningStateSelector=state=>state.rowSpanning,gridRowSpanningHiddenCellsSelector=createSelector_createSelector(gridRowSpanningStateSelector,(rowSpanning=>rowSpanning.hiddenCells)),gridRowSpanningSpannedCellsSelector=createSelector_createSelector(gridRowSpanningStateSelector,(rowSpanning=>rowSpanning.spannedCells)),gridRowSpanningHiddenCellsOriginMapSelector=createSelector_createSelector(gridRowSpanningStateSelector,(rowSpanning=>rowSpanning.hiddenCellOriginMap)),gridListColumnSelector=state=>state.listViewColumn,gridFocusStateSelector=state=>state.focus,gridFocusCellSelector=createSelector_createSelector(gridFocusStateSelector,(focusState=>focusState.cell)),gridFocusColumnHeaderSelector=createSelector_createSelector(gridFocusStateSelector,(focusState=>focusState.columnHeader)),gridFocusColumnGroupHeaderSelector=(createSelector_createSelector(gridFocusStateSelector,(focusState=>focusState.columnHeaderFilter)),createSelector_createSelector(gridFocusStateSelector,(focusState=>focusState.columnGroupHeader))),gridTabIndexStateSelector=state=>state.tabIndex,gridTabIndexCellSelector=createSelector_createSelector(gridTabIndexStateSelector,(state=>state.cell)),gridTabIndexColumnHeaderSelector=createSelector_createSelector(gridTabIndexStateSelector,(state=>state.columnHeader)),gridTabIndexColumnGroupHeaderSelector=(createSelector_createSelector(gridTabIndexStateSelector,(state=>state.columnHeaderFilter)),createSelector_createSelector(gridTabIndexStateSelector,(state=>state.columnGroupHeader))),gridFocusedVirtualCellSelector=createSelectorMemoized(createSelector(gridFocusCellSelector,gridRenderContextSelector,gridVisibleRowsSelector,gridVisibleColumnDefinitionsSelector,gridRowsLookupSelector,((focusedCell,renderContext,currentPage,visibleColumns,rows)=>{if(!focusedCell)return!1;const row=rows[focusedCell.id];if(!row)return!1;const rowIndex=currentPage.rowToIndexMap.get(row),columnIndex=visibleColumns.slice(renderContext.firstColumnIndex,renderContext.lastColumnIndex).findIndex((column=>column.field===focusedCell.field));return!(void 0!==rowIndex&&-1!==columnIndex&&rowIndex>=renderContext.firstRowIndex&&rowIndex<=renderContext.lastRowIndex)})),gridVisibleColumnDefinitionsSelector,gridVisibleRowsSelector,gridRowsLookupSelector,gridFocusCellSelector,((isFocusedCellOutOfRenderContext,visibleColumns,currentPage,rows,focusedCell)=>{if(!isFocusedCellOutOfRenderContext)return null;const row=rows[focusedCell.id];if(!row)return null;const rowIndex=currentPage.rowToIndexMap.get(row);if(void 0===rowIndex)return null;const columnIndex=visibleColumns.findIndex((column=>column.field===focusedCell.field));return-1===columnIndex?null:(0,esm_extends.Z)({},focusedCell,{rowIndex,columnIndex})}));function roundToDecimalPlaces(value,decimals){return Math.round(value*10**decimals)/10**decimals}const isJSDOM="undefined"!=typeof window&&/jsdom|HappyDOM/.test(window.navigator.userAgent);var ScrollDirection=function(ScrollDirection){return ScrollDirection[ScrollDirection.NONE=0]="NONE",ScrollDirection[ScrollDirection.UP=1]="UP",ScrollDirection[ScrollDirection.DOWN=2]="DOWN",ScrollDirection[ScrollDirection.LEFT=3]="LEFT",ScrollDirection[ScrollDirection.RIGHT=4]="RIGHT",ScrollDirection}(ScrollDirection||{});const EMPTY_SCROLL_POSITION={top:0,left:0},EMPTY_DETAIL_PANELS=Object.freeze(new Map),useGridVirtualScroller=()=>{const apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),{unstable_listView:listView}=rootProps,visibleColumns=useGridSelector(apiRef,(()=>listView?[gridListColumnSelector(apiRef.current.state)]:gridVisibleColumnDefinitionsSelector(apiRef))),enabledForRows=useGridSelector(apiRef,gridVirtualizationRowEnabledSelector)&&!isJSDOM,enabledForColumns=useGridSelector(apiRef,gridVirtualizationColumnEnabledSelector)&&!isJSDOM,pinnedRows=useGridSelector(apiRef,gridPinnedRowsSelector),pinnedColumnDefinitions=gridVisiblePinnedColumnDefinitionsSelector(apiRef),pinnedColumns=listView?EMPTY_PINNED_COLUMN_FIELDS:pinnedColumnDefinitions,hasBottomPinnedRows=pinnedRows.bottom.length>0,[panels,setPanels]=react.useState(EMPTY_DETAIL_PANELS),isRtl=(0,RtlProvider.V)(),selectedRowsLookup=useGridSelector(apiRef,selectedIdsLookupSelector),currentPage=useGridVisibleRows(apiRef),mainRef=apiRef.current.mainElementRef,scrollerRef=apiRef.current.virtualScrollerRef,scrollbarVerticalRef=apiRef.current.virtualScrollbarVerticalRef,scrollbarHorizontalRef=apiRef.current.virtualScrollbarHorizontalRef,hasColSpan=useGridSelector(apiRef,gridHasColSpanSelector),isRenderContextReady=react.useRef(!1),rowHeight=useGridSelector(apiRef,gridRowHeightSelector),contentHeight=useGridSelector(apiRef,gridContentHeightSelector),columnsTotalWidth=useGridSelector(apiRef,gridColumnsTotalWidthSelector),needsHorizontalScrollbar=useGridSelector(apiRef,needsHorizontalScrollbarSelector),verticalScrollbarWidth=useGridSelector(apiRef,gridVerticalScrollbarWidthSelector),gridHasFiller=useGridSelector(apiRef,gridHasFillerSelector),previousSize=react.useRef(null),mainRefCallback=react.useCallback((node=>{if(mainRef.current=node,!node)return;const initialRect=node.getBoundingClientRect();let lastSize={width:roundToDecimalPlaces(initialRect.width,1),height:roundToDecimalPlaces(initialRect.height,1)};if((!previousSize.current||lastSize.width!==previousSize.current.width&&lastSize.height!==previousSize.current.height)&&(previousSize.current=lastSize,apiRef.current.publishEvent("resize",lastSize)),"undefined"==typeof ResizeObserver)return;const observer=new ResizeObserver((entries=>{const entry=entries[0];if(!entry)return;const newSize={width:roundToDecimalPlaces(entry.contentRect.width,1),height:roundToDecimalPlaces(entry.contentRect.height,1)};newSize.width===lastSize.width&&newSize.height===lastSize.height||(apiRef.current.publishEvent("resize",newSize),lastSize=newSize)}));return observer.observe(node),x_internals_reactMajor.Z>=19?()=>{mainRef.current=null,observer.disconnect()}:void 0}),[apiRef,mainRef]),scrollPosition=react.useRef(rootProps.initialState?.scroll??EMPTY_SCROLL_POSITION),ignoreNextScrollEvent=react.useRef(!1),previousContextScrollPosition=react.useRef(EMPTY_SCROLL_POSITION),previousRowContext=react.useRef(EMPTY_RENDER_CONTEXT),renderContext=useGridSelector(apiRef,gridRenderContextSelector),focusedVirtualCell=useGridSelector(apiRef,gridFocusedVirtualCellSelector),scrollTimeout=(0,useTimeout.Z)(),frozenContext=react.useRef(void 0),scrollCache=(0,useLazyRef.Z)((()=>((isRtl,rowBufferPx,columnBufferPx,verticalBuffer,horizontalBuffer)=>({direction:ScrollDirection.NONE,buffer:bufferForDirection(isRtl,ScrollDirection.NONE,rowBufferPx,columnBufferPx,verticalBuffer,horizontalBuffer)}))(isRtl,rootProps.rowBufferPx,rootProps.columnBufferPx,15*rowHeight,300))).current,updateRenderContext=react.useCallback((nextRenderContext=>{if(function areRenderContextsEqual(context1,context2){if(context1===context2)return!0;return context1.firstRowIndex===context2.firstRowIndex&&context1.lastRowIndex===context2.lastRowIndex&&context1.firstColumnIndex===context2.firstColumnIndex&&context1.lastColumnIndex===context2.lastColumnIndex}(nextRenderContext,apiRef.current.state.virtualization.renderContext))return;const didRowsIntervalChange=nextRenderContext.firstRowIndex!==previousRowContext.current.firstRowIndex||nextRenderContext.lastRowIndex!==previousRowContext.current.lastRowIndex;apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{virtualization:(0,esm_extends.Z)({},state.virtualization,{renderContext:nextRenderContext})})));gridDimensionsSelector(apiRef.current.state).isReady&&didRowsIntervalChange&&(previousRowContext.current=nextRenderContext,apiRef.current.publishEvent("renderedRowsIntervalChange",nextRenderContext)),previousContextScrollPosition.current=scrollPosition.current}),[apiRef]),triggerUpdateRenderContext=(0,useEventCallback.Z)((()=>{const scroller=scrollerRef.current;if(!scroller)return;const dimensions=gridDimensionsSelector(apiRef.current.state),maxScrollTop=Math.ceil(dimensions.minimumSize.height-dimensions.viewportOuterSize.height),maxScrollLeft=Math.ceil(dimensions.minimumSize.width-dimensions.viewportInnerSize.width),newScroll={top:clamp(scroller.scrollTop,0,maxScrollTop),left:isRtl?clamp(scroller.scrollLeft,-maxScrollLeft,0):clamp(scroller.scrollLeft,0,maxScrollLeft)},dx=newScroll.left-scrollPosition.current.left,dy=newScroll.top-scrollPosition.current.top,isScrolling=0!==dx||0!==dy;scrollPosition.current=newScroll;const direction=isScrolling?function directionForDelta(dx,dy){if(0===dx&&0===dy)return ScrollDirection.NONE;return Math.abs(dy)>=Math.abs(dx)?dy>0?ScrollDirection.DOWN:ScrollDirection.UP:dx>0?ScrollDirection.RIGHT:ScrollDirection.LEFT}(dx,dy):ScrollDirection.NONE,rowScroll=Math.abs(scrollPosition.current.top-previousContextScrollPosition.current.top),columnScroll=Math.abs(scrollPosition.current.left-previousContextScrollPosition.current.left),didCrossThreshold=rowScroll>=rowHeight||columnScroll>=50,didChangeDirection=scrollCache.direction!==direction;if(!(didCrossThreshold||didChangeDirection))return renderContext;if(didChangeDirection)switch(direction){case ScrollDirection.NONE:case ScrollDirection.LEFT:case ScrollDirection.RIGHT:frozenContext.current=void 0;break;default:frozenContext.current=renderContext}scrollCache.direction=direction,scrollCache.buffer=bufferForDirection(isRtl,direction,rootProps.rowBufferPx,rootProps.columnBufferPx,15*rowHeight,300);const nextRenderContext=computeRenderContext(inputsSelector(apiRef,rootProps,enabledForRows,enabledForColumns),scrollPosition.current,scrollCache);return react_dom.flushSync((()=>{updateRenderContext(nextRenderContext)})),scrollTimeout.start(1e3,triggerUpdateRenderContext),nextRenderContext})),forceUpdateRenderContext=()=>{if(!gridDimensionsSelector(apiRef.current.state).isReady&&(enabledForRows||enabledForColumns))return;const nextRenderContext=computeRenderContext(inputsSelector(apiRef,rootProps,enabledForRows,enabledForColumns),scrollPosition.current,scrollCache);frozenContext.current=void 0,updateRenderContext(nextRenderContext)},handleScroll=(0,useEventCallback.Z)((()=>{if(ignoreNextScrollEvent.current)return void(ignoreNextScrollEvent.current=!1);const nextRenderContext=triggerUpdateRenderContext();apiRef.current.publishEvent("scrollPositionChange",{top:scrollPosition.current.top,left:scrollPosition.current.left,renderContext:nextRenderContext})})),handleWheel=(0,useEventCallback.Z)((event=>{apiRef.current.publishEvent("virtualScrollerWheel",{},event)})),handleTouchMove=(0,useEventCallback.Z)((event=>{apiRef.current.publishEvent("virtualScrollerTouchMove",{},event)})),scrollerStyle=react.useMemo((()=>({overflowX:!needsHorizontalScrollbar||listView?"hidden":void 0,overflowY:rootProps.autoHeight?"hidden":void 0})),[needsHorizontalScrollbar,rootProps.autoHeight,listView]),contentSize=react.useMemo((()=>{const size={width:needsHorizontalScrollbar?columnsTotalWidth:"auto",flexBasis:contentHeight,flexShrink:0};return 0===size.flexBasis&&(size.flexBasis=minimalContentHeight),size}),[columnsTotalWidth,contentHeight,needsHorizontalScrollbar]),onContentSizeApplied=react.useCallback((node=>{node&&apiRef.current.publishEvent("virtualScrollerContentSizeChange",{columnsTotalWidth,contentHeight})}),[apiRef,columnsTotalWidth,contentHeight]);return(0,useEnhancedEffect.Z)((()=>{isRenderContextReady.current&&apiRef.current.updateRenderContext?.()}),[apiRef,enabledForColumns,enabledForRows]),(0,useEnhancedEffect.Z)((()=>{listView&&(scrollerRef.current.scrollLeft=0)}),[listView,scrollerRef]),((condition,effect)=>{const didRun=react.useRef(!1);(0,useEnhancedEffect.Z)((()=>didRun.current||!condition?noop:(didRun.current=!0,effect())),[didRun.current||condition])})(renderContext!==EMPTY_RENDER_CONTEXT,(()=>{if(apiRef.current.publishEvent("scrollPositionChange",{top:scrollPosition.current.top,left:scrollPosition.current.left,renderContext}),isRenderContextReady.current=!0,rootProps.initialState?.scroll&&scrollerRef.current){const scroller=scrollerRef.current,{top,left}=rootProps.initialState.scroll,isScrollRestored={top:!(top>0),left:!(left>0)};if(!isScrollRestored.left&&columnsTotalWidth&&(scroller.scrollLeft=left,ignoreNextScrollEvent.current=!0,isScrollRestored.left=!0),!isScrollRestored.top&&contentHeight&&(scroller.scrollTop=top,ignoreNextScrollEvent.current=!0,isScrollRestored.top=!0),!isScrollRestored.top||!isScrollRestored.left){const unsubscribeContentSizeChange=apiRef.current.subscribeEvent("virtualScrollerContentSizeChange",(params=>{!isScrollRestored.left&&params.columnsTotalWidth&&(scroller.scrollLeft=left,ignoreNextScrollEvent.current=!0,isScrollRestored.left=!0),!isScrollRestored.top&&params.contentHeight&&(scroller.scrollTop=top,ignoreNextScrollEvent.current=!0,isScrollRestored.top=!0),isScrollRestored.left&&isScrollRestored.top&&unsubscribeContentSizeChange()}));return unsubscribeContentSizeChange}}})),apiRef.current.register("private",{updateRenderContext:forceUpdateRenderContext}),useGridApiOptionHandler(apiRef,"sortedRowsSet",forceUpdateRenderContext),useGridApiOptionHandler(apiRef,"paginationModelChange",forceUpdateRenderContext),useGridApiOptionHandler(apiRef,"columnsChange",forceUpdateRenderContext),{renderContext,setPanels,getRows:(params={})=>{if(!params.rows&&!currentPage.range)return[];let baseRenderContext=renderContext;params.renderContext&&(baseRenderContext=params.renderContext,baseRenderContext.firstColumnIndex=renderContext.firstColumnIndex,baseRenderContext.lastColumnIndex=renderContext.lastColumnIndex);const isLastSection=!hasBottomPinnedRows&&void 0===params.position||hasBottomPinnedRows&&"bottom"===params.position,isPinnedSection=void 0!==params.position;let rowIndexOffset;switch(params.position){case"top":rowIndexOffset=0;break;case"bottom":rowIndexOffset=pinnedRows.top.length+currentPage.rows.length;break;case void 0:rowIndexOffset=pinnedRows.top.length}const rowModels=params.rows??currentPage.rows,firstRowToRender=baseRenderContext.firstRowIndex,lastRowToRender=Math.min(baseRenderContext.lastRowIndex,rowModels.length),rowIndexes=params.rows?range(0,params.rows.length):range(firstRowToRender,lastRowToRender);let virtualRowIndex=-1;!isPinnedSection&&focusedVirtualCell&&(focusedVirtualCell.rowIndex<firstRowToRender&&(rowIndexes.unshift(focusedVirtualCell.rowIndex),virtualRowIndex=focusedVirtualCell.rowIndex),focusedVirtualCell.rowIndex>lastRowToRender&&(rowIndexes.push(focusedVirtualCell.rowIndex),virtualRowIndex=focusedVirtualCell.rowIndex));const rows=[],rowProps=rootProps.slotProps?.row,columnPositions=gridColumnPositionsSelector(apiRef);return rowIndexes.forEach((rowIndexInPage=>{const{id,model}=rowModels[rowIndexInPage],rowIndex=(currentPage?.range?.firstRowIndex||0)+rowIndexOffset+rowIndexInPage;if(hasColSpan){const minFirstColumn=pinnedColumns.left.length,maxLastColumn=visibleColumns.length-pinnedColumns.right.length;apiRef.current.calculateColSpan({rowId:id,minFirstColumn,maxLastColumn,columns:visibleColumns}),pinnedColumns.left.length>0&&apiRef.current.calculateColSpan({rowId:id,minFirstColumn:0,maxLastColumn:pinnedColumns.left.length,columns:visibleColumns}),pinnedColumns.right.length>0&&apiRef.current.calculateColSpan({rowId:id,minFirstColumn:visibleColumns.length-pinnedColumns.right.length,maxLastColumn:visibleColumns.length,columns:visibleColumns})}const baseRowHeight=apiRef.current.rowHasAutoHeight(id)?"auto":apiRef.current.unstable_getRowHeight(id);let isSelected;isSelected=null!=selectedRowsLookup[id]&&apiRef.current.isRowSelectable(id);let isFirstVisible=!1;void 0===params.position&&(isFirstVisible=0===rowIndexInPage);let isLastVisible=!1;const isLastVisibleInSection=rowIndexInPage===rowModels.length-1;if(isLastSection)if(isPinnedSection)isLastVisible=isLastVisibleInSection;else{rowIndexInPage===currentPage.rows.length-1&&(isLastVisible=!0)}let currentRenderContext=baseRenderContext;frozenContext.current&&rowIndexInPage>=frozenContext.current.firstRowIndex&&rowIndexInPage<frozenContext.current.lastRowIndex&&(currentRenderContext=frozenContext.current);const isVirtualFocusRow=rowIndexInPage===virtualRowIndex,isVirtualFocusColumn=focusedVirtualCell?.rowIndex===rowIndex,offsetLeft=computeOffsetLeft(columnPositions,currentRenderContext,pinnedColumns.left.length),showBottomBorder=isLastVisibleInSection&&"top"===params.position,firstColumnIndex=currentRenderContext.firstColumnIndex,lastColumnIndex=currentRenderContext.lastColumnIndex;if(rows.push((0,jsx_runtime.jsx)(rootProps.slots.row,(0,esm_extends.Z)({row:model,rowId:id,index:rowIndex,selected:isSelected,offsetLeft,columnsTotalWidth,rowHeight:baseRowHeight,pinnedColumns,visibleColumns,firstColumnIndex,lastColumnIndex,focusedColumnIndex:isVirtualFocusColumn?focusedVirtualCell.columnIndex:void 0,isFirstVisible,isLastVisible,isNotVisible:isVirtualFocusRow,showBottomBorder,scrollbarWidth:verticalScrollbarWidth,gridHasFiller},rowProps),id)),isVirtualFocusRow)return;const panel=panels.get(id);panel&&rows.push(panel),void 0===params.position&&isLastVisibleInSection&&rows.push(apiRef.current.getInfiniteLoadingTriggerElement?.({lastRowId:id}))})),rows},getContainerProps:()=>({ref:mainRefCallback}),getScrollerProps:()=>({ref:scrollerRef,onScroll:handleScroll,onWheel:handleWheel,onTouchMove:handleTouchMove,style:scrollerStyle,role:"presentation",tabIndex:isFirefox?-1:void 0}),getContentProps:()=>({style:contentSize,role:"presentation",ref:onContentSizeApplied}),getRenderZoneProps:()=>({role:"rowgroup"}),getScrollbarVerticalProps:()=>({ref:scrollbarVerticalRef,role:"presentation",scrollPosition}),getScrollbarHorizontalProps:()=>({ref:scrollbarHorizontalRef,role:"presentation",scrollPosition}),getScrollAreaProps:()=>({scrollPosition})}};function needsHorizontalScrollbarSelector(state){return state.dimensions.viewportOuterSize.width>0&&state.dimensions.columnsTotalWidth>state.dimensions.viewportOuterSize.width}function inputsSelector(apiRef,rootProps,enabledForRows,enabledForColumns){const dimensions=gridDimensionsSelector(apiRef.current.state),currentPage=getVisibleRows(apiRef,rootProps),visibleColumns=rootProps.unstable_listView?[gridListColumnSelector(apiRef.current.state)]:gridVisibleColumnDefinitionsSelector(apiRef),hiddenCellsOriginMap=gridRowSpanningHiddenCellsOriginMapSelector(apiRef),lastRowId=apiRef.current.state.rows.dataRowIds.at(-1),lastColumn=visibleColumns.at(-1);return{enabledForRows,enabledForColumns,apiRef,autoHeight:rootProps.autoHeight,rowBufferPx:rootProps.rowBufferPx,columnBufferPx:rootProps.columnBufferPx,leftPinnedWidth:dimensions.leftPinnedWidth,columnsTotalWidth:dimensions.columnsTotalWidth,viewportInnerWidth:dimensions.viewportInnerSize.width,viewportInnerHeight:dimensions.viewportInnerSize.height,lastRowHeight:void 0!==lastRowId?apiRef.current.unstable_getRowHeight(lastRowId):0,lastColumnWidth:lastColumn?.computedWidth??0,rowsMeta:gridRowsMetaSelector(apiRef.current.state),columnPositions:gridColumnPositionsSelector(apiRef),rows:currentPage.rows,range:currentPage.range,pinnedColumns:gridVisiblePinnedColumnDefinitionsSelector(apiRef),visibleColumns,hiddenCellsOriginMap,listView:rootProps.unstable_listView??!1,virtualizeColumnsWithAutoRowHeight:rootProps.virtualizeColumnsWithAutoRowHeight}}function computeRenderContext(inputs,scrollPosition,scrollCache){const renderContext={firstRowIndex:0,lastRowIndex:inputs.rows.length,firstColumnIndex:0,lastColumnIndex:inputs.visibleColumns.length};if(inputs.listView)return(0,esm_extends.Z)({},renderContext,{lastColumnIndex:1});const{top,left}=scrollPosition,realLeft=Math.abs(left)+inputs.leftPinnedWidth;if(inputs.enabledForRows){let firstRowIndex=Math.min(getNearestIndexToRender(inputs,top,{atStart:!0,lastPosition:inputs.rowsMeta.positions[inputs.rowsMeta.positions.length-1]+inputs.lastRowHeight}),inputs.rowsMeta.positions.length-1);const rowSpanHiddenCellOrigin=inputs.hiddenCellsOriginMap[firstRowIndex];if(rowSpanHiddenCellOrigin){const minSpannedRowIndex=Math.min(...Object.values(rowSpanHiddenCellOrigin));firstRowIndex=Math.min(firstRowIndex,minSpannedRowIndex)}const lastRowIndex=inputs.autoHeight?firstRowIndex+inputs.rows.length:getNearestIndexToRender(inputs,top+inputs.viewportInnerHeight);renderContext.firstRowIndex=firstRowIndex,renderContext.lastRowIndex=lastRowIndex}if(inputs.enabledForColumns){let firstColumnIndex=0,lastColumnIndex=inputs.columnPositions.length,hasRowWithAutoHeight=!1;const[firstRowToRender,lastRowToRender]=getIndexesToRender({firstIndex:renderContext.firstRowIndex,lastIndex:renderContext.lastRowIndex,minFirstIndex:0,maxLastIndex:inputs.rows.length,bufferBefore:scrollCache.buffer.rowBefore,bufferAfter:scrollCache.buffer.rowAfter,positions:inputs.rowsMeta.positions,lastSize:inputs.lastRowHeight});if(!inputs.virtualizeColumnsWithAutoRowHeight)for(let i=firstRowToRender;i<lastRowToRender&&!hasRowWithAutoHeight;i+=1){const row=inputs.rows[i];hasRowWithAutoHeight=inputs.apiRef.current.rowHasAutoHeight(row.id)}hasRowWithAutoHeight&&!inputs.virtualizeColumnsWithAutoRowHeight||(firstColumnIndex=binarySearch(realLeft,inputs.columnPositions,{atStart:!0,lastPosition:inputs.columnsTotalWidth}),lastColumnIndex=binarySearch(realLeft+inputs.viewportInnerWidth,inputs.columnPositions)),renderContext.firstColumnIndex=firstColumnIndex,renderContext.lastColumnIndex=lastColumnIndex}const actualRenderContext=function deriveRenderContext(inputs,nextRenderContext,scrollCache){const[firstRowToRender,lastRowToRender]=getIndexesToRender({firstIndex:nextRenderContext.firstRowIndex,lastIndex:nextRenderContext.lastRowIndex,minFirstIndex:0,maxLastIndex:inputs.rows.length,bufferBefore:scrollCache.buffer.rowBefore,bufferAfter:scrollCache.buffer.rowAfter,positions:inputs.rowsMeta.positions,lastSize:inputs.lastRowHeight}),[initialFirstColumnToRender,lastColumnToRender]=getIndexesToRender({firstIndex:nextRenderContext.firstColumnIndex,lastIndex:nextRenderContext.lastColumnIndex,minFirstIndex:inputs.pinnedColumns.left.length,maxLastIndex:inputs.visibleColumns.length-inputs.pinnedColumns.right.length,bufferBefore:scrollCache.buffer.columnBefore,bufferAfter:scrollCache.buffer.columnAfter,positions:inputs.columnPositions,lastSize:inputs.lastColumnWidth}),firstColumnToRender=function getFirstNonSpannedColumnToRender({firstColumnToRender,apiRef,firstRowToRender,lastRowToRender,visibleRows}){let firstNonSpannedColumnToRender=firstColumnToRender;for(let i=firstRowToRender;i<lastRowToRender;i+=1)if(visibleRows[i]){const rowId=visibleRows[i].id,cellColSpanInfo=apiRef.current.unstable_getCellColSpanInfo(rowId,firstColumnToRender);cellColSpanInfo&&cellColSpanInfo.spannedByColSpan&&(firstNonSpannedColumnToRender=cellColSpanInfo.leftVisibleCellIndex)}return firstNonSpannedColumnToRender}({firstColumnToRender:initialFirstColumnToRender,apiRef:inputs.apiRef,firstRowToRender,lastRowToRender,visibleRows:inputs.rows});return{firstRowIndex:firstRowToRender,lastRowIndex:lastRowToRender,firstColumnIndex:firstColumnToRender,lastColumnIndex:lastColumnToRender}}(inputs,renderContext,scrollCache);return actualRenderContext}function getNearestIndexToRender(inputs,offset,options){const lastMeasuredIndexRelativeToAllRows=inputs.apiRef.current.getLastMeasuredRowIndex();let allRowsMeasured=lastMeasuredIndexRelativeToAllRows===1/0;inputs.range?.lastRowIndex&&!allRowsMeasured&&(allRowsMeasured=lastMeasuredIndexRelativeToAllRows>=inputs.range.lastRowIndex);const lastMeasuredIndexRelativeToCurrentPage=clamp(lastMeasuredIndexRelativeToAllRows-(inputs.range?.firstRowIndex||0),0,inputs.rowsMeta.positions.length);return allRowsMeasured||inputs.rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage]>=offset?binarySearch(offset,inputs.rowsMeta.positions,options):function exponentialSearch(offset,positions,index,options=undefined){let interval=1;for(;index<positions.length&&Math.abs(positions[index])<offset;)index+=interval,interval*=2;return binarySearch(offset,positions,options,Math.floor(index/2),Math.min(index,positions.length))}(offset,inputs.rowsMeta.positions,lastMeasuredIndexRelativeToCurrentPage,options)}function binarySearch(offset,positions,options=undefined,sliceStart=0,sliceEnd=positions.length){if(positions.length<=0)return-1;if(sliceStart>=sliceEnd)return sliceStart;const pivot=sliceStart+Math.floor((sliceEnd-sliceStart)/2),position=positions[pivot];let isBefore;if(options?.atStart){isBefore=offset-((pivot===positions.length-1?options.lastPosition:positions[pivot+1])-position)<position}else isBefore=offset<=position;return isBefore?binarySearch(offset,positions,options,sliceStart,pivot):binarySearch(offset,positions,options,pivot+1,sliceEnd)}function getIndexesToRender({firstIndex,lastIndex,bufferBefore,bufferAfter,minFirstIndex,maxLastIndex,positions,lastSize}){const firstPosition=positions[firstIndex]-bufferBefore,lastPosition=positions[lastIndex]+bufferAfter,firstIndexPadded=binarySearch(firstPosition,positions,{atStart:!0,lastPosition:positions[positions.length-1]+lastSize}),lastIndexPadded=binarySearch(lastPosition,positions);return[clamp(firstIndexPadded,minFirstIndex,maxLastIndex),clamp(lastIndexPadded,minFirstIndex,maxLastIndex)]}function computeOffsetLeft(columnPositions,renderContext,pinnedLeftLength){const left=(columnPositions[renderContext.firstColumnIndex]??0)-(columnPositions[pinnedLeftLength]??0);return Math.abs(left)}function bufferForDirection(isRtl,direction,rowBufferPx,columnBufferPx,verticalBuffer,horizontalBuffer){if(isRtl)switch(direction){case ScrollDirection.LEFT:direction=ScrollDirection.RIGHT;break;case ScrollDirection.RIGHT:direction=ScrollDirection.LEFT}switch(direction){case ScrollDirection.NONE:return{rowAfter:rowBufferPx,rowBefore:rowBufferPx,columnAfter:columnBufferPx,columnBefore:columnBufferPx};case ScrollDirection.LEFT:return{rowAfter:0,rowBefore:0,columnAfter:0,columnBefore:horizontalBuffer};case ScrollDirection.RIGHT:return{rowAfter:0,rowBefore:0,columnAfter:horizontalBuffer,columnBefore:0};case ScrollDirection.UP:return{rowAfter:0,rowBefore:verticalBuffer,columnAfter:0,columnBefore:0};case ScrollDirection.DOWN:return{rowAfter:verticalBuffer,rowBefore:0,columnAfter:0,columnBefore:0};default:throw new Error("unreachable")}}const GridOverlayWrapperRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"OverlayWrapper",shouldForwardProp:prop=>"overlayType"!==prop&&"loadingOverlayVariant"!==prop,overridesResolver:(props,styles)=>styles.overlayWrapper})((({overlayType,loadingOverlayVariant})=>"skeleton"!==loadingOverlayVariant?{position:"sticky",top:"var(--DataGrid-headersTotalHeight)",left:0,width:0,height:0,zIndex:"loadingOverlay"===overlayType?5:4}:{})),GridOverlayWrapperInner=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"OverlayWrapperInner",shouldForwardProp:prop=>"overlayType"!==prop&&"loadingOverlayVariant"!==prop,overridesResolver:(props,styles)=>styles.overlayWrapperInner})({}),GridOverlays_useUtilityClasses=ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["overlayWrapper"],inner:["overlayWrapperInner"]},getDataGridUtilityClass,classes)};function GridOverlayWrapper(props){const apiRef=useGridApiContext(),rootProps=useGridRootProps(),dimensions=useGridSelector(apiRef,gridDimensionsSelector);let height=Math.max(dimensions.viewportOuterSize.height-dimensions.topContainerHeight-dimensions.bottomContainerHeight-(dimensions.hasScrollX?dimensions.scrollbarSize:0),0);0===height&&(height=minimalContentHeight);const classes=GridOverlays_useUtilityClasses((0,esm_extends.Z)({},props,{classes:rootProps.classes}));return(0,jsx_runtime.jsx)(GridOverlayWrapperRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root)},props,{children:(0,jsx_runtime.jsx)(GridOverlayWrapperInner,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.inner),style:{height,width:dimensions.viewportOuterSize.width}},props))}))}function GridOverlays(props){const{overlayType}=props,rootProps=useGridRootProps();if(!overlayType)return null;const Overlay=rootProps.slots?.[overlayType],overlayProps=rootProps.slotProps?.[overlayType];return(0,jsx_runtime.jsx)(GridOverlayWrapper,(0,esm_extends.Z)({},props,{children:(0,jsx_runtime.jsx)(Overlay,(0,esm_extends.Z)({},overlayProps))}))}const gridColumnMenuSelector=state=>state.columnMenu;const MemoizedGridHeaders=fastMemo((function GridHeaders(){const apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),visibleColumns=useGridSelector(apiRef,gridVisibleColumnDefinitionsSelector),filterColumnLookup=useGridSelector(apiRef,gridFilterActiveItemsLookupSelector),sortColumnLookup=useGridSelector(apiRef,gridSortColumnLookupSelector),columnHeaderTabIndexState=useGridSelector(apiRef,gridTabIndexColumnHeaderSelector),hasNoCellTabIndexState=useGridSelector(apiRef,(()=>null===gridTabIndexCellSelector(apiRef))),columnGroupHeaderTabIndexState=useGridSelector(apiRef,gridTabIndexColumnGroupHeaderSelector),columnHeaderFocus=useGridSelector(apiRef,gridFocusColumnHeaderSelector),columnGroupHeaderFocus=useGridSelector(apiRef,gridFocusColumnGroupHeaderSelector),headerGroupingMaxDepth=useGridSelector(apiRef,gridColumnGroupsHeaderMaxDepthSelector),columnMenuState=useGridSelector(apiRef,gridColumnMenuSelector),columnVisibility=useGridSelector(apiRef,gridColumnVisibilityModelSelector),columnGroupsHeaderStructure=useGridSelector(apiRef,gridColumnGroupsHeaderStructureSelector),hasOtherElementInTabSequence=!(null===columnGroupHeaderTabIndexState&&null===columnHeaderTabIndexState&&hasNoCellTabIndexState),columnsContainerRef=apiRef.current.columnHeadersContainerRef;return(0,jsx_runtime.jsx)(rootProps.slots.columnHeaders,(0,esm_extends.Z)({ref:columnsContainerRef,visibleColumns,filterColumnLookup,sortColumnLookup,columnHeaderTabIndexState,columnGroupHeaderTabIndexState,columnHeaderFocus,columnGroupHeaderFocus,headerGroupingMaxDepth,columnMenuState,columnVisibility,columnGroupsHeaderStructure,hasOtherElementInTabSequence},rootProps.slotProps?.columnHeaders))})),GridConfigurationContext=react.createContext(void 0);const useGridConfiguration=()=>{const configuration=react.useContext(GridConfigurationContext);if(void 0===configuration)throw new Error(["MUI X: Could not find the Data Grid configuration context.","It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.","This can also happen if you are bundling multiple versions of the Data Grid."].join("\n"));return configuration},GridPanelAnchor=(0,styled_styled.Z)("div")({position:"absolute",top:"var(--DataGrid-headersTotalHeight)",left:0,width:"calc(100% - (var(--DataGrid-hasScrollY) * var(--DataGrid-scrollbarSize)))"}),Element=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"Main",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.main,ownerState.hasPinnedRight&&styles["main--hasPinnedRight"],"skeleton"===ownerState.loadingOverlayVariant&&styles["main--hasSkeletonLoadingOverlay"]]}})({flexGrow:1,position:"relative",overflow:"hidden",display:"flex",flexDirection:"column"}),GridMainContainer=forwardRef(((props,ref)=>{const{ownerState}=props,rootProps=useGridRootProps(),ariaAttributes=useGridConfiguration().hooks.useGridAriaAttributes();return(0,jsx_runtime.jsxs)(Element,(0,esm_extends.Z)({ownerState,className:props.className,tabIndex:-1},ariaAttributes,rootProps.slotProps?.main,{ref,children:[(0,jsx_runtime.jsx)(GridPanelAnchor,{role:"presentation","data-id":"gridPanelAnchor"}),props.children]}))})),GridTopContainer_useUtilityClasses=()=>(0,composeClasses.Z)({root:["topContainer"]},getDataGridUtilityClass,{}),GridTopContainer_Element=(0,styled_styled.Z)("div")({position:"sticky",zIndex:4,top:0});function GridTopContainer(props){const classes=GridTopContainer_useUtilityClasses();return(0,jsx_runtime.jsx)(GridTopContainer_Element,(0,esm_extends.Z)({},props,{className:(0,clsx.Z)(classes.root,gridClasses["container--top"]),role:"presentation"}))}const GridBottomContainer_useUtilityClasses=()=>(0,composeClasses.Z)({root:["bottomContainer"]},getDataGridUtilityClass,{}),GridBottomContainer_Element=(0,styled_styled.Z)("div")({position:"sticky",zIndex:4,bottom:"calc(var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize))"});function GridBottomContainer(props){const classes=GridBottomContainer_useUtilityClasses();return(0,jsx_runtime.jsx)(GridBottomContainer_Element,(0,esm_extends.Z)({},props,{className:(0,clsx.Z)(classes.root,gridClasses["container--bottom"]),role:"presentation"}))}const VirtualScrollerContentRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"VirtualScrollerContent",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.virtualScrollerContent,ownerState.overflowedContent&&styles["virtualScrollerContent--overflowed"]]}})({}),GridVirtualScrollerContent=forwardRef((function GridVirtualScrollerContent(props,ref){const rootProps=useGridRootProps(),overflowedContent=!rootProps.autoHeight&&"auto"===props.style?.minHeight,classes=((props,overflowedContent)=>{const{classes}=props,slots={root:["virtualScrollerContent",overflowedContent&&"virtualScrollerContent--overflowed"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(rootProps,overflowedContent),ownerState={classes:rootProps.classes,overflowedContent};return(0,jsx_runtime.jsx)(VirtualScrollerContentRoot,(0,esm_extends.Z)({},props,{ownerState,className:(0,clsx.Z)(classes.root,props.className),ref}))})),Filler=(0,styled_styled.Z)("div")({display:"flex",flexDirection:"row",width:"var(--DataGrid-rowWidth)",boxSizing:"border-box"}),Pinned=(0,styled_styled.Z)("div")({position:"sticky",height:"100%",boxSizing:"border-box",borderTop:"1px solid var(--rowBorderColor)",backgroundColor:"var(--DataGrid-pinnedBackground)"}),PinnedLeft=(0,styled_styled.Z)(Pinned)({left:0,borderRight:"1px solid var(--rowBorderColor)"}),PinnedRight=(0,styled_styled.Z)(Pinned)({right:0,borderLeft:"1px solid var(--rowBorderColor)"}),Main=(0,styled_styled.Z)("div")({flexGrow:1,borderTop:"1px solid var(--rowBorderColor)"});const Memoized=fastMemo((function GridVirtualScrollerFiller({rowsLength}){const apiRef=useGridApiContext(),{viewportOuterSize,minimumSize,hasScrollX,hasScrollY,scrollbarSize,leftPinnedWidth,rightPinnedWidth}=useGridSelector(apiRef,gridDimensionsSelector),height=hasScrollX?scrollbarSize:0,needsLastRowBorder=viewportOuterSize.height-minimumSize.height>0;return 0!==height||needsLastRowBorder?(0,jsx_runtime.jsxs)(Filler,{className:gridClasses.filler,role:"presentation",style:{height,"--rowBorderColor":0===rowsLength?"transparent":"var(--DataGrid-rowBorderColor)"},children:[leftPinnedWidth>0&&(0,jsx_runtime.jsx)(PinnedLeft,{className:gridClasses["filler--pinnedLeft"],style:{width:leftPinnedWidth}}),(0,jsx_runtime.jsx)(Main,{}),rightPinnedWidth>0&&(0,jsx_runtime.jsx)(PinnedRight,{className:gridClasses["filler--pinnedRight"],style:{width:rightPinnedWidth+(hasScrollY?scrollbarSize:0)}})]}):null})),GridVirtualScrollerRenderZone_excluded=["className"],VirtualScrollerRenderZoneRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"VirtualScrollerRenderZone",overridesResolver:(props,styles)=>styles.virtualScrollerRenderZone})({position:"absolute",display:"flex",flexDirection:"column"}),GridVirtualScrollerRenderZone=forwardRef((function GridVirtualScrollerRenderZone(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridVirtualScrollerRenderZone_excluded),apiRef=useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["virtualScrollerRenderZone"]},getDataGridUtilityClass,classes)})(rootProps),offsetTop=useGridSelector(apiRef,(()=>{const renderContext=gridRenderContextSelector(apiRef);return gridRowsMetaSelector(apiRef.current.state).positions[renderContext.firstRowIndex]??0}));return(0,jsx_runtime.jsx)(VirtualScrollerRenderZoneRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState:rootProps,style:{transform:`translate3d(0, ${offsetTop}px, 0)`}},other,{ref}))}));var useOnMount=__webpack_require__("./node_modules/@mui/utils/esm/useOnMount/useOnMount.js");const Scrollbar=(0,styled_styled.Z)("div")({position:"absolute",display:"inline-block",zIndex:6,"&:hover":{zIndex:7},"--size":"calc(max(var(--DataGrid-scrollbarSize), 14px))"}),ScrollbarVertical=(0,styled_styled.Z)(Scrollbar)({width:"var(--size)",height:"calc(var(--DataGrid-hasScrollY) * (100% - var(--DataGrid-topContainerHeight) - var(--DataGrid-bottomContainerHeight) - var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize)))",overflowY:"auto",overflowX:"hidden",outline:0,"& > div":{width:"var(--size)"},top:"var(--DataGrid-topContainerHeight)",right:"0px"}),ScrollbarHorizontal=(0,styled_styled.Z)(Scrollbar)({width:"100%",height:"var(--size)",overflowY:"hidden",overflowX:"auto",outline:0,"& > div":{height:"var(--size)"},bottom:"0px"}),GridVirtualScrollbar=forwardRef((function GridVirtualScrollbar(props,ref){const apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),isLocked=react.useRef(!1),lastPosition=react.useRef(0),scrollbarRef=react.useRef(null),contentRef=react.useRef(null),classes=((ownerState,position)=>{const{classes}=ownerState,slots={root:["scrollbar",`scrollbar--${position}`],content:["scrollbarContent"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(rootProps,props.position),dimensions=useGridSelector(apiRef,gridDimensionsSelector),propertyDimension="vertical"===props.position?"height":"width",propertyScroll="vertical"===props.position?"scrollTop":"scrollLeft",propertyScrollPosition="vertical"===props.position?"top":"left",hasScroll="vertical"===props.position?dimensions.hasScrollX:dimensions.hasScrollY,contentSize=dimensions.minimumSize[propertyDimension]+(hasScroll?dimensions.scrollbarSize:0),scrollbarInnerSize=("vertical"===props.position?dimensions.viewportInnerSize.height:dimensions.viewportOuterSize.width)*(contentSize/dimensions.viewportOuterSize[propertyDimension]),onScrollerScroll=(0,useEventCallback.Z)((()=>{const scrollbar=scrollbarRef.current,scrollPosition=props.scrollPosition.current;if(!scrollbar)return;if(scrollPosition[propertyScrollPosition]===lastPosition.current)return;if(lastPosition.current=scrollPosition[propertyScrollPosition],isLocked.current)return void(isLocked.current=!1);isLocked.current=!0;const value=scrollPosition[propertyScrollPosition]/contentSize;scrollbar[propertyScroll]=value*scrollbarInnerSize})),onScrollbarScroll=(0,useEventCallback.Z)((()=>{const scroller=apiRef.current.virtualScrollerRef.current,scrollbar=scrollbarRef.current;if(!scrollbar)return;if(isLocked.current)return void(isLocked.current=!1);isLocked.current=!0;const value=scrollbar[propertyScroll]/scrollbarInnerSize;scroller[propertyScroll]=value*contentSize}));(0,useOnMount.Z)((()=>{const scroller=apiRef.current.virtualScrollerRef.current,scrollbar=scrollbarRef.current,options={passive:!0};return scroller.addEventListener("scroll",onScrollerScroll,options),scrollbar.addEventListener("scroll",onScrollbarScroll,options),()=>{scroller.removeEventListener("scroll",onScrollerScroll,options),scrollbar.removeEventListener("scroll",onScrollbarScroll,options)}})),react.useEffect((()=>{contentRef.current.style.setProperty(propertyDimension,`${scrollbarInnerSize}px`)}),[scrollbarInnerSize,propertyDimension]);const Container="vertical"===props.position?ScrollbarVertical:ScrollbarHorizontal;return(0,jsx_runtime.jsx)(Container,{ref:(0,useForkRef.Z)(ref,scrollbarRef),className:classes.root,style:"vertical"===props.position&&rootProps.unstable_listView?{height:"100%",top:0}:void 0,tabIndex:-1,"aria-hidden":"true",children:(0,jsx_runtime.jsx)("div",{ref:contentRef,className:classes.content})})})),Scroller=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"VirtualScroller",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.virtualScroller,ownerState.hasScrollX&&styles["virtualScroller--hasScrollX"]]}})({position:"relative",height:"100%",flexGrow:1,overflow:"scroll",scrollbarWidth:"none",display:"flex",flexDirection:"column","&::-webkit-scrollbar":{display:"none"},"@media print":{overflow:"hidden"},zIndex:0}),hasPinnedRightSelector=state=>state.dimensions.rightPinnedWidth>0;function GridVirtualScroller(props){const apiRef=useGridApiContext(),rootProps=useGridRootProps(),hasScrollY=useGridSelector(apiRef,gridHasScrollYSelector),hasScrollX=useGridSelector(apiRef,gridHasScrollXSelector),hasPinnedRight=useGridSelector(apiRef,hasPinnedRightSelector),hasBottomFiller=useGridSelector(apiRef,gridHasBottomFillerSelector),overlaysProps=(()=>{const apiRef=useGridApiContext(),rootProps=useGridRootProps(),totalRowCount=useGridSelector(apiRef,gridRowCountSelector),visibleRowCount=useGridSelector(apiRef,gridExpandedRowCountSelector),pinnedRowsCount=useGridSelector(apiRef,gridPinnedRowsCountSelector),noRows=0===totalRowCount&&0===pinnedRowsCount,loading=useGridSelector(apiRef,gridRowsLoadingSelector);let overlayType=null,loadingOverlayVariant=null;return!loading&&noRows&&(overlayType="noRowsOverlay"),!loading&&totalRowCount>0&&0===visibleRowCount&&(overlayType="noResultsOverlay"),loading&&(overlayType="loadingOverlay",loadingOverlayVariant=rootProps.slotProps?.loadingOverlay?.[noRows?"noRowsVariant":"variant"]||null),{overlayType,loadingOverlayVariant}})(),ownerState={classes:rootProps.classes,hasScrollX,hasPinnedRight,loadingOverlayVariant:overlaysProps.loadingOverlayVariant},classes=(ownerState=>{const{classes,hasScrollX,hasPinnedRight,loadingOverlayVariant}=ownerState,slots={root:["main",hasPinnedRight&&"main--hasPinnedRight","skeleton"===loadingOverlayVariant&&"main--hasSkeletonLoadingOverlay"],scroller:["virtualScroller",hasScrollX&&"virtualScroller--hasScrollX"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(ownerState),virtualScroller=useGridVirtualScroller(),{getContainerProps,getScrollerProps,getContentProps,getRenderZoneProps,getScrollbarVerticalProps,getScrollbarHorizontalProps,getRows,getScrollAreaProps}=virtualScroller,rows=getRows();return(0,jsx_runtime.jsxs)(GridMainContainer,(0,esm_extends.Z)({className:classes.root},getContainerProps(),{ownerState,children:[(0,jsx_runtime.jsx)(GridScrollArea,(0,esm_extends.Z)({scrollDirection:"left"},getScrollAreaProps())),(0,jsx_runtime.jsx)(GridScrollArea,(0,esm_extends.Z)({scrollDirection:"right"},getScrollAreaProps())),(0,jsx_runtime.jsxs)(Scroller,(0,esm_extends.Z)({className:classes.scroller},getScrollerProps(),{ownerState,children:[(0,jsx_runtime.jsxs)(GridTopContainer,{children:[!rootProps.unstable_listView&&(0,jsx_runtime.jsx)(MemoizedGridHeaders,{}),(0,jsx_runtime.jsx)(rootProps.slots.pinnedRows,{position:"top",virtualScroller})]}),(0,jsx_runtime.jsx)(GridOverlays,(0,esm_extends.Z)({},overlaysProps)),(0,jsx_runtime.jsx)(GridVirtualScrollerContent,(0,esm_extends.Z)({},getContentProps(),{children:(0,jsx_runtime.jsxs)(GridVirtualScrollerRenderZone,(0,esm_extends.Z)({},getRenderZoneProps(),{children:[rows,(0,jsx_runtime.jsx)(rootProps.slots.detailPanels,{virtualScroller})]}))})),hasBottomFiller&&(0,jsx_runtime.jsx)(Memoized,{rowsLength:rows.length}),(0,jsx_runtime.jsx)(GridBottomContainer,{children:(0,jsx_runtime.jsx)(rootProps.slots.pinnedRows,{position:"bottom",virtualScroller})})]})),hasScrollX&&!rootProps.unstable_listView&&(0,jsx_runtime.jsx)(GridVirtualScrollbar,(0,esm_extends.Z)({position:"horizontal"},getScrollbarHorizontalProps())),hasScrollY&&(0,jsx_runtime.jsx)(GridVirtualScrollbar,(0,esm_extends.Z)({position:"vertical"},getScrollbarVerticalProps())),props.children]}))}function GridFooterPlaceholder(){const rootProps=useGridRootProps();return rootProps.hideFooter?null:(0,jsx_runtime.jsx)(rootProps.slots.footer,(0,esm_extends.Z)({},rootProps.slotProps?.footer))}const GridRoot_excluded=["className","children"],GridRoot=forwardRef((function GridRoot(props,ref){const rootProps=useGridRootProps(),{className,children}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridRoot_excluded),apiRef=useGridPrivateApiContext(),density=useGridSelector(apiRef,gridDensitySelector),rootElementRef=apiRef.current.rootElementRef,rootMountCallback=react.useCallback((node=>{null!==node&&apiRef.current.publishEvent("rootMount",node)}),[apiRef]),handleRef=(0,useForkRef.Z)(rootElementRef,ref,rootMountCallback),ownerState=rootProps,classes=((ownerState,density)=>{const{autoHeight,classes,showCellVerticalBorder}=ownerState,slots={root:["root",autoHeight&&"autoHeight",`root--density${(0,capitalize.Z)(density)}`,null===ownerState.slots.toolbar&&"root--noToolbar","withBorderColor",showCellVerticalBorder&&"withVerticalBorder"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(ownerState,density);return(0,shim.useSyncExternalStore)(emptySubscribe,clientSnapshot,serverSnapshot)?null:(0,jsx_runtime.jsxs)(GridRootStyles,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState},other,{ref:handleRef,children:[(0,jsx_runtime.jsx)(GridHeader,{}),(0,jsx_runtime.jsx)(GridVirtualScroller,{children}),(0,jsx_runtime.jsx)(GridFooterPlaceholder,{})]}))})),MemoizedGridRoot=fastMemo(GridRoot);function getGridRowGroupSelectableDescendants(apiRef,groupId){const rowTree=gridRowTreeSelector(apiRef),sortedRowIds=gridSortedRowIdsSelector(apiRef),filteredRowsLookup=gridFilteredRowsLookupSelector(apiRef),groupNode=rowTree[groupId];if(!groupNode||"group"!==groupNode.type)return[];const descendants=[];for(let index=sortedRowIds.findIndex((id=>id===groupId))+1;index<sortedRowIds.length&&rowTree[sortedRowIds[index]]?.depth>groupNode.depth;index+=1){const id=sortedRowIds[index];!1!==filteredRowsLookup[id]&&apiRef.current.isRowSelectable(id)&&descendants.push(id)}return descendants}function isMultipleRowSelectionEnabled(props){return props.signature===GridSignature.DataGrid?props.checkboxSelection&&!0!==props.disableMultipleRowSelection:!props.disableMultipleRowSelection}const findRowsToSelect=(apiRef,tree,selectedRow,autoSelectDescendants,autoSelectParents,addRow)=>{const filteredRows=gridFilteredRowsLookupSelector(apiRef),selectedIdsLookup=selectedIdsLookupSelector(apiRef),selectedDescendants=new Set([]);if(autoSelectDescendants||autoSelectParents){if(autoSelectDescendants){const rowNode=tree[selectedRow];if("group"===rowNode?.type){getGridRowGroupSelectableDescendants(apiRef,selectedRow).forEach((rowId=>{addRow(rowId),selectedDescendants.add(rowId)}))}}if(autoSelectParents){const checkAllDescendantsSelected=rowId=>{if(selectedIdsLookup[rowId]!==rowId&&!selectedDescendants.has(rowId))return!1;const node=tree[rowId];return"group"!==node?.type||node.children.every(checkAllDescendantsSelected)},traverseParents=rowId=>{const siblings=((tree,filteredRows,id)=>{const node=tree[id];if(!node)return[];const parent=node.parent;return null==parent?[]:tree[parent].children.filter((childId=>childId!==id&&!1!==filteredRows[childId]))})(tree,filteredRows,rowId);if(0===siblings.length||siblings.every(checkAllDescendantsSelected)){const parent=tree[rowId].parent;null!=parent&&parent!==GRID_ROOT_GROUP_ID&&apiRef.current.isRowSelectable(parent)&&(addRow(parent),selectedDescendants.add(parent),traverseParents(parent))}};traverseParents(selectedRow)}}},findRowsToDeselect=(apiRef,tree,deselectedRow,autoSelectDescendants,autoSelectParents,removeRow)=>{const selectedIdsLookup=selectedIdsLookupSelector(apiRef);if(autoSelectParents||autoSelectDescendants){if(autoSelectParents){const allParents=((tree,id)=>{const parents=[];let parent=id;for(;null!=parent&&parent!==GRID_ROOT_GROUP_ID;){const node=tree[parent];if(!node)return parents;parents.push(parent),parent=node.parent}return parents})(tree,deselectedRow);allParents.forEach((parent=>{selectedIdsLookup[parent]===parent&&removeRow(parent)}))}if(autoSelectDescendants){const rowNode=tree[deselectedRow];if("group"===rowNode?.type){getGridRowGroupSelectableDescendants(apiRef,deselectedRow).forEach((descendant=>{removeRow(descendant)}))}}}};function GridContextProvider({privateApiRef,configuration,props,children}){const apiRef=react.useRef(privateApiRef.current.getPublicApi());return(0,jsx_runtime.jsx)(GridConfigurationContext.Provider,{value:configuration,children:(0,jsx_runtime.jsx)(GridRootPropsContext.Provider,{value:props,children:(0,jsx_runtime.jsx)(GridPrivateApiContext.Provider,{value:privateApiRef,children:(0,jsx_runtime.jsx)(GridApiContext.Provider,{value:apiRef,children})})})})}const forceDebug=function localStorageAvailable(){try{const key="__some_random_key_you_are_not_going_to_use__";return window.localStorage.setItem(key,key),window.localStorage.removeItem(key),!0}catch(err){return!1}}()&&null!=window.localStorage.getItem("DEBUG"),useGridLoggerFactory_noop=()=>{},noopLogger={debug:useGridLoggerFactory_noop,info:useGridLoggerFactory_noop,warn:useGridLoggerFactory_noop,error:useGridLoggerFactory_noop},LOG_LEVELS=["debug","info","warn","error"];function getAppender(name,logLevel,appender=console){const minLogLevelIdx=LOG_LEVELS.indexOf(logLevel);if(-1===minLogLevelIdx)throw new Error(`MUI X: Log level ${logLevel} not recognized.`);return LOG_LEVELS.reduce(((loggerObj,method,idx)=>(loggerObj[method]=idx>=minLogLevelIdx?(...args)=>{const[message,...other]=args;appender[method](`MUI X: ${name} - ${message}`,...other)}:useGridLoggerFactory_noop,loggerObj)),{})}class EventManager{constructor(){this.maxListeners=20,this.warnOnce=!1,this.events={}}on(eventName,listener,options={}){let collection=this.events[eventName];collection||(collection={highPriority:new Map,regular:new Map},this.events[eventName]=collection),options.isFirst?collection.highPriority.set(listener,!0):collection.regular.set(listener,!0)}removeListener(eventName,listener){this.events[eventName]&&(this.events[eventName].regular.delete(listener),this.events[eventName].highPriority.delete(listener))}removeAllListeners(){this.events={}}emit(eventName,...args){const collection=this.events[eventName];if(!collection)return;const highPriorityListeners=Array.from(collection.highPriority.keys()),regularListeners=Array.from(collection.regular.keys());for(let i=highPriorityListeners.length-1;i>=0;i-=1){const listener=highPriorityListeners[i];collection.highPriority.has(listener)&&listener.apply(this,args)}for(let i=0;i<regularListeners.length;i+=1){const listener=regularListeners[i];collection.regular.has(listener)&&listener.apply(this,args)}}once(eventName,listener){const that=this;this.on(eventName,(function oneTimeListener(...args){that.removeListener(eventName,oneTimeListener),listener.apply(that,args)}))}}class Store{static create(value){return new Store(value)}constructor(_value){this.value=void 0,this.listeners=void 0,this.subscribe=fn=>(this.listeners.add(fn),()=>{this.listeners.delete(fn)}),this.getSnapshot=()=>this.value,this.update=value=>{this.value=value,this.listeners.forEach((l=>l(value)))},this.value=_value,this.listeners=new Set}}const SYMBOL_API_PRIVATE=Symbol("mui.api_private");let globalId=0;function useGridApiInitialization(inputApiRef,props){const publicApiRef=react.useRef(null),privateApiRef=react.useRef(null);privateApiRef.current||(privateApiRef.current=function createPrivateAPI(publicApiRef){const existingPrivateApi=publicApiRef.current?.[SYMBOL_API_PRIVATE];if(existingPrivateApi)return existingPrivateApi;const state={},privateApi={state,store:Store.create(state),instanceId:{id:globalId}};return globalId+=1,privateApi.getPublicApi=()=>publicApiRef.current,privateApi.register=(visibility,methods)=>{Object.keys(methods).forEach((methodName=>{const method=methods[methodName],currentPrivateMethod=privateApi[methodName];if(!0===currentPrivateMethod?.spying?currentPrivateMethod.target=method:privateApi[methodName]=method,"public"===visibility){const publicApi=publicApiRef.current,currentPublicMethod=publicApi[methodName];!0===currentPublicMethod?.spying?currentPublicMethod.target=method:publicApi[methodName]=method}}))},privateApi.register("private",{caches:{},eventManager:new EventManager}),privateApi}(publicApiRef)),publicApiRef.current||(publicApiRef.current=function createPublicAPI(privateApiRef){return{get state(){return privateApiRef.current.state},get store(){return privateApiRef.current.store},get instanceId(){return privateApiRef.current.instanceId},[SYMBOL_API_PRIVATE]:privateApiRef.current}}(privateApiRef));const publishEvent=react.useCallback(((...args)=>{const[name,params,event={}]=args;if(event.defaultMuiPrevented=!1,(event=>void 0!==event.isPropagationStopped)(event)&&event.isPropagationStopped())return;const details=props.signature===GridSignature.DataGridPro||props.signature===GridSignature.DataGridPremium?{api:privateApiRef.current.getPublicApi()}:{};privateApiRef.current.eventManager.emit(name,params,event,details)}),[privateApiRef,props.signature]),subscribeEvent=react.useCallback(((event,handler,options)=>{privateApiRef.current.eventManager.on(event,handler,options);const api=privateApiRef.current;return()=>{api.eventManager.removeListener(event,handler)}}),[privateApiRef]);return useGridApiMethod(privateApiRef,{subscribeEvent,publishEvent},"public"),inputApiRef&&!inputApiRef.current?.state&&(inputApiRef.current=publicApiRef.current),react.useImperativeHandle(inputApiRef,(()=>publicApiRef.current),[publicApiRef]),react.useEffect((()=>{const api=privateApiRef.current;return()=>{api.publishEvent("unmount")}}),[privateApiRef]),privateApiRef}function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function toPropertyKey(t){var i=function toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}const GRID_STRATEGIES_PROCESSORS={rowTreeCreation:"rowTree",filtering:"rowTree",sorting:"rowTree",visibleRowsLookupCreation:"rowTree"},propsStateInitializer=(state,props)=>(0,esm_extends.Z)({},state,{props:{getRowId:props.getRowId}}),useGridInitialization=(inputApiRef,props)=>{const privateApiRef=useGridApiInitialization(inputApiRef,props);return(apiRef=>{const rootElementRef=react.useRef(null),mainElementRef=react.useRef(null),virtualScrollerRef=react.useRef(null),virtualScrollbarVerticalRef=react.useRef(null),virtualScrollbarHorizontalRef=react.useRef(null),columnHeadersContainerRef=react.useRef(null);apiRef.current.register("public",{rootElementRef}),apiRef.current.register("private",{mainElementRef,virtualScrollerRef,virtualScrollbarVerticalRef,virtualScrollbarHorizontalRef,columnHeadersContainerRef})})(privateApiRef),((apiRef,props)=>{react.useEffect((()=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{props:{getRowId:props.getRowId}})))}),[apiRef,props.getRowId])})(privateApiRef,props),(apiRef=>{const isRtl=(0,RtlProvider.V)();void 0===apiRef.current.state.isRtl&&(apiRef.current.state.isRtl=isRtl);const isFirstEffect=react.useRef(!0);react.useEffect((()=>{isFirstEffect.current?isFirstEffect.current=!1:apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{isRtl})))}),[apiRef,isRtl])})(privateApiRef),((apiRef,props)=>{useGridApiMethod(apiRef,{getLogger:react.useCallback((name=>forceDebug?getAppender(name,"debug",props.logger):props.logLevel?getAppender(name,props.logLevel.toString(),props.logger):noopLogger),[props.logLevel,props.logger])},"private")})(privateApiRef,props),(apiRef=>{const controlStateMapRef=react.useRef({}),registerControlState=react.useCallback((controlStateItem=>{controlStateMapRef.current[controlStateItem.stateId]=controlStateItem}),[]),setState=react.useCallback(((state,reason)=>{let newState;if(newState=function isFunction(value){return"function"==typeof value}(state)?state(apiRef.current.state):state,apiRef.current.state===newState)return!1;let ignoreSetState=!1;const updatedControlStateIds=[];if(Object.keys(controlStateMapRef.current).forEach((stateId=>{const controlState=controlStateMapRef.current[stateId],oldSubState=controlState.stateSelector(apiRef.current.state,apiRef.current.instanceId),newSubState=controlState.stateSelector(newState,apiRef.current.instanceId);newSubState!==oldSubState&&(updatedControlStateIds.push({stateId:controlState.stateId,hasPropChanged:newSubState!==controlState.propModel}),void 0!==controlState.propModel&&newSubState!==controlState.propModel&&(ignoreSetState=!0))})),updatedControlStateIds.length>1)throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${updatedControlStateIds[0].stateId}, therefore, you're not allowed to update ${updatedControlStateIds.map((el=>el.stateId)).join(", ")} in the same transaction.`);if(ignoreSetState||(apiRef.current.state=newState,apiRef.current.publishEvent("stateChange",newState),apiRef.current.store.update(newState)),1===updatedControlStateIds.length){const{stateId,hasPropChanged}=updatedControlStateIds[0],controlState=controlStateMapRef.current[stateId],model=controlState.stateSelector(newState,apiRef.current.instanceId);controlState.propOnChange&&hasPropChanged&&controlState.propOnChange(model,{reason,api:apiRef.current}),ignoreSetState||apiRef.current.publishEvent(controlState.changeEvent,model,{reason})}return!ignoreSetState}),[apiRef]),updateControlState=react.useCallback(((key,state,reason)=>apiRef.current.setState((previousState=>(0,esm_extends.Z)({},previousState,{[key]:state(previousState[key])})),reason)),[apiRef]),forceUpdate=react.useCallback((()=>{}),[]),privateStateApi={updateControlState,registerControlState};useGridApiMethod(apiRef,{setState,forceUpdate},"public"),useGridApiMethod(apiRef,privateStateApi,"private")})(privateApiRef),(apiRef=>{const cache=react.useRef({}),isRunning=react.useRef(!1),runAppliers=react.useCallback((groupCache=>{!isRunning.current&&groupCache&&(isRunning.current=!0,Object.values(groupCache.appliers).forEach((callback=>{callback()})),isRunning.current=!1)}),[]),registerPipeProcessor=react.useCallback(((group,id,processor)=>{cache.current[group]||(cache.current[group]={processors:new Map,processorsAsArray:[],appliers:{}});const groupCache=cache.current[group];return groupCache.processors.get(id)!==processor&&(groupCache.processors.set(id,processor),groupCache.processorsAsArray=Array.from(cache.current[group].processors.values()),runAppliers(groupCache)),()=>{cache.current[group].processors.delete(id),cache.current[group].processorsAsArray=Array.from(cache.current[group].processors.values())}}),[runAppliers]),registerPipeApplier=react.useCallback(((group,id,applier)=>(cache.current[group]||(cache.current[group]={processors:new Map,processorsAsArray:[],appliers:{}}),cache.current[group].appliers[id]=applier,()=>{const _appliers=cache.current[group].appliers,otherAppliers=(0,objectWithoutPropertiesLoose.Z)(_appliers,[id].map(toPropertyKey));cache.current[group].appliers=otherAppliers})),[]),requestPipeProcessorsApplication=react.useCallback((group=>{runAppliers(cache.current[group])}),[runAppliers]),preProcessingPublicApi={unstable_applyPipeProcessors:react.useCallback(((...args)=>{const[group,value,context]=args;if(!cache.current[group])return value;const processors=cache.current[group].processorsAsArray;let result=value;for(let i=0;i<processors.length;i+=1)result=processors[i](result,context);return result}),[])};useGridApiMethod(apiRef,{registerPipeProcessor,registerPipeApplier,requestPipeProcessorsApplication},"private"),useGridApiMethod(apiRef,preProcessingPublicApi,"public")})(privateApiRef),(apiRef=>{const availableStrategies=react.useRef(new Map),strategiesCache=react.useRef({}),registerStrategyProcessor=react.useCallback(((strategyName,processorName,processor)=>{const cleanup=()=>{const _ref=strategiesCache.current[processorName],otherProcessors=(0,objectWithoutPropertiesLoose.Z)(_ref,[strategyName].map(toPropertyKey));strategiesCache.current[processorName]=otherProcessors};strategiesCache.current[processorName]||(strategiesCache.current[processorName]={});const groupPreProcessors=strategiesCache.current[processorName],previousProcessor=groupPreProcessors[strategyName];return groupPreProcessors[strategyName]=processor,previousProcessor&&previousProcessor!==processor?(strategyName===apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName])&&apiRef.current.publishEvent("activeStrategyProcessorChange",processorName),cleanup):cleanup}),[apiRef]),applyStrategyProcessor=react.useCallback(((processorName,params)=>{const activeStrategy=apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName]);if(null==activeStrategy)throw new Error("Can't apply a strategy processor before defining an active strategy");const groupCache=strategiesCache.current[processorName];if(!groupCache||!groupCache[activeStrategy])throw new Error(`No processor found for processor "${processorName}" on strategy "${activeStrategy}"`);return(0,groupCache[activeStrategy])(params)}),[apiRef]),getActiveStrategy=react.useCallback((strategyGroup=>{const availableStrategyEntry=Array.from(availableStrategies.current.entries()).find((([,strategy])=>strategy.group===strategyGroup&&strategy.isAvailable()));return availableStrategyEntry?.[0]??"none"}),[]),setStrategyAvailability=react.useCallback(((strategyGroup,strategyName,isAvailable)=>{availableStrategies.current.set(strategyName,{group:strategyGroup,isAvailable}),apiRef.current.publishEvent("strategyAvailabilityChange")}),[apiRef]);useGridApiMethod(apiRef,{registerStrategyProcessor,applyStrategyProcessor,getActiveStrategy,setStrategyAvailability},"private")})(privateApiRef),((apiRef,props)=>{const getLocaleText=react.useCallback((key=>{if(null==props.localeText[key])throw new Error(`Missing translation for key ${key}.`);return props.localeText[key]}),[props.localeText]);apiRef.current.register("public",{getLocaleText})})(privateApiRef,props),privateApiRef.current.register("private",{rootProps:props}),privateApiRef},useGridInitializeState=(initializer,privateApiRef,props)=>{const isInitialized=react.useRef(!1);isInitialized.current||(privateApiRef.current.state=initializer(privateApiRef.current.state,props,privateApiRef),isInitialized.current=!0)};function useGridLogger(privateApiRef,name){const logger=react.useRef(null);if(logger.current)return logger.current;const newLogger=privateApiRef.current.getLogger(name);return logger.current=newLogger,newLogger}const useGridNativeEventListener=(apiRef,ref,eventName,handler,options)=>{const logger=useGridLogger(apiRef,"useNativeEventListener");useGridApiOptionHandler(apiRef,"rootMount",(()=>{const targetElement="function"==typeof ref?ref():ref.current;if(targetElement&&eventName&&handler)return logger.debug(`Binding native ${eventName} event`),targetElement.addEventListener(eventName,handler,options),()=>{logger.debug(`Clearing native ${eventName} event`),targetElement.removeEventListener(eventName,handler,options)}}))},GridCellCheckboxRenderer_excluded=["field","id","formattedValue","row","rowNode","colDef","isEditable","cellMode","hasFocus","tabIndex","api"],GridCellCheckboxForwardRef=forwardRef((function GridCellCheckboxRenderer(props,ref){const{field,id,rowNode,hasFocus,tabIndex}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridCellCheckboxRenderer_excluded),apiRef=useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["checkboxInput"]},getDataGridUtilityClass,classes)})({classes:rootProps.classes}),checkboxElement=react.useRef(null),rippleRef=react.useRef(null),handleRef=(0,useForkRef.Z)(checkboxElement,ref);react.useLayoutEffect((()=>{if(0===tabIndex){const element=apiRef.current.getCellElement(id,field);element&&(element.tabIndex=-1)}}),[apiRef,tabIndex,id,field]),react.useEffect((()=>{if(hasFocus){const input=checkboxElement.current?.querySelector("input");input?.focus({preventScroll:!0})}else rippleRef.current&&rippleRef.current.stop({})}),[hasFocus]);const handleKeyDown=react.useCallback((event=>{" "===event.key&&event.stopPropagation()}),[]),isSelectable=apiRef.current.isRowSelectable(id),checkboxPropsSelector=function getCheckboxPropsSelector(groupId,autoSelectParents){return createSelector_createSelector(gridRowTreeSelector,gridSortedRowIdsSelector,gridFilteredRowsLookupSelector,selectedIdsLookupSelector,((rowTree,sortedRowIds,filteredRowsLookup,rowSelectionLookup)=>{const groupNode=rowTree[groupId];if(!groupNode||"group"!==groupNode.type)return{isIndeterminate:!1,isChecked:rowSelectionLookup[groupId]===groupId};if(rowSelectionLookup[groupId]===groupId)return{isIndeterminate:!1,isChecked:!0};let selectableDescendantsCount=0,selectedDescendantsCount=0;for(let index=sortedRowIds.findIndex((id=>id===groupId))+1;index<sortedRowIds.length&&rowTree[sortedRowIds[index]]?.depth>groupNode.depth;index+=1){const id=sortedRowIds[index];!1!==filteredRowsLookup[id]&&(selectableDescendantsCount+=1,void 0!==rowSelectionLookup[id]&&(selectedDescendantsCount+=1))}return{isIndeterminate:selectedDescendantsCount>0&&(selectedDescendantsCount<selectableDescendantsCount||void 0===rowSelectionLookup[groupId]),isChecked:autoSelectParents?selectedDescendantsCount>0:rowSelectionLookup[groupId]===groupId}}))}(id,rootProps.rowSelectionPropagation?.parents??!1),{isIndeterminate,isChecked}=useGridSelector(apiRef,checkboxPropsSelector,objectShallowCompare);if("footer"===rowNode.type||"pinnedRow"===rowNode.type)return null;const checked="select"===rootProps.indeterminateCheckboxAction?isChecked&&!isIndeterminate:isChecked,label=apiRef.current.getLocaleText(checked?"checkboxSelectionUnselectRow":"checkboxSelectionSelectRow");return(0,jsx_runtime.jsx)(rootProps.slots.baseCheckbox,(0,esm_extends.Z)({tabIndex,checked,onChange:event=>{const params={value:event.target.checked,id};apiRef.current.publishEvent("rowSelectionCheckboxChange",params,event)},className:classes.root,inputProps:{"aria-label":label,name:"select_row"},onKeyDown:handleKeyDown,indeterminate:isIndeterminate,disabled:!isSelectable,touchRippleRef:rippleRef},rootProps.slotProps?.baseCheckbox,other,{ref:handleRef}))})),GridCellCheckboxRenderer=GridCellCheckboxForwardRef,GridHeaderCheckbox_excluded=["field","colDef"],GridHeaderCheckbox=forwardRef((function GridHeaderCheckbox(props,ref){const other=(0,objectWithoutPropertiesLoose.Z)(props,GridHeaderCheckbox_excluded),[,forceUpdate]=react.useState(!1),apiRef=useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["checkboxInput"]},getDataGridUtilityClass,classes)})({classes:rootProps.classes}),tabIndexState=useGridSelector(apiRef,gridTabIndexColumnHeaderSelector),selection=useGridSelector(apiRef,gridRowSelectionStateSelector),visibleRowIds=useGridSelector(apiRef,gridExpandedSortedRowIdsSelector),paginatedVisibleRowIds=useGridSelector(apiRef,gridPaginatedVisibleSortedGridRowIdsSelector),filteredSelection=react.useMemo((()=>"function"!=typeof rootProps.isRowSelectable?selection:selection.filter((id=>!!rootProps.keepNonExistentRowsSelected||!!apiRef.current.getRow(id)&&rootProps.isRowSelectable(apiRef.current.getRowParams(id))))),[apiRef,rootProps.isRowSelectable,selection,rootProps.keepNonExistentRowsSelected]),selectionCandidates=react.useMemo((()=>(rootProps.pagination&&rootProps.checkboxSelectionVisibleOnly?paginatedVisibleRowIds:visibleRowIds).reduce(((acc,id)=>(acc[id]=!0,acc)),{})),[rootProps.pagination,rootProps.checkboxSelectionVisibleOnly,paginatedVisibleRowIds,visibleRowIds]),currentSelectionSize=react.useMemo((()=>filteredSelection.filter((id=>selectionCandidates[id])).length),[filteredSelection,selectionCandidates]),isIndeterminate=currentSelectionSize>0&&currentSelectionSize<Object.keys(selectionCandidates).length,isChecked=currentSelectionSize>0,tabIndex=null!==tabIndexState&&tabIndexState.field===props.field?0:-1;react.useLayoutEffect((()=>{const element=apiRef.current.getColumnHeaderElement(props.field);0===tabIndex&&element&&(element.tabIndex=-1)}),[tabIndex,apiRef,props.field]);const handleKeyDown=react.useCallback((event=>{" "===event.key&&apiRef.current.publishEvent("headerSelectionCheckboxChange",{value:!isChecked})}),[apiRef,isChecked]),handleSelectionChange=react.useCallback((()=>{forceUpdate((p=>!p))}),[]);react.useEffect((()=>apiRef.current.subscribeEvent("rowSelectionChange",handleSelectionChange)),[apiRef,handleSelectionChange]);const checked="select"===rootProps.indeterminateCheckboxAction?isChecked&&!isIndeterminate:isChecked,label=apiRef.current.getLocaleText(checked?"checkboxSelectionUnselectAllRows":"checkboxSelectionSelectAllRows");return(0,jsx_runtime.jsx)(rootProps.slots.baseCheckbox,(0,esm_extends.Z)({indeterminate:isIndeterminate,checked,onChange:event=>{const params={value:event.target.checked};apiRef.current.publishEvent("headerSelectionCheckboxChange",params)},className:classes.root,inputProps:{"aria-label":label,name:"select_all_rows"},tabIndex,onKeyDown:handleKeyDown,disabled:!isMultipleRowSelectionEnabled(rootProps)},rootProps.slotProps?.baseCheckbox,other,{ref}))})),GRID_CHECKBOX_SELECTION_COL_DEF=(0,esm_extends.Z)({},GRID_BOOLEAN_COL_DEF,{type:"custom",field:"__check__",width:50,resizable:!1,sortable:!1,filterable:!1,aggregable:!1,disableColumnMenu:!0,disableReorder:!0,disableExport:!0,getApplyQuickFilterFn:void 0,display:"flex",valueGetter:(value,row,column,apiRef)=>void 0!==selectedIdsLookupSelector(apiRef)[gridRowIdSelector(apiRef.current.state,row)],renderHeader:params=>(0,jsx_runtime.jsx)(GridHeaderCheckbox,(0,esm_extends.Z)({},params)),renderCell:params=>(0,jsx_runtime.jsx)(GridCellCheckboxRenderer,(0,esm_extends.Z)({},params))});function sanitizeCellValue(value,csvOptions){if(null==value)return"";const valueStr="string"==typeof value?value:`${value}`;if(csvOptions.shouldAppendQuotes||csvOptions.escapeFormulas){const escapedValue=valueStr.replace(/"/g,'""');return csvOptions.escapeFormulas&&["=","+","-","@","\t","\r"].includes(escapedValue[0])?`"'${escapedValue}"`:[csvOptions.delimiter,"\n","\r",'"'].some((delimiter=>valueStr.includes(delimiter)))?`"${escapedValue}"`:escapedValue}return valueStr}const serializeCellValue=(cellParams,options)=>{const{csvOptions,ignoreValueFormatter}=options;let value;if(ignoreValueFormatter){const columnType=cellParams.colDef.type;value="number"===columnType?String(cellParams.value):"date"===columnType||"dateTime"===columnType?cellParams.value?.toISOString():"function"==typeof cellParams.value?.toString?cellParams.value.toString():cellParams.value}else value=cellParams.formattedValue;return sanitizeCellValue(value,csvOptions)};class CSVRow{constructor(options){this.options=void 0,this.rowString="",this.isEmpty=!0,this.options=options}addValue(value){this.isEmpty||(this.rowString+=this.options.csvOptions.delimiter),"function"==typeof this.options.sanitizeCellValue?this.rowString+=this.options.sanitizeCellValue(value,this.options.csvOptions):this.rowString+=value,this.isEmpty=!1}getRowString(){return this.rowString}}function buildCSV(options){const{columns,rowIds,csvOptions,ignoreValueFormatter,apiRef}=options,CSVBody=rowIds.reduce(((acc,id)=>`${acc}${(({id,columns,getCellParams,csvOptions,ignoreValueFormatter})=>{const row=new CSVRow({csvOptions});return columns.forEach((column=>{const cellParams=getCellParams(id,column.field);row.addValue(serializeCellValue(cellParams,{ignoreValueFormatter,csvOptions}))})),row.getRowString()})({id,columns,getCellParams:apiRef.current.getCellParams,ignoreValueFormatter,csvOptions})}\r\n`),"").trim();if(!csvOptions.includeHeaders)return CSVBody;const filteredColumns=columns.filter((column=>column.field!==GRID_CHECKBOX_SELECTION_COL_DEF.field)),headerRows=[];if(csvOptions.includeColumnGroupsHeaders){const columnGroupLookup=apiRef.current.getAllGroupDetails();let maxColumnGroupsDepth=0;const columnGroupPathsLookup=filteredColumns.reduce(((acc,column)=>{const columnGroupPath=apiRef.current.getColumnGroupPath(column.field);return acc[column.field]=columnGroupPath,maxColumnGroupsDepth=Math.max(maxColumnGroupsDepth,columnGroupPath.length),acc}),{});for(let i=0;i<maxColumnGroupsDepth;i+=1){const headerGroupRow=new CSVRow({csvOptions,sanitizeCellValue});headerRows.push(headerGroupRow),filteredColumns.forEach((column=>{const columnGroupId=(columnGroupPathsLookup[column.field]||[])[i],columnGroup=columnGroupLookup[columnGroupId];headerGroupRow.addValue(columnGroup?columnGroup.headerName||columnGroup.groupId:"")}))}}const mainHeaderRow=new CSVRow({csvOptions,sanitizeCellValue});filteredColumns.forEach((column=>{mainHeaderRow.addValue(column.headerName||column.field)})),headerRows.push(mainHeaderRow);return`${`${headerRows.map((row=>row.getRowString())).join("\r\n")}\r\n`}${CSVBody}`.trim()}function isPrintableKey(event){return 1===event.key.length&&!event.ctrlKey&&!event.metaKey}const isNavigationKey=key=>0===key.indexOf("Arrow")||0===key.indexOf("Page")||" "===key||"Home"===key||"End"===key,isHideMenuKey=key=>"Tab"===key||"Escape"===key;function isPasteShortcut(event){return(event.ctrlKey||event.metaKey)&&"V"===String.fromCharCode(event.keyCode)&&!event.shiftKey&&!event.altKey}function writeToClipboardPolyfill(data){const span=document.createElement("span");span.style.whiteSpace="pre",span.style.userSelect="all",span.style.opacity="0px",span.textContent=data,document.body.appendChild(span);const range=document.createRange();range.selectNode(span);const selection=window.getSelection();selection.removeAllRanges(),selection.addRange(range);try{document.execCommand("copy")}finally{document.body.removeChild(span)}}const useGridClipboard=(apiRef,props)=>{const ignoreValueFormatterProp=props.ignoreValueFormatterDuringExport,ignoreValueFormatter=("object"==typeof ignoreValueFormatterProp?ignoreValueFormatterProp?.clipboardExport:ignoreValueFormatterProp)||!1,clipboardCopyCellDelimiter=props.clipboardCopyCellDelimiter,handleCopy=react.useCallback((event=>{if(!function isCopyShortcut(event){return(event.ctrlKey||event.metaKey)&&"C"===String.fromCharCode(event.keyCode)&&!event.shiftKey&&!event.altKey}(event))return;if(function hasNativeSelection(element){return!!window.getSelection()?.toString()||!!(element&&(element.selectionEnd||0)-(element.selectionStart||0)>0)}(event.target))return;let textToCopy="";if(apiRef.current.getSelectedRows().size>0)textToCopy=apiRef.current.getDataAsCsv({includeHeaders:!1,delimiter:clipboardCopyCellDelimiter,shouldAppendQuotes:!1,escapeFormulas:!1});else{const focusedCell=gridFocusCellSelector(apiRef);if(focusedCell){const cellParams=apiRef.current.getCellParams(focusedCell.id,focusedCell.field);textToCopy=serializeCellValue(cellParams,{csvOptions:{delimiter:clipboardCopyCellDelimiter,shouldAppendQuotes:!1,escapeFormulas:!1},ignoreValueFormatter})}}textToCopy=apiRef.current.unstable_applyPipeProcessors("clipboardCopy",textToCopy),textToCopy&&(!function copyToClipboard(data){navigator.clipboard?navigator.clipboard.writeText(data).catch((()=>{writeToClipboardPolyfill(data)})):writeToClipboardPolyfill(data)}(textToCopy),apiRef.current.publishEvent("clipboardCopy",textToCopy))}),[apiRef,ignoreValueFormatter,clipboardCopyCellDelimiter]);useGridNativeEventListener(apiRef,(()=>apiRef.current.rootElementRef.current),"keydown",handleCopy),useGridApiOptionHandler(apiRef,"clipboardCopy",props.onClipboardCopy)},columnMenuStateInitializer=state=>(0,esm_extends.Z)({},state,{columnMenu:{open:!1}}),useFirstRender=callback=>{const isFirstRender=react.useRef(!0);isFirstRender.current&&(isFirstRender.current=!1,callback())},useGridRegisterPipeProcessor=(apiRef,group,callback,enabled=!0)=>{const cleanup=react.useRef(null),id=react.useRef(`mui-${Math.round(1e9*Math.random())}`),registerPreProcessor=react.useCallback((()=>{cleanup.current=apiRef.current.registerPipeProcessor(group,id.current,callback)}),[apiRef,callback,group]);useFirstRender((()=>{enabled&&registerPreProcessor()}));const isFirstRender=react.useRef(!0);react.useEffect((()=>(isFirstRender.current?isFirstRender.current=!1:enabled&&registerPreProcessor(),()=>{cleanup.current&&(cleanup.current(),cleanup.current=null)})),[registerPreProcessor,enabled])},useGridRegisterPipeApplier=(apiRef,group,callback)=>{const cleanup=react.useRef(null),id=react.useRef(`mui-${Math.round(1e9*Math.random())}`),registerPreProcessor=react.useCallback((()=>{cleanup.current=apiRef.current.registerPipeApplier(group,id.current,callback)}),[apiRef,callback,group]);useFirstRender((()=>{registerPreProcessor()}));const isFirstRender=react.useRef(!0);react.useEffect((()=>(isFirstRender.current?isFirstRender.current=!1:registerPreProcessor(),()=>{cleanup.current&&(cleanup.current(),cleanup.current=null)})),[registerPreProcessor])},columnsStateInitializer=(state,props,apiRef)=>{const columnsState=createColumnsState({apiRef,columnsToUpsert:props.columns,initialState:props.initialState?.columns,columnVisibilityModel:props.columnVisibilityModel??props.initialState?.columns?.columnVisibilityModel??{},keepOnlyColumnsToUpsert:!0});return(0,esm_extends.Z)({},state,{columns:columnsState,pinnedColumns:state.pinnedColumns??EMPTY_PINNED_COLUMN_FIELDS})};function mergeColumnsState(columnsState){return state=>(0,esm_extends.Z)({},state,{columns:columnsState})}const densityStateInitializer=(state,props)=>(0,esm_extends.Z)({},state,{density:props.initialState?.density??props.density??"standard"});const getColumnsToExport=({apiRef,options})=>{const columns=gridColumnDefinitionsSelector(apiRef);if(options.fields)return options.fields.reduce(((currentColumns,field)=>{const column=columns.find((col=>col.field===field));return column&&currentColumns.push(column),currentColumns}),[]);return(options.allColumns?columns:gridVisibleColumnDefinitionsSelector(apiRef)).filter((column=>!column.disableExport))},defaultGetRowsToExport=({apiRef})=>{const filteredSortedRowIds=gridFilteredSortedRowIdsSelector(apiRef),rowTree=gridRowTreeSelector(apiRef),selectedRows=apiRef.current.getSelectedRows(),bodyRows=filteredSortedRowIds.filter((id=>"footer"!==rowTree[id].type)),pinnedRows=gridPinnedRowsSelector(apiRef),topPinnedRowsIds=pinnedRows?.top?.map((row=>row.id))||[],bottomPinnedRowsIds=pinnedRows?.bottom?.map((row=>row.id))||[];return bodyRows.unshift(...topPinnedRowsIds),bodyRows.push(...bottomPinnedRowsIds),selectedRows.size>0?bodyRows.filter((id=>selectedRows.has(id))):bodyRows};var MenuItem=__webpack_require__("./node_modules/@mui/material/MenuItem/MenuItem.js");const GridToolbarExportContainer=forwardRef((function GridToolbarExportContainer(props,ref){const{children,slotProps={}}=props,buttonProps=slotProps.button||{},tooltipProps=slotProps.tooltip||{},apiRef=useGridApiContext(),rootProps=useGridRootProps(),exportButtonId=(0,useId.Z)(),exportMenuId=(0,useId.Z)(),[open,setOpen]=react.useState(!1),buttonRef=react.useRef(null),handleRef=(0,useForkRef.Z)(ref,buttonRef),handleMenuClose=()=>setOpen(!1);return null==children?null:(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(rootProps.slots.baseTooltip,(0,esm_extends.Z)({title:apiRef.current.getLocaleText("toolbarExportLabel"),enterDelay:1e3},rootProps.slotProps?.baseTooltip,tooltipProps,{children:(0,jsx_runtime.jsx)(rootProps.slots.baseButton,(0,esm_extends.Z)({size:"small",startIcon:(0,jsx_runtime.jsx)(rootProps.slots.exportIcon,{}),"aria-expanded":open,"aria-label":apiRef.current.getLocaleText("toolbarExportLabel"),"aria-haspopup":"menu","aria-controls":open?exportMenuId:void 0,id:exportButtonId},rootProps.slotProps?.baseButton,buttonProps,{onClick:event=>{setOpen((prevOpen=>!prevOpen)),buttonProps.onClick?.(event)},ref:handleRef,children:apiRef.current.getLocaleText("toolbarExport")}))})),(0,jsx_runtime.jsx)(GridMenu,{open,target:buttonRef.current,onClose:handleMenuClose,position:"bottom-start",children:(0,jsx_runtime.jsx)(MenuList.Z,{id:exportMenuId,className:gridClasses.menuList,"aria-labelledby":exportButtonId,onKeyDown:event=>{"Tab"===event.key&&event.preventDefault(),isHideMenuKey(event.key)&&handleMenuClose()},autoFocusItem:open,children:react.Children.map(children,(child=>react.isValidElement(child)?react.cloneElement(child,{hideMenu:handleMenuClose}):child))})})]})})),GridToolbarExport_excluded=["hideMenu","options"],GridToolbarExport_excluded2=["hideMenu","options"],_excluded3=["csvOptions","printOptions","excelOptions"];function GridCsvExportMenuItem(props){const apiRef=useGridApiContext(),{hideMenu,options}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridToolbarExport_excluded);return(0,jsx_runtime.jsx)(MenuItem.Z,(0,esm_extends.Z)({onClick:()=>{apiRef.current.exportDataAsCsv(options),hideMenu?.()}},other,{children:apiRef.current.getLocaleText("toolbarExportCSV")}))}function GridPrintExportMenuItem(props){const apiRef=useGridApiContext(),{hideMenu,options}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridToolbarExport_excluded2);return(0,jsx_runtime.jsx)(MenuItem.Z,(0,esm_extends.Z)({onClick:()=>{apiRef.current.exportDataAsPrint(options),hideMenu?.()}},other,{children:apiRef.current.getLocaleText("toolbarExportPrint")}))}forwardRef((function GridToolbarExport(props,ref){const _ref=props,{csvOptions={},printOptions={},excelOptions}=_ref,other=(0,objectWithoutPropertiesLoose.Z)(_ref,_excluded3),preProcessedButtons=useGridApiContext().current.unstable_applyPipeProcessors("exportMenu",[],{excelOptions,csvOptions,printOptions}).sort(((a,b)=>a.componentName>b.componentName?1:-1));return 0===preProcessedButtons.length?null:(0,jsx_runtime.jsx)(GridToolbarExportContainer,(0,esm_extends.Z)({},other,{ref,children:preProcessedButtons.map(((button,index)=>react.cloneElement(button.component,{key:index})))}))}));const useGridCsvExport=(apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridCsvExport"),ignoreValueFormatterProp=props.ignoreValueFormatterDuringExport,ignoreValueFormatter=("object"==typeof ignoreValueFormatterProp?ignoreValueFormatterProp?.csvExport:ignoreValueFormatterProp)||!1,getDataAsCsv=react.useCallback(((options={})=>{logger.debug("Get data as CSV");return buildCSV({columns:getColumnsToExport({apiRef,options}),rowIds:(options.getRowsToExport??defaultGetRowsToExport)({apiRef}),csvOptions:{delimiter:options.delimiter||",",shouldAppendQuotes:options.shouldAppendQuotes??!0,includeHeaders:options.includeHeaders??!0,includeColumnGroupsHeaders:options.includeColumnGroupsHeaders??!0,escapeFormulas:options.escapeFormulas??!0},ignoreValueFormatter,apiRef})}),[logger,apiRef,ignoreValueFormatter]),exportDataAsCsv=react.useCallback((options=>{logger.debug("Export data as CSV");const csv=getDataAsCsv(options);!function exportAs(blob,extension="csv",filename=document.title||"untitled"){const fullName=`${filename}.${extension}`;if("download"in HTMLAnchorElement.prototype){const url=URL.createObjectURL(blob),a=document.createElement("a");return a.href=url,a.download=fullName,a.click(),void setTimeout((()=>{URL.revokeObjectURL(url)}))}throw new Error("MUI X: exportAs not supported.")}(new Blob([options?.utf8WithBom?new Uint8Array([239,187,191]):"",csv],{type:"text/csv"}),"csv",options?.fileName)}),[logger,getDataAsCsv]);useGridApiMethod(apiRef,{getDataAsCsv,exportDataAsCsv},"public");const addExportMenuButtons=react.useCallback(((initialValue,options)=>options.csvOptions?.disableToolbarButton?initialValue:[...initialValue,{component:(0,jsx_runtime.jsx)(GridCsvExportMenuItem,{options:options.csvOptions}),componentName:"csvExport"}]),[]);useGridRegisterPipeProcessor(apiRef,"exportMenu",addExportMenuButtons)};var ownerDocument=__webpack_require__("./node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js");const getDerivedPaginationModel=(paginationState,signature,paginationModelProp)=>{let paginationModel=paginationState.paginationModel;const rowCount=paginationState.rowCount,pageSize=paginationModelProp?.pageSize??paginationModel.pageSize,page=paginationModelProp?.page??paginationModel.page,pageCount=getPageCount(rowCount,pageSize,page);!paginationModelProp||paginationModelProp?.page===paginationModel.page&&paginationModelProp?.pageSize===paginationModel.pageSize||(paginationModel=paginationModelProp);const validPage=-1===pageSize?0:((page,pageCount=0)=>0===pageCount?page:Math.max(Math.min(page,pageCount-1),0))(paginationModel.page,pageCount);return validPage!==paginationModel.page&&(paginationModel=(0,esm_extends.Z)({},paginationModel,{page:validPage})),throwIfPageSizeExceedsTheLimit(paginationModel.pageSize,signature),paginationModel};const useGridPrintExport=(apiRef,props)=>{const hasRootReference=null!==apiRef.current.rootElementRef.current,logger=useGridLogger(apiRef,"useGridPrintExport"),doc=react.useRef(null),previousGridState=react.useRef(null),previousColumnVisibility=react.useRef({}),previousRows=react.useRef([]),previousVirtualizationState=react.useRef(null);react.useEffect((()=>{doc.current=(0,ownerDocument.Z)(apiRef.current.rootElementRef.current)}),[apiRef,hasRootReference]);const updateGridColumnsForPrint=react.useCallback(((fields,allColumns,includeCheckboxes)=>new Promise((resolve=>{const exportedColumnFields=getColumnsToExport({apiRef,options:{fields,allColumns}}).map((column=>column.field)),columns=gridColumnDefinitionsSelector(apiRef),newColumnVisibilityModel={};columns.forEach((column=>{newColumnVisibilityModel[column.field]=exportedColumnFields.includes(column.field)})),includeCheckboxes&&(newColumnVisibilityModel[GRID_CHECKBOX_SELECTION_COL_DEF.field]=!0),apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel),resolve()}))),[apiRef]),updateGridRowsForPrint=react.useCallback((getRowsToExport=>{const newRows=getRowsToExport({apiRef}).reduce(((acc,id)=>{const row=apiRef.current.getRow(id);return row[GRID_ID_AUTOGENERATED]||acc.push(row),acc}),[]);apiRef.current.setRows(newRows)}),[apiRef]),handlePrintWindowLoad=react.useCallback(((printWindow,options)=>{const normalizeOptions=(0,esm_extends.Z)({copyStyles:!0,hideToolbar:!1,hideFooter:!1,includeCheckboxes:!1},options),printDoc=printWindow.contentDocument;if(!printDoc)return;const rowsMeta=gridRowsMetaSelector(apiRef.current.state),gridRootElement=apiRef.current.rootElementRef.current,gridClone=gridRootElement.cloneNode(!0);gridClone.querySelector(`.${gridClasses.main}`).style.overflow="visible",gridClone.style.contain="size";let gridToolbarElementHeight=gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)?.offsetHeight||0,gridFooterElementHeight=gridRootElement.querySelector(`.${gridClasses.footerContainer}`)?.offsetHeight||0;normalizeOptions.hideToolbar&&(gridClone.querySelector(`.${gridClasses.toolbarContainer}`)?.remove(),gridToolbarElementHeight=0),normalizeOptions.hideFooter&&(gridClone.querySelector(`.${gridClasses.footerContainer}`)?.remove(),gridFooterElementHeight=0);const computedTotalHeight=rowsMeta.currentPageTotalHeight+getTotalHeaderHeight(apiRef,props)+gridToolbarElementHeight+gridFooterElementHeight;if(gridClone.style.height=`${computedTotalHeight}px`,gridClone.style.boxSizing="content-box",!normalizeOptions.hideFooter){const gridFooterElement=gridClone.querySelector(`.${gridClasses.footerContainer}`);gridFooterElement.style.position="absolute",gridFooterElement.style.width="100%",gridFooterElement.style.top=computedTotalHeight-gridFooterElementHeight+"px"}const container=document.createElement("div");container.appendChild(gridClone),printDoc.body.style.marginTop="0px",printDoc.body.innerHTML=container.innerHTML;const defaultPageStyle="function"==typeof normalizeOptions.pageStyle?normalizeOptions.pageStyle():normalizeOptions.pageStyle;if("string"==typeof defaultPageStyle){const styleElement=printDoc.createElement("style");styleElement.appendChild(printDoc.createTextNode(defaultPageStyle)),printDoc.head.appendChild(styleElement)}normalizeOptions.bodyClassName&&printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(" "));const stylesheetLoadPromises=[];if(normalizeOptions.copyStyles){const rootCandidate=gridRootElement.getRootNode(),headStyleElements=("ShadowRoot"===rootCandidate.constructor.name?rootCandidate:doc.current).querySelectorAll("style, link[rel='stylesheet']");for(let i=0;i<headStyleElements.length;i+=1){const node=headStyleElements[i];if("STYLE"===node.tagName){const newHeadStyleElements=printDoc.createElement(node.tagName),sheet=node.sheet;if(sheet){let styleCSS="";for(let j=0;j<sheet.cssRules.length;j+=1)"string"==typeof sheet.cssRules[j].cssText&&(styleCSS+=`${sheet.cssRules[j].cssText}\r\n`);newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS)),printDoc.head.appendChild(newHeadStyleElements)}}else if(node.getAttribute("href")){const newHeadStyleElements=printDoc.createElement(node.tagName);for(let j=0;j<node.attributes.length;j+=1){const attr=node.attributes[j];attr&&newHeadStyleElements.setAttribute(attr.nodeName,attr.nodeValue||"")}stylesheetLoadPromises.push(new Promise((resolve=>{newHeadStyleElements.addEventListener("load",(()=>resolve()))}))),printDoc.head.appendChild(newHeadStyleElements)}}}Promise.all(stylesheetLoadPromises).then((()=>{printWindow.contentWindow.print()}))}),[apiRef,doc,props]),handlePrintWindowAfterPrint=react.useCallback((printWindow=>{doc.current.body.removeChild(printWindow),apiRef.current.restoreState(previousGridState.current||{}),previousGridState.current?.columns?.columnVisibilityModel||apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{virtualization:previousVirtualizationState.current}))),apiRef.current.setRows(previousRows.current),previousGridState.current=null,previousColumnVisibility.current={},previousRows.current=[]}),[apiRef]),exportDataAsPrint=react.useCallback((async options=>{if(logger.debug("Export data as Print"),!apiRef.current.rootElementRef.current)throw new Error("MUI X: No grid root element available.");if(previousGridState.current=apiRef.current.exportState(),previousColumnVisibility.current=gridColumnVisibilityModelSelector(apiRef),previousRows.current=apiRef.current.getSortedRows().filter((row=>!row[GRID_ID_AUTOGENERATED])),props.pagination){const paginationModel={page:0,pageSize:gridExpandedRowCountSelector(apiRef)};apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{pagination:(0,esm_extends.Z)({},state.pagination,{paginationModel:getDerivedPaginationModel(state.pagination,"DataGridPro",paginationModel)})})))}previousVirtualizationState.current=apiRef.current.state.virtualization,apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{virtualization:(0,esm_extends.Z)({},state.virtualization,{enabled:!1,enabledForColumns:!1})}))),await updateGridColumnsForPrint(options?.fields,options?.allColumns,options?.includeCheckboxes),updateGridRowsForPrint(options?.getRowsToExport??defaultGetRowsToExport),await function raf(){return new Promise((resolve=>{requestAnimationFrame((()=>{resolve()}))}))}();const printWindow=function buildPrintWindow(title){const iframeEl=document.createElement("iframe");return iframeEl.style.position="absolute",iframeEl.style.width="0px",iframeEl.style.height="0px",iframeEl.title=title||document.title,iframeEl}(options?.fileName);printWindow.onload=()=>{handlePrintWindowLoad(printWindow,options);printWindow.contentWindow.matchMedia("print").addEventListener("change",(mql=>{!1===mql.matches&&handlePrintWindowAfterPrint(printWindow)}))},doc.current.body.appendChild(printWindow)}),[props,logger,apiRef,handlePrintWindowLoad,handlePrintWindowAfterPrint,updateGridColumnsForPrint,updateGridRowsForPrint]);useGridApiMethod(apiRef,{exportDataAsPrint},"public");const addExportMenuButtons=react.useCallback(((initialValue,options)=>options.printOptions?.disableToolbarButton?initialValue:[...initialValue,{component:(0,jsx_runtime.jsx)(GridPrintExportMenuItem,{options:options.printOptions}),componentName:"printExport"}]),[]);useGridRegisterPipeProcessor(apiRef,"exportMenu",addExportMenuButtons)},useGridRegisterStrategyProcessor=(apiRef,strategyName,group,processor)=>{const registerPreProcessor=react.useCallback((()=>{apiRef.current.registerStrategyProcessor(strategyName,group,processor)}),[apiRef,processor,group,strategyName]);useFirstRender((()=>{registerPreProcessor()}));const isFirstRender=react.useRef(!0);react.useEffect((()=>{isFirstRender.current?isFirstRender.current=!1:registerPreProcessor()}),[registerPreProcessor])},filterStateInitializer=(state,props,apiRef)=>{const filterModel=props.filterModel??props.initialState?.filter?.filterModel??getDefaultGridFilterModel();return(0,esm_extends.Z)({},state,{filter:(0,esm_extends.Z)({filterModel:sanitizeFilterModel(filterModel,props.disableMultipleColumnsFiltering,apiRef)},defaultGridFilterLookup),visibleRowsLookup:{}})},getVisibleRowsLookup=params=>params.filteredRowsLookup;function getVisibleRowsLookupState(apiRef,state){return apiRef.current.applyStrategyProcessor("visibleRowsLookupCreation",{tree:state.rows.tree,filteredRowsLookup:state.filter.filteredRowsLookup})}function createMemoizedValues(){return lruMemoize(Object.values)}const focusStateInitializer=state=>(0,esm_extends.Z)({},state,{focus:{cell:null,columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null},tabIndex:{cell:null,columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null}});function findParentElementFromClassName(elem,className){return elem.closest(`.${className}`)}function escapeOperandAttributeSelector(operand){return operand.replace(/["\\]/g,"\\$&")}function getGridRowElementSelector(id){return`.${gridClasses.row}[data-id="${escapeOperandAttributeSelector(String(id))}"]`}function isEventTargetInPortal(event){return 1===event.target.nodeType&&!event.currentTarget.contains(event.target)}function findGridElement(api,klass){return api.rootElementRef.current.querySelector(`.${gridClasses[klass]}`)}const findPinnedCells=({api,colIndex,position,filterFn})=>{if(null===colIndex)return[];const cells=[];return queryRows(api).forEach((rowElement=>{rowElement.getAttribute("data-id")&&rowElement.querySelectorAll(`.${gridClasses["left"===position?"cell--pinnedLeft":"cell--pinnedRight"]}`).forEach((cell=>{const currentColIndex=parseCellColIndex(cell);null!==currentColIndex&&filterFn(currentColIndex)&&cells.push(cell)}))})),cells};const findPinnedHeaders=({api,colIndex,position,filterFn})=>{if(!api.columnHeadersContainerRef?.current)return[];if(null===colIndex)return[];const elements=[];return api.columnHeadersContainerRef.current.querySelectorAll(`.${gridClasses["left"===position?"columnHeader--pinnedLeft":"columnHeader--pinnedRight"]}`).forEach((element=>{const currentColIndex=parseCellColIndex(element);null!==currentColIndex&&filterFn(currentColIndex,element)&&elements.push(element)})),elements};function queryRows(api){return api.virtualScrollerRef.current.querySelectorAll(`:scope > div > div > .${gridClasses.row}`)}function parseCellColIndex(col){const ariaColIndex=col.getAttribute("aria-colindex");return ariaColIndex?Number(ariaColIndex)-1:null}const getLeftColumnIndex=({currentColIndex,firstColIndex,lastColIndex,isRtl})=>{if(isRtl){if(currentColIndex<lastColIndex)return currentColIndex+1}else if(!isRtl&&currentColIndex>firstColIndex)return currentColIndex-1;return null},getRightColumnIndex=({currentColIndex,firstColIndex,lastColIndex,isRtl})=>{if(isRtl){if(currentColIndex>firstColIndex)return currentColIndex-1}else if(!isRtl&&currentColIndex<lastColIndex)return currentColIndex+1;return null};const gridVisibleRowsWithPinnedRowsSelector=createSelectorMemoized(gridVisibleRowsSelector,gridPinnedRowsSelector,((visibleRows,pinnedRows)=>(pinnedRows.top||[]).concat(visibleRows.rows,pinnedRows.bottom||[]))),useGridKeyboardNavigation=(apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridKeyboardNavigation"),isRtl=(0,RtlProvider.V)(),listView=props.unstable_listView,getCurrentPageRows=react.useCallback((()=>gridVisibleRowsWithPinnedRowsSelector(apiRef)),[apiRef]),headerFilteringEnabled="DataGrid"!==props.signature&&props.headerFilters,goToCell=react.useCallback(((colIndex,rowId,closestColumnToUse="left",rowSpanScanDirection="up")=>{const visibleSortedRows=gridExpandedSortedRowEntriesSelector(apiRef),nextCellColSpanInfo=apiRef.current.unstable_getCellColSpanInfo(rowId,colIndex);nextCellColSpanInfo&&nextCellColSpanInfo.spannedByColSpan&&("left"===closestColumnToUse?colIndex=nextCellColSpanInfo.leftVisibleCellIndex:"right"===closestColumnToUse&&(colIndex=nextCellColSpanInfo.rightVisibleCellIndex));const field=listView?gridListColumnSelector(apiRef.current.state).field:gridVisibleColumnFieldsSelector(apiRef)[colIndex],nonRowSpannedRowId=function findNonRowSpannedCell(apiRef,rowId,field,rowSpanScanDirection){const rowSpanHiddenCells=gridRowSpanningHiddenCellsSelector(apiRef);if(!rowSpanHiddenCells[rowId]?.[field])return rowId;const filteredSortedRowIds=gridFilteredSortedRowIdsSelector(apiRef);let nextRowIndex=filteredSortedRowIds.indexOf(rowId)+("down"===rowSpanScanDirection?1:-1);for(;nextRowIndex>=0&&nextRowIndex<filteredSortedRowIds.length;){const nextRowId=filteredSortedRowIds[nextRowIndex];if(!rowSpanHiddenCells[nextRowId]?.[field])return nextRowId;nextRowIndex+="down"===rowSpanScanDirection?1:-1}return rowId}(apiRef,rowId,field,rowSpanScanDirection),rowIndexRelativeToAllRows=visibleSortedRows.findIndex((row=>row.id===nonRowSpannedRowId));logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`),apiRef.current.scrollToIndexes({colIndex,rowIndex:rowIndexRelativeToAllRows}),apiRef.current.setCellFocus(nonRowSpannedRowId,field)}),[apiRef,logger,listView]),goToHeader=react.useCallback(((colIndex,event)=>{logger.debug(`Navigating to header col ${colIndex}`),apiRef.current.scrollToIndexes({colIndex});const field=apiRef.current.getVisibleColumns()[colIndex].field;apiRef.current.setColumnHeaderFocus(field,event)}),[apiRef,logger]),goToHeaderFilter=react.useCallback(((colIndex,event)=>{logger.debug(`Navigating to header filter col ${colIndex}`),apiRef.current.scrollToIndexes({colIndex});const field=apiRef.current.getVisibleColumns()[colIndex].field;apiRef.current.setColumnHeaderFilterFocus(field,event)}),[apiRef,logger]),goToGroupHeader=react.useCallback(((colIndex,depth,event)=>{logger.debug(`Navigating to header col ${colIndex}`),apiRef.current.scrollToIndexes({colIndex});const{field}=apiRef.current.getVisibleColumns()[colIndex];apiRef.current.setColumnGroupHeaderFocus(field,depth,event)}),[apiRef,logger]),getRowIdFromIndex=react.useCallback((rowIndex=>getCurrentPageRows()[rowIndex]?.id),[getCurrentPageRows]),handleColumnHeaderKeyDown=react.useCallback(((params,event)=>{const headerTitleNode=event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);if(!!headerTitleNode&&headerTitleNode.contains(event.target)&&params.field!==GRID_CHECKBOX_SELECTION_COL_DEF.field)return;const currentPageRows=getCurrentPageRows(),viewportPageSize=apiRef.current.getViewportPageSize(),colIndexBefore=params.field?apiRef.current.getColumnIndex(params.field):0,firstRowIndexInPage=currentPageRows.length>0?0:null,lastRowIndexInPage=currentPageRows.length-1,lastColIndex=gridVisibleColumnDefinitionsSelector(apiRef).length-1,columnGroupMaxDepth=gridColumnGroupsHeaderMaxDepthSelector(apiRef);let shouldPreventDefault=!0;switch(event.key){case"ArrowDown":headerFilteringEnabled?goToHeaderFilter(colIndexBefore,event):null!==firstRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(firstRowIndexInPage));break;case"ArrowRight":{const rightColIndex=getRightColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,isRtl});null!==rightColIndex&&goToHeader(rightColIndex,event);break}case"ArrowLeft":{const leftColIndex=getLeftColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,isRtl});null!==leftColIndex&&goToHeader(leftColIndex,event);break}case"ArrowUp":columnGroupMaxDepth>0&&goToGroupHeader(colIndexBefore,columnGroupMaxDepth-1,event);break;case"PageDown":null!==firstRowIndexInPage&&null!==lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(Math.min(firstRowIndexInPage+viewportPageSize,lastRowIndexInPage)));break;case"Home":goToHeader(0,event);break;case"End":goToHeader(lastColIndex,event);break;case"Enter":(event.ctrlKey||event.metaKey)&&apiRef.current.toggleColumnMenu(params.field);break;case" ":break;default:shouldPreventDefault=!1}shouldPreventDefault&&event.preventDefault()}),[apiRef,getCurrentPageRows,headerFilteringEnabled,goToHeaderFilter,goToCell,getRowIdFromIndex,isRtl,goToHeader,goToGroupHeader]),handleHeaderFilterKeyDown=react.useCallback(((params,event)=>{const isEditing=gridHeaderFilteringEditFieldSelector(apiRef)===params.field,isHeaderMenuOpen=gridHeaderFilteringMenuSelector(apiRef)===params.field;if(isEditing||isHeaderMenuOpen||!isNavigationKey(event.key))return;const currentPageRows=getCurrentPageRows(),viewportPageSize=apiRef.current.getViewportPageSize(),colIndexBefore=params.field?apiRef.current.getColumnIndex(params.field):0,lastRowIndexInPage=currentPageRows.length-1,lastColIndex=gridVisibleColumnDefinitionsSelector(apiRef).length-1;let shouldPreventDefault=!0;switch(event.key){case"ArrowDown":{const rowId=getRowIdFromIndex(0);null!=rowId&&goToCell(colIndexBefore,rowId);break}case"ArrowRight":{const rightColIndex=getRightColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,isRtl});null!==rightColIndex&&goToHeaderFilter(rightColIndex,event);break}case"ArrowLeft":{const leftColIndex=getLeftColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,isRtl});null!==leftColIndex?goToHeaderFilter(leftColIndex,event):apiRef.current.setColumnHeaderFilterFocus(params.field,event);break}case"ArrowUp":goToHeader(colIndexBefore,event);break;case"PageDown":null!==lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(Math.min(0+viewportPageSize,lastRowIndexInPage)));break;case"Home":goToHeaderFilter(0,event);break;case"End":goToHeaderFilter(lastColIndex,event);break;case" ":break;default:shouldPreventDefault=!1}shouldPreventDefault&&event.preventDefault()}),[apiRef,getCurrentPageRows,goToHeaderFilter,isRtl,goToHeader,goToCell,getRowIdFromIndex]),handleColumnGroupHeaderKeyDown=react.useCallback(((params,event)=>{const focusedColumnGroup=gridFocusColumnGroupHeaderSelector(apiRef);if(null===focusedColumnGroup)return;const{field:currentField,depth:currentDepth}=focusedColumnGroup,{fields,depth,maxDepth}=params,currentPageRows=getCurrentPageRows(),viewportPageSize=apiRef.current.getViewportPageSize(),currentColIndex=apiRef.current.getColumnIndex(currentField),colIndexBefore=currentField?apiRef.current.getColumnIndex(currentField):0,lastRowIndexInPage=currentPageRows.length-1,lastColIndex=gridVisibleColumnDefinitionsSelector(apiRef).length-1;let shouldPreventDefault=!0;switch(event.key){case"ArrowDown":depth===maxDepth-1?goToHeader(currentColIndex,event):goToGroupHeader(currentColIndex,currentDepth+1,event);break;case"ArrowUp":depth>0&&goToGroupHeader(currentColIndex,currentDepth-1,event);break;case"ArrowRight":{const remainingRightColumns=fields.length-fields.indexOf(currentField)-1;currentColIndex+remainingRightColumns+1<=lastColIndex&&goToGroupHeader(currentColIndex+remainingRightColumns+1,currentDepth,event);break}case"ArrowLeft":{const remainingLeftColumns=fields.indexOf(currentField);currentColIndex-remainingLeftColumns-1>=0&&goToGroupHeader(currentColIndex-remainingLeftColumns-1,currentDepth,event);break}case"PageDown":null!==lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(Math.min(0+viewportPageSize,lastRowIndexInPage)));break;case"Home":goToGroupHeader(0,currentDepth,event);break;case"End":goToGroupHeader(lastColIndex,currentDepth,event);break;case" ":break;default:shouldPreventDefault=!1}shouldPreventDefault&&event.preventDefault()}),[apiRef,getCurrentPageRows,goToHeader,goToGroupHeader,goToCell,getRowIdFromIndex]),handleCellKeyDown=react.useCallback(((params,event)=>{if(isEventTargetInPortal(event))return;const cellParams=apiRef.current.getCellParams(params.id,params.field);if(cellParams.cellMode===GridCellModes.Edit||!isNavigationKey(event.key))return;if(!apiRef.current.unstable_applyPipeProcessors("canUpdateFocus",!0,{event,cell:cellParams}))return;const currentPageRows=getCurrentPageRows();if(0===currentPageRows.length)return;const viewportPageSize=apiRef.current.getViewportPageSize(),getColumnIndexFn=listView?()=>0:apiRef.current.getColumnIndex,colIndexBefore=params.field?getColumnIndexFn(params.field):0,rowIndexBefore=currentPageRows.findIndex((row=>row.id===params.id)),lastRowIndexInPage=currentPageRows.length-1,lastColIndex=(listView?[gridListColumnSelector(apiRef.current.state)]:gridVisibleColumnDefinitionsSelector(apiRef)).length-1;let shouldPreventDefault=!0;switch(event.key){case"ArrowDown":rowIndexBefore<lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(rowIndexBefore+1),isRtl?"right":"left","down");break;case"ArrowUp":rowIndexBefore>0?goToCell(colIndexBefore,getRowIdFromIndex(rowIndexBefore-1)):headerFilteringEnabled?goToHeaderFilter(colIndexBefore,event):goToHeader(colIndexBefore,event);break;case"ArrowRight":{const rightColIndex=getRightColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,isRtl});null!==rightColIndex&&goToCell(rightColIndex,getRowIdFromIndex(rowIndexBefore),isRtl?"left":"right");break}case"ArrowLeft":{const leftColIndex=getLeftColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,isRtl});null!==leftColIndex&&goToCell(leftColIndex,getRowIdFromIndex(rowIndexBefore),isRtl?"right":"left");break}case"Tab":event.shiftKey&&colIndexBefore>0?goToCell(colIndexBefore-1,getRowIdFromIndex(rowIndexBefore),"left"):!event.shiftKey&&colIndexBefore<lastColIndex&&goToCell(colIndexBefore+1,getRowIdFromIndex(rowIndexBefore),"right");break;case" ":{if("__detail_panel_toggle__"===params.field)break;const colDef=params.colDef;if(colDef&&("__tree_data_group__"===colDef.field||(field=>"__row_group_by_columns_group__"===field||null!==(groupingColDefField=>{const match=groupingColDefField.match(/^__row_group_by_columns_group_(.*)__$/);return match?match[1]:null})(field))(colDef.field)))break;!event.shiftKey&&rowIndexBefore<lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(Math.min(rowIndexBefore+viewportPageSize,lastRowIndexInPage)));break}case"PageDown":rowIndexBefore<lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(Math.min(rowIndexBefore+viewportPageSize,lastRowIndexInPage)));break;case"PageUp":{const nextRowIndex=Math.max(rowIndexBefore-viewportPageSize,0);nextRowIndex!==rowIndexBefore&&nextRowIndex>=0?goToCell(colIndexBefore,getRowIdFromIndex(nextRowIndex)):goToHeader(colIndexBefore,event);break}case"Home":event.ctrlKey||event.metaKey||event.shiftKey?goToCell(0,getRowIdFromIndex(0)):goToCell(0,getRowIdFromIndex(rowIndexBefore));break;case"End":event.ctrlKey||event.metaKey||event.shiftKey?goToCell(lastColIndex,getRowIdFromIndex(lastRowIndexInPage)):goToCell(lastColIndex,getRowIdFromIndex(rowIndexBefore));break;default:shouldPreventDefault=!1}shouldPreventDefault&&event.preventDefault()}),[apiRef,getCurrentPageRows,isRtl,goToCell,getRowIdFromIndex,headerFilteringEnabled,goToHeaderFilter,goToHeader,listView]),checkIfCanStartEditing=react.useCallback(((initialValue,{event})=>" "!==event.key&&initialValue),[]);useGridRegisterPipeProcessor(apiRef,"canStartEditing",checkIfCanStartEditing),useGridApiEventHandler(apiRef,"columnHeaderKeyDown",handleColumnHeaderKeyDown),useGridApiEventHandler(apiRef,"headerFilterKeyDown",handleHeaderFilterKeyDown),useGridApiEventHandler(apiRef,"columnGroupHeaderKeyDown",handleColumnGroupHeaderKeyDown),useGridApiEventHandler(apiRef,"cellKeyDown",handleCellKeyDown)},paginationStateInitializer=(state,props)=>{const paginationModel=(0,esm_extends.Z)({},getDefaultGridPaginationModel(props.autoPageSize),props.paginationModel??props.initialState?.pagination?.paginationModel);throwIfPageSizeExceedsTheLimit(paginationModel.pageSize,props.signature);const rowCount=props.rowCount??props.initialState?.pagination?.rowCount??("client"===props.paginationMode?state.rows?.totalRowCount:void 0),meta=props.paginationMeta??props.initialState?.pagination?.meta??{};return(0,esm_extends.Z)({},state,{pagination:(0,esm_extends.Z)({},state.pagination,{paginationModel,rowCount,meta,enabled:!0===props.pagination,paginationMode:props.paginationMode})})},useGridPagination=(apiRef,props)=>{((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridPaginationMeta"),paginationMeta=useGridSelector(apiRef,gridPaginationMetaSelector);apiRef.current.registerControlState({stateId:"paginationMeta",propModel:props.paginationMeta,propOnChange:props.onPaginationMetaChange,stateSelector:gridPaginationMetaSelector,changeEvent:"paginationMetaChange"});const setPaginationMeta=react.useCallback((newPaginationMeta=>{paginationMeta!==newPaginationMeta&&(logger.debug("Setting 'paginationMeta' to",newPaginationMeta),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{pagination:(0,esm_extends.Z)({},state.pagination,{meta:newPaginationMeta})}))))}),[apiRef,logger,paginationMeta]);useGridApiMethod(apiRef,{setPaginationMeta},"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{const exportedPaginationMeta=gridPaginationMetaSelector(apiRef);return context.exportOnlyDirtyModels&&null==props.paginationMeta&&null==props.initialState?.pagination?.meta?prevState:(0,esm_extends.Z)({},prevState,{pagination:(0,esm_extends.Z)({},prevState.pagination,{meta:exportedPaginationMeta})})}),[apiRef,props.paginationMeta,props.initialState?.pagination?.meta]),stateRestorePreProcessing=react.useCallback(((params,context)=>{const restoredPaginationMeta=context.stateToRestore.pagination?.meta?context.stateToRestore.pagination.meta:gridPaginationMetaSelector(apiRef);return apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{pagination:(0,esm_extends.Z)({},state.pagination,{meta:restoredPaginationMeta})}))),params}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing),react.useEffect((()=>{props.paginationMeta&&apiRef.current.setPaginationMeta(props.paginationMeta)}),[apiRef,props.paginationMeta])})(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridPaginationModel"),densityFactor=useGridSelector(apiRef,gridDensityFactorSelector),previousFilterModel=react.useRef(gridFilterModelSelector(apiRef)),rowHeight=Math.floor(props.rowHeight*densityFactor);apiRef.current.registerControlState({stateId:"paginationModel",propModel:props.paginationModel,propOnChange:props.onPaginationModelChange,stateSelector:gridPaginationModelSelector,changeEvent:"paginationModelChange"});const setPage=react.useCallback((page=>{const currentModel=gridPaginationModelSelector(apiRef);page!==currentModel.page&&(logger.debug(`Setting page to ${page}`),apiRef.current.setPaginationModel({page,pageSize:currentModel.pageSize}))}),[apiRef,logger]),setPageSize=react.useCallback((pageSize=>{const currentModel=gridPaginationModelSelector(apiRef);pageSize!==currentModel.pageSize&&(logger.debug(`Setting page size to ${pageSize}`),apiRef.current.setPaginationModel({pageSize,page:currentModel.page}))}),[apiRef,logger]),setPaginationModel=react.useCallback((paginationModel=>{const currentModel=gridPaginationModelSelector(apiRef);paginationModel!==currentModel&&(logger.debug("Setting 'paginationModel' to",paginationModel),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{pagination:(0,esm_extends.Z)({},state.pagination,{paginationModel:getDerivedPaginationModel(state.pagination,props.signature,paginationModel)})})),"setPaginationModel"))}),[apiRef,logger,props.signature]);useGridApiMethod(apiRef,{setPage,setPageSize,setPaginationModel},"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{const paginationModel=gridPaginationModelSelector(apiRef);return!context.exportOnlyDirtyModels||null!=props.paginationModel||null!=props.initialState?.pagination?.paginationModel||0!==paginationModel.page&&paginationModel.pageSize!==(props.autoPageSize?0:100)?(0,esm_extends.Z)({},prevState,{pagination:(0,esm_extends.Z)({},prevState.pagination,{paginationModel})}):prevState}),[apiRef,props.paginationModel,props.initialState?.pagination?.paginationModel,props.autoPageSize]),stateRestorePreProcessing=react.useCallback(((params,context)=>{const paginationModel=context.stateToRestore.pagination?.paginationModel?(0,esm_extends.Z)({},getDefaultGridPaginationModel(props.autoPageSize),context.stateToRestore.pagination?.paginationModel):gridPaginationModelSelector(apiRef);return apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{pagination:(0,esm_extends.Z)({},state.pagination,{paginationModel:getDerivedPaginationModel(state.pagination,props.signature,paginationModel)})})),"stateRestorePreProcessing"),params}),[apiRef,props.autoPageSize,props.signature]);useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing);const handleUpdateAutoPageSize=react.useCallback((()=>{if(!props.autoPageSize)return;const dimensions=apiRef.current.getRootDimensions(),maximumPageSizeWithoutScrollBar=Math.floor(dimensions.viewportInnerSize.height/rowHeight);apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar)}),[apiRef,props.autoPageSize,rowHeight]),handleRowCountChange=react.useCallback((newRowCount=>{if(null==newRowCount)return;const paginationModel=gridPaginationModelSelector(apiRef);if(0===paginationModel.page)return;const pageCount=gridPageCountSelector(apiRef);paginationModel.page>pageCount-1&&apiRef.current.setPage(Math.max(0,pageCount-1))}),[apiRef]),navigateToStart=react.useCallback((()=>{0!==gridPaginationModelSelector(apiRef).page&&apiRef.current.setPage(0),0!==apiRef.current.getScrollPosition().top&&apiRef.current.scroll({top:0})}),[apiRef]),handleFilterModelChange=react.useCallback((filterModel=>{const currentActiveFilters=(0,esm_extends.Z)({},filterModel,{items:gridFilterActiveItemsSelector(apiRef)});isDeepEqual(currentActiveFilters,previousFilterModel.current)||(previousFilterModel.current=currentActiveFilters,navigateToStart())}),[apiRef,navigateToStart]);useGridApiEventHandler(apiRef,"viewportInnerSizeChange",handleUpdateAutoPageSize),useGridApiEventHandler(apiRef,"paginationModelChange",(()=>{const paginationModel=gridPaginationModelSelector(apiRef);apiRef.current.virtualScrollerRef?.current&&apiRef.current.scrollToIndexes({rowIndex:paginationModel.page*paginationModel.pageSize})})),useGridApiEventHandler(apiRef,"rowCountChange",handleRowCountChange),useGridApiEventHandler(apiRef,"sortModelChange",runIf(props.resetPageOnSortFilter,navigateToStart)),useGridApiEventHandler(apiRef,"filterModelChange",runIf(props.resetPageOnSortFilter,handleFilterModelChange));const isFirstRender=react.useRef(!0);react.useEffect((()=>{isFirstRender.current?isFirstRender.current=!1:props.pagination&&apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{pagination:(0,esm_extends.Z)({},state.pagination,{paginationModel:getDerivedPaginationModel(state.pagination,props.signature,props.paginationModel)})})))}),[apiRef,props.paginationModel,props.signature,props.pagination]),react.useEffect((()=>{apiRef.current.setState((state=>{const isEnabled=!0===props.pagination;return state.pagination.paginationMode===props.paginationMode||state.pagination.enabled===isEnabled?state:(0,esm_extends.Z)({},state,{pagination:(0,esm_extends.Z)({},state.pagination,{paginationMode:props.paginationMode,enabled:!0===props.pagination})})}))}),[apiRef,props.paginationMode,props.pagination]),react.useEffect(handleUpdateAutoPageSize,[handleUpdateAutoPageSize])})(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridRowCount"),visibleTopLevelRowCount=useGridSelector(apiRef,gridFilteredTopLevelRowCountSelector),rowCountState=useGridSelector(apiRef,gridPaginationRowCountSelector),paginationMeta=useGridSelector(apiRef,gridPaginationMetaSelector),paginationModel=useGridSelector(apiRef,gridPaginationModelSelector),previousPageSize=(0,useLazyRef.Z)((()=>gridPaginationModelSelector(apiRef).pageSize));apiRef.current.registerControlState({stateId:"paginationRowCount",propModel:props.rowCount,propOnChange:props.onRowCountChange,stateSelector:gridPaginationRowCountSelector,changeEvent:"rowCountChange"});const setRowCount=react.useCallback((newRowCount=>{rowCountState!==newRowCount&&(logger.debug("Setting 'rowCount' to",newRowCount),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{pagination:(0,esm_extends.Z)({},state.pagination,{rowCount:newRowCount})}))))}),[apiRef,logger,rowCountState]);useGridApiMethod(apiRef,{setRowCount},"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{const exportedRowCount=gridPaginationRowCountSelector(apiRef);return context.exportOnlyDirtyModels&&null==props.rowCount&&null==props.initialState?.pagination?.rowCount?prevState:(0,esm_extends.Z)({},prevState,{pagination:(0,esm_extends.Z)({},prevState.pagination,{rowCount:exportedRowCount})})}),[apiRef,props.rowCount,props.initialState?.pagination?.rowCount]),stateRestorePreProcessing=react.useCallback(((params,context)=>{const restoredRowCount=context.stateToRestore.pagination?.rowCount?context.stateToRestore.pagination.rowCount:gridPaginationRowCountSelector(apiRef);return apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{pagination:(0,esm_extends.Z)({},state.pagination,{rowCount:restoredRowCount})}))),params}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing);const handlePaginationModelChange=react.useCallback((model=>{"client"!==props.paginationMode&&previousPageSize.current&&model.pageSize!==previousPageSize.current&&(previousPageSize.current=model.pageSize,-1===rowCountState&&apiRef.current.setPage(0))}),[props.paginationMode,previousPageSize,rowCountState,apiRef]);useGridApiEventHandler(apiRef,"paginationModelChange",handlePaginationModelChange),react.useEffect((()=>{"client"===props.paginationMode?apiRef.current.setRowCount(visibleTopLevelRowCount):null!=props.rowCount&&apiRef.current.setRowCount(props.rowCount)}),[apiRef,props.paginationMode,visibleTopLevelRowCount,props.rowCount]);const isLastPage=!1===paginationMeta.hasNextPage;react.useEffect((()=>{isLastPage&&-1===rowCountState&&apiRef.current.setRowCount(paginationModel.pageSize*paginationModel.page+visibleTopLevelRowCount)}),[apiRef,visibleTopLevelRowCount,isLastPage,rowCountState,paginationModel])})(apiRef,props)},preferencePanelStateInitializer=(state,props)=>(0,esm_extends.Z)({},state,{preferencePanel:props.initialState?.preferencePanel??{open:!1}}),gridEditRowsStateSelector=state=>state.editRows,gridRowIsEditingSelector=createSelectorV8(gridEditRowsStateSelector,((editRows,{rowId,editMode})=>editMode===GridEditModes.Row&&Boolean(editRows[rowId]))),gridEditCellStateSelector=createSelectorV8(gridEditRowsStateSelector,((editRows,{rowId,field})=>editRows[rowId]?.[field]??null)),getDefaultCellValue=colDef=>{switch(colDef.type){case"boolean":return!1;case"date":case"dateTime":case"number":return;case"singleSelect":return null;default:return""}},useGridCellEditing_excluded=["id","field"],useGridCellEditing_excluded2=["id","field"];var GridRowEditStartReasons=function(GridRowEditStartReasons){return GridRowEditStartReasons.enterKeyDown="enterKeyDown",GridRowEditStartReasons.cellDoubleClick="cellDoubleClick",GridRowEditStartReasons.printableKeyDown="printableKeyDown",GridRowEditStartReasons.deleteKeyDown="deleteKeyDown",GridRowEditStartReasons}(GridRowEditStartReasons||{}),GridRowEditStopReasons=function(GridRowEditStopReasons){return GridRowEditStopReasons.rowFocusOut="rowFocusOut",GridRowEditStopReasons.escapeKeyDown="escapeKeyDown",GridRowEditStopReasons.enterKeyDown="enterKeyDown",GridRowEditStopReasons.tabKeyDown="tabKeyDown",GridRowEditStopReasons.shiftTabKeyDown="shiftTabKeyDown",GridRowEditStopReasons}(GridRowEditStopReasons||{});const useGridRowEditing_excluded=["id"],useGridRowEditing_excluded2=["id"],editingStateInitializer=state=>(0,esm_extends.Z)({},state,{editRows:{}}),useGridEditing=(apiRef,props)=>{((apiRef,props)=>{const[cellModesModel,setCellModesModel]=react.useState({}),cellModesModelRef=react.useRef(cellModesModel),prevCellModesModel=react.useRef({}),{processRowUpdate,onProcessRowUpdateError,cellModesModel:cellModesModelProp,onCellModesModelChange}=props,runIfEditModeIsCell=callback=>(...args)=>{props.editMode===GridEditModes.Cell&&callback(...args)},throwIfNotEditable=react.useCallback(((id,field)=>{const params=apiRef.current.getCellParams(id,field);if(!apiRef.current.isCellEditable(params))throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`)}),[apiRef]),throwIfNotInMode=react.useCallback(((id,field,mode)=>{if(apiRef.current.getCellMode(id,field)!==mode)throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`)}),[apiRef]),handleCellDoubleClick=react.useCallback(((params,event)=>{if(!params.isEditable)return;if(params.cellMode===GridCellModes.Edit)return;const newParams=(0,esm_extends.Z)({},params,{reason:GridCellEditStartReasons.cellDoubleClick});apiRef.current.publishEvent("cellEditStart",newParams,event)}),[apiRef]),handleCellFocusOut=react.useCallback(((params,event)=>{if(params.cellMode===GridCellModes.View)return;if(apiRef.current.getCellMode(params.id,params.field)===GridCellModes.View)return;const newParams=(0,esm_extends.Z)({},params,{reason:GridCellEditStopReasons.cellFocusOut});apiRef.current.publishEvent("cellEditStop",newParams,event)}),[apiRef]),handleCellKeyDown=react.useCallback(((params,event)=>{if(params.cellMode===GridCellModes.Edit){if(229===event.which)return;let reason;if("Escape"===event.key?reason=GridCellEditStopReasons.escapeKeyDown:"Enter"===event.key?reason=GridCellEditStopReasons.enterKeyDown:"Tab"===event.key&&(reason=event.shiftKey?GridCellEditStopReasons.shiftTabKeyDown:GridCellEditStopReasons.tabKeyDown,event.preventDefault()),reason){const newParams=(0,esm_extends.Z)({},params,{reason});apiRef.current.publishEvent("cellEditStop",newParams,event)}}else if(params.isEditable){let reason;if(!apiRef.current.unstable_applyPipeProcessors("canStartEditing",!0,{event,cellParams:params,editMode:"cell"}))return;if(isPrintableKey(event)?reason=GridCellEditStartReasons.printableKeyDown:isPasteShortcut(event)?reason=GridCellEditStartReasons.pasteKeyDown:"Enter"===event.key?reason=GridCellEditStartReasons.enterKeyDown:"Backspace"!==event.key&&"Delete"!==event.key||(reason=GridCellEditStartReasons.deleteKeyDown),reason){const newParams=(0,esm_extends.Z)({},params,{reason,key:event.key});apiRef.current.publishEvent("cellEditStart",newParams,event)}}}),[apiRef]),handleCellEditStart=react.useCallback((params=>{const{id,field,reason}=params,startCellEditModeParams={id,field};reason!==GridCellEditStartReasons.printableKeyDown&&reason!==GridCellEditStartReasons.deleteKeyDown&&reason!==GridCellEditStartReasons.pasteKeyDown||(startCellEditModeParams.deleteValue=!0),apiRef.current.startCellEditMode(startCellEditModeParams)}),[apiRef]),handleCellEditStop=react.useCallback((params=>{const{id,field,reason}=params;let cellToFocusAfter;apiRef.current.runPendingEditCellValueMutation(id,field),reason===GridCellEditStopReasons.enterKeyDown?cellToFocusAfter="below":reason===GridCellEditStopReasons.tabKeyDown?cellToFocusAfter="right":reason===GridCellEditStopReasons.shiftTabKeyDown&&(cellToFocusAfter="left");const ignoreModifications="escapeKeyDown"===reason;apiRef.current.stopCellEditMode({id,field,ignoreModifications,cellToFocusAfter})}),[apiRef]);var callback;useGridApiEventHandler(apiRef,"cellDoubleClick",runIfEditModeIsCell(handleCellDoubleClick)),useGridApiEventHandler(apiRef,"cellFocusOut",runIfEditModeIsCell(handleCellFocusOut)),useGridApiEventHandler(apiRef,"cellKeyDown",runIfEditModeIsCell(handleCellKeyDown)),useGridApiEventHandler(apiRef,"cellEditStart",runIfEditModeIsCell(handleCellEditStart)),useGridApiEventHandler(apiRef,"cellEditStop",runIfEditModeIsCell(handleCellEditStop)),useGridApiOptionHandler(apiRef,"cellEditStart",props.onCellEditStart),useGridApiOptionHandler(apiRef,"cellEditStop",(callback=props.onCellEditStop,async(...args)=>{if(callback){const{id,field}=args[0],editRowsState=apiRef.current.state.editRows,hasFieldErrors=editRowsState[id][field]?.error;hasFieldErrors||callback(...args)}}));const getCellMode=react.useCallback(((id,field)=>{const editingState=gridEditRowsStateSelector(apiRef.current.state);return editingState[id]&&editingState[id][field]?GridCellModes.Edit:GridCellModes.View}),[apiRef]),updateCellModesModel=(0,useEventCallback.Z)((newModel=>{const isNewModelDifferentFromProp=newModel!==props.cellModesModel;onCellModesModelChange&&isNewModelDifferentFromProp&&onCellModesModelChange(newModel,{api:apiRef.current}),props.cellModesModel&&isNewModelDifferentFromProp||(setCellModesModel(newModel),cellModesModelRef.current=newModel,apiRef.current.publishEvent("cellModesModelChange",newModel))})),updateFieldInCellModesModel=react.useCallback(((id,field,newProps)=>{const newModel=(0,esm_extends.Z)({},cellModesModelRef.current);if(null!==newProps)newModel[id]=(0,esm_extends.Z)({},newModel[id],{[field]:(0,esm_extends.Z)({},newProps)});else{const _newModel$id=newModel[id],otherFields=(0,objectWithoutPropertiesLoose.Z)(_newModel$id,[field].map(toPropertyKey));newModel[id]=otherFields,0===Object.keys(newModel[id]).length&&delete newModel[id]}updateCellModesModel(newModel)}),[updateCellModesModel]),updateOrDeleteFieldState=react.useCallback(((id,field,newProps)=>{apiRef.current.setState((state=>{const newEditingState=(0,esm_extends.Z)({},state.editRows);return null!==newProps?newEditingState[id]=(0,esm_extends.Z)({},newEditingState[id],{[field]:(0,esm_extends.Z)({},newProps)}):(delete newEditingState[id][field],0===Object.keys(newEditingState[id]).length&&delete newEditingState[id]),(0,esm_extends.Z)({},state,{editRows:newEditingState})})),apiRef.current.forceUpdate()}),[apiRef]),startCellEditMode=react.useCallback((params=>{const{id,field}=params,other=(0,objectWithoutPropertiesLoose.Z)(params,useGridCellEditing_excluded);throwIfNotEditable(id,field),throwIfNotInMode(id,field,GridCellModes.View),updateFieldInCellModesModel(id,field,(0,esm_extends.Z)({mode:GridCellModes.Edit},other))}),[throwIfNotEditable,throwIfNotInMode,updateFieldInCellModesModel]),updateStateToStartCellEditMode=(0,useEventCallback.Z)((async params=>{const{id,field,deleteValue,initialValue}=params,value=apiRef.current.getCellValue(id,field);let newValue=value;deleteValue?newValue=getDefaultCellValue(apiRef.current.getColumn(field)):initialValue&&(newValue=initialValue);const column=apiRef.current.getColumn(field),shouldProcessEditCellProps=!!column.preProcessEditCellProps&&deleteValue;let newProps={value:newValue,error:!1,isProcessingProps:shouldProcessEditCellProps};if(updateOrDeleteFieldState(id,field,newProps),apiRef.current.setCellFocus(id,field),shouldProcessEditCellProps&&(newProps=await Promise.resolve(column.preProcessEditCellProps({id,row:apiRef.current.getRow(id),props:newProps,hasChanged:newValue!==value})),apiRef.current.getCellMode(id,field)===GridCellModes.Edit)){const editingState=gridEditRowsStateSelector(apiRef.current.state);updateOrDeleteFieldState(id,field,(0,esm_extends.Z)({},newProps,{value:editingState[id][field].value,isProcessingProps:!1}))}})),stopCellEditMode=react.useCallback((params=>{const{id,field}=params,other=(0,objectWithoutPropertiesLoose.Z)(params,useGridCellEditing_excluded2);throwIfNotInMode(id,field,GridCellModes.Edit),updateFieldInCellModesModel(id,field,(0,esm_extends.Z)({mode:GridCellModes.View},other))}),[throwIfNotInMode,updateFieldInCellModesModel]),updateStateToStopCellEditMode=(0,useEventCallback.Z)((async params=>{const{id,field,ignoreModifications,cellToFocusAfter="none"}=params;throwIfNotInMode(id,field,GridCellModes.Edit),apiRef.current.runPendingEditCellValueMutation(id,field);const finishCellEditMode=()=>{updateOrDeleteFieldState(id,field,null),updateFieldInCellModesModel(id,field,null),"none"!==cellToFocusAfter&&apiRef.current.moveFocusToRelativeCell(id,field,cellToFocusAfter)};if(ignoreModifications)return void finishCellEditMode();const editingState=gridEditRowsStateSelector(apiRef.current.state),{error,isProcessingProps}=editingState[id][field];if(error||isProcessingProps)return prevCellModesModel.current[id][field].mode=GridCellModes.Edit,void updateFieldInCellModesModel(id,field,{mode:GridCellModes.Edit});const rowUpdate=apiRef.current.getRowWithUpdatedValuesFromCellEditing(id,field);if(processRowUpdate){const handleError=errorThrown=>{prevCellModesModel.current[id][field].mode=GridCellModes.Edit,updateFieldInCellModesModel(id,field,{mode:GridCellModes.Edit}),onProcessRowUpdateError&&onProcessRowUpdateError(errorThrown)};try{const row=apiRef.current.getRow(id);Promise.resolve(processRowUpdate(rowUpdate,row,{rowId:id})).then((finalRowUpdate=>{apiRef.current.updateRows([finalRowUpdate]),finishCellEditMode()})).catch(handleError)}catch(errorThrown){handleError(errorThrown)}}else apiRef.current.updateRows([rowUpdate]),finishCellEditMode()})),editingPrivateApi={setCellEditingEditCellValue:react.useCallback((async params=>{const{id,field,value,debounceMs,unstable_skipValueParser:skipValueParser}=params;throwIfNotEditable(id,field),throwIfNotInMode(id,field,GridCellModes.Edit);const column=apiRef.current.getColumn(field),row=apiRef.current.getRow(id);let parsedValue=value;column.valueParser&&!skipValueParser&&(parsedValue=column.valueParser(value,row,column,apiRef));let editingState=gridEditRowsStateSelector(apiRef.current.state),newProps=(0,esm_extends.Z)({},editingState[id][field],{value:parsedValue,changeReason:debounceMs?"debouncedSetEditCellValue":"setEditCellValue"});if(column.preProcessEditCellProps){const hasChanged=value!==editingState[id][field].value;newProps=(0,esm_extends.Z)({},newProps,{isProcessingProps:!0}),updateOrDeleteFieldState(id,field,newProps),newProps=await Promise.resolve(column.preProcessEditCellProps({id,row,props:newProps,hasChanged}))}return apiRef.current.getCellMode(id,field)!==GridCellModes.View&&(editingState=gridEditRowsStateSelector(apiRef.current.state),newProps=(0,esm_extends.Z)({},newProps,{isProcessingProps:!1}),newProps.value=column.preProcessEditCellProps?editingState[id][field].value:parsedValue,updateOrDeleteFieldState(id,field,newProps),editingState=gridEditRowsStateSelector(apiRef.current.state),!editingState[id]?.[field]?.error)}),[apiRef,throwIfNotEditable,throwIfNotInMode,updateOrDeleteFieldState]),getRowWithUpdatedValuesFromCellEditing:react.useCallback(((id,field)=>{const column=apiRef.current.getColumn(field),editingState=gridEditRowsStateSelector(apiRef.current.state),row=apiRef.current.getRow(id);if(!editingState[id]||!editingState[id][field])return apiRef.current.getRow(id);const{value}=editingState[id][field];return column.valueSetter?column.valueSetter(value,row,column,apiRef):(0,esm_extends.Z)({},row,{[field]:value})}),[apiRef])};useGridApiMethod(apiRef,{getCellMode,startCellEditMode,stopCellEditMode},"public"),useGridApiMethod(apiRef,editingPrivateApi,"private"),react.useEffect((()=>{cellModesModelProp&&updateCellModesModel(cellModesModelProp)}),[cellModesModelProp,updateCellModesModel]),(0,useEnhancedEffect.Z)((()=>{const rowsLookup=gridRowsLookupSelector(apiRef),copyOfPrevCellModes=prevCellModesModel.current;prevCellModesModel.current=deepClone(cellModesModel),Object.entries(cellModesModel).forEach((([id,fields])=>{Object.entries(fields).forEach((([field,params])=>{const prevMode=copyOfPrevCellModes[id]?.[field]?.mode||GridCellModes.View,originalId=rowsLookup[id]?apiRef.current.getRowId(rowsLookup[id]):id;params.mode===GridCellModes.Edit&&prevMode===GridCellModes.View?updateStateToStartCellEditMode((0,esm_extends.Z)({id:originalId,field},params)):params.mode===GridCellModes.View&&prevMode===GridCellModes.Edit&&updateStateToStopCellEditMode((0,esm_extends.Z)({id:originalId,field},params))}))}))}),[apiRef,cellModesModel,updateStateToStartCellEditMode,updateStateToStopCellEditMode])})(apiRef,props),((apiRef,props)=>{const[rowModesModel,setRowModesModel]=react.useState({}),rowModesModelRef=react.useRef(rowModesModel),prevRowModesModel=react.useRef({}),focusTimeout=react.useRef(void 0),nextFocusedCell=react.useRef(null),{processRowUpdate,onProcessRowUpdateError,rowModesModel:rowModesModelProp,onRowModesModelChange}=props,runIfEditModeIsRow=callback=>(...args)=>{props.editMode===GridEditModes.Row&&callback(...args)},throwIfNotEditable=react.useCallback(((id,field)=>{const params=apiRef.current.getCellParams(id,field);if(!apiRef.current.isCellEditable(params))throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`)}),[apiRef]),throwIfNotInMode=react.useCallback(((id,mode)=>{if(apiRef.current.getRowMode(id)!==mode)throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`)}),[apiRef]),hasFieldsWithErrors=react.useCallback((rowId=>{const editingState=gridEditRowsStateSelector(apiRef.current.state);return Object.values(editingState[rowId]).some((fieldProps=>fieldProps.error))}),[apiRef]),handleCellDoubleClick=react.useCallback(((params,event)=>{if(!params.isEditable)return;if(apiRef.current.getRowMode(params.id)===GridRowModes.Edit)return;const rowParams=apiRef.current.getRowParams(params.id),newParams=(0,esm_extends.Z)({},rowParams,{field:params.field,reason:GridRowEditStartReasons.cellDoubleClick});apiRef.current.publishEvent("rowEditStart",newParams,event)}),[apiRef]),handleCellFocusIn=react.useCallback((params=>{nextFocusedCell.current=params}),[]),handleCellFocusOut=react.useCallback(((params,event)=>{params.isEditable&&apiRef.current.getRowMode(params.id)!==GridRowModes.View&&(nextFocusedCell.current=null,focusTimeout.current=setTimeout((()=>{if(nextFocusedCell.current?.id!==params.id){if(!apiRef.current.getRow(params.id))return;if(apiRef.current.getRowMode(params.id)===GridRowModes.View)return;if(hasFieldsWithErrors(params.id))return;const rowParams=apiRef.current.getRowParams(params.id),newParams=(0,esm_extends.Z)({},rowParams,{field:params.field,reason:GridRowEditStopReasons.rowFocusOut});apiRef.current.publishEvent("rowEditStop",newParams,event)}})))}),[apiRef,hasFieldsWithErrors]);react.useEffect((()=>()=>{clearTimeout(focusTimeout.current)}),[]);const handleCellKeyDown=react.useCallback(((params,event)=>{if(params.cellMode===GridRowModes.Edit){if(229===event.which)return;let reason;if("Escape"===event.key)reason=GridRowEditStopReasons.escapeKeyDown;else if("Enter"===event.key)reason=GridRowEditStopReasons.enterKeyDown;else if("Tab"===event.key){const columnFields=gridVisibleColumnFieldsSelector(apiRef).filter((field=>"actions"===apiRef.current.getColumn(field).type||apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id,field))));if(event.shiftKey?params.field===columnFields[0]&&(reason=GridRowEditStopReasons.shiftTabKeyDown):params.field===columnFields[columnFields.length-1]&&(reason=GridRowEditStopReasons.tabKeyDown),event.preventDefault(),!reason){const index=columnFields.findIndex((field=>field===params.field)),nextFieldToFocus=columnFields[event.shiftKey?index-1:index+1];apiRef.current.setCellFocus(params.id,nextFieldToFocus)}}if(reason){if(reason!==GridRowEditStopReasons.escapeKeyDown&&hasFieldsWithErrors(params.id))return;const newParams=(0,esm_extends.Z)({},apiRef.current.getRowParams(params.id),{reason,field:params.field});apiRef.current.publishEvent("rowEditStop",newParams,event)}}else if(params.isEditable){let reason;if(!apiRef.current.unstable_applyPipeProcessors("canStartEditing",!0,{event,cellParams:params,editMode:"row"}))return;if(isPrintableKey(event)||isPasteShortcut(event)?reason=GridRowEditStartReasons.printableKeyDown:"Enter"===event.key?reason=GridRowEditStartReasons.enterKeyDown:"Backspace"!==event.key&&"Delete"!==event.key||(reason=GridRowEditStartReasons.deleteKeyDown),reason){const rowParams=apiRef.current.getRowParams(params.id),newParams=(0,esm_extends.Z)({},rowParams,{field:params.field,reason});apiRef.current.publishEvent("rowEditStart",newParams,event)}}}),[apiRef,hasFieldsWithErrors]),handleRowEditStart=react.useCallback((params=>{const{id,field,reason}=params,startRowEditModeParams={id,fieldToFocus:field};reason!==GridRowEditStartReasons.printableKeyDown&&reason!==GridRowEditStartReasons.deleteKeyDown||(startRowEditModeParams.deleteValue=!!field),apiRef.current.startRowEditMode(startRowEditModeParams)}),[apiRef]),handleRowEditStop=react.useCallback((params=>{const{id,reason,field}=params;let cellToFocusAfter;apiRef.current.runPendingEditCellValueMutation(id),reason===GridRowEditStopReasons.enterKeyDown?cellToFocusAfter="below":reason===GridRowEditStopReasons.tabKeyDown?cellToFocusAfter="right":reason===GridRowEditStopReasons.shiftTabKeyDown&&(cellToFocusAfter="left");const ignoreModifications="escapeKeyDown"===reason;apiRef.current.stopRowEditMode({id,ignoreModifications,field,cellToFocusAfter})}),[apiRef]);useGridApiEventHandler(apiRef,"cellDoubleClick",runIfEditModeIsRow(handleCellDoubleClick)),useGridApiEventHandler(apiRef,"cellFocusIn",runIfEditModeIsRow(handleCellFocusIn)),useGridApiEventHandler(apiRef,"cellFocusOut",runIfEditModeIsRow(handleCellFocusOut)),useGridApiEventHandler(apiRef,"cellKeyDown",runIfEditModeIsRow(handleCellKeyDown)),useGridApiEventHandler(apiRef,"rowEditStart",runIfEditModeIsRow(handleRowEditStart)),useGridApiEventHandler(apiRef,"rowEditStop",runIfEditModeIsRow(handleRowEditStop)),useGridApiOptionHandler(apiRef,"rowEditStart",props.onRowEditStart),useGridApiOptionHandler(apiRef,"rowEditStop",props.onRowEditStop);const getRowMode=react.useCallback((id=>gridRowIsEditingSelector(apiRef,{rowId:id,editMode:props.editMode})?GridRowModes.Edit:GridRowModes.View),[apiRef,props.editMode]),updateRowModesModel=(0,useEventCallback.Z)((newModel=>{const isNewModelDifferentFromProp=newModel!==props.rowModesModel;onRowModesModelChange&&isNewModelDifferentFromProp&&onRowModesModelChange(newModel,{api:apiRef.current}),props.rowModesModel&&isNewModelDifferentFromProp||(setRowModesModel(newModel),rowModesModelRef.current=newModel,apiRef.current.publishEvent("rowModesModelChange",newModel))})),updateRowInRowModesModel=react.useCallback(((id,newProps)=>{const newModel=(0,esm_extends.Z)({},rowModesModelRef.current);null!==newProps?newModel[id]=(0,esm_extends.Z)({},newProps):delete newModel[id],updateRowModesModel(newModel)}),[updateRowModesModel]),updateOrDeleteRowState=react.useCallback(((id,newProps)=>{apiRef.current.setState((state=>{const newEditingState=(0,esm_extends.Z)({},state.editRows);return null!==newProps?newEditingState[id]=newProps:delete newEditingState[id],(0,esm_extends.Z)({},state,{editRows:newEditingState})})),apiRef.current.forceUpdate()}),[apiRef]),updateOrDeleteFieldState=react.useCallback(((id,field,newProps)=>{apiRef.current.setState((state=>{const newEditingState=(0,esm_extends.Z)({},state.editRows);return null!==newProps?newEditingState[id]=(0,esm_extends.Z)({},newEditingState[id],{[field]:(0,esm_extends.Z)({},newProps)}):(delete newEditingState[id][field],0===Object.keys(newEditingState[id]).length&&delete newEditingState[id]),(0,esm_extends.Z)({},state,{editRows:newEditingState})})),apiRef.current.forceUpdate()}),[apiRef]),startRowEditMode=react.useCallback((params=>{const{id}=params,other=(0,objectWithoutPropertiesLoose.Z)(params,useGridRowEditing_excluded);throwIfNotInMode(id,GridRowModes.View),updateRowInRowModesModel(id,(0,esm_extends.Z)({mode:GridRowModes.Edit},other))}),[throwIfNotInMode,updateRowInRowModesModel]),updateStateToStartRowEditMode=(0,useEventCallback.Z)((params=>{const{id,fieldToFocus,deleteValue,initialValue}=params,columnFields=gridColumnFieldsSelector(apiRef),newProps=columnFields.reduce(((acc,field)=>{if(!apiRef.current.getCellParams(id,field).isEditable)return acc;const column=apiRef.current.getColumn(field);let newValue=apiRef.current.getCellValue(id,field);return fieldToFocus===field&&(deleteValue||initialValue)&&(deleteValue?newValue=getDefaultCellValue(column):initialValue&&(newValue=initialValue)),acc[field]={value:newValue,error:!1,isProcessingProps:!!column.preProcessEditCellProps&&deleteValue},acc}),{});updateOrDeleteRowState(id,newProps),fieldToFocus&&apiRef.current.setCellFocus(id,fieldToFocus),columnFields.filter((field=>!!apiRef.current.getColumn(field).preProcessEditCellProps&&deleteValue)).forEach((field=>{const column=apiRef.current.getColumn(field),value=apiRef.current.getCellValue(id,field),newValue=deleteValue?getDefaultCellValue(column):initialValue??value;Promise.resolve(column.preProcessEditCellProps({id,row:apiRef.current.getRow(id),props:newProps[field],hasChanged:newValue!==value})).then((processedProps=>{if(apiRef.current.getRowMode(id)===GridRowModes.Edit){const editingState=gridEditRowsStateSelector(apiRef.current.state);updateOrDeleteFieldState(id,field,(0,esm_extends.Z)({},processedProps,{value:editingState[id][field].value,isProcessingProps:!1}))}}))}))})),stopRowEditMode=react.useCallback((params=>{const{id}=params,other=(0,objectWithoutPropertiesLoose.Z)(params,useGridRowEditing_excluded2);throwIfNotInMode(id,GridRowModes.Edit),updateRowInRowModesModel(id,(0,esm_extends.Z)({mode:GridRowModes.View},other))}),[throwIfNotInMode,updateRowInRowModesModel]),updateStateToStopRowEditMode=(0,useEventCallback.Z)((params=>{const{id,ignoreModifications,field:focusedField,cellToFocusAfter="none"}=params;apiRef.current.runPendingEditCellValueMutation(id);const finishRowEditMode=()=>{"none"!==cellToFocusAfter&&focusedField&&apiRef.current.moveFocusToRelativeCell(id,focusedField,cellToFocusAfter),updateOrDeleteRowState(id,null),updateRowInRowModesModel(id,null)};if(ignoreModifications)return void finishRowEditMode();const editingState=gridEditRowsStateSelector(apiRef.current.state),row=apiRef.current.getRow(id);if(Object.values(editingState[id]).some((fieldProps=>fieldProps.isProcessingProps)))return void(prevRowModesModel.current[id].mode=GridRowModes.Edit);if(hasFieldsWithErrors(id))return prevRowModesModel.current[id].mode=GridRowModes.Edit,void updateRowInRowModesModel(id,{mode:GridRowModes.Edit});const rowUpdate=apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);if(processRowUpdate){const handleError=errorThrown=>{prevRowModesModel.current[id].mode=GridRowModes.Edit,updateRowInRowModesModel(id,{mode:GridRowModes.Edit}),onProcessRowUpdateError&&onProcessRowUpdateError(errorThrown)};try{Promise.resolve(processRowUpdate(rowUpdate,row,{rowId:id})).then((finalRowUpdate=>{apiRef.current.updateRows([finalRowUpdate]),finishRowEditMode()})).catch(handleError)}catch(errorThrown){handleError(errorThrown)}}else apiRef.current.updateRows([rowUpdate]),finishRowEditMode()})),editingPrivateApi={setRowEditingEditCellValue:react.useCallback((params=>{const{id,field,value,debounceMs,unstable_skipValueParser:skipValueParser}=params;throwIfNotEditable(id,field);const column=apiRef.current.getColumn(field),row=apiRef.current.getRow(id);let parsedValue=value;column.valueParser&&!skipValueParser&&(parsedValue=column.valueParser(value,row,column,apiRef));let editingState=gridEditRowsStateSelector(apiRef.current.state),newProps=(0,esm_extends.Z)({},editingState[id][field],{value:parsedValue,changeReason:debounceMs?"debouncedSetEditCellValue":"setEditCellValue"});return column.preProcessEditCellProps||updateOrDeleteFieldState(id,field,newProps),new Promise((resolve=>{const promises=[];if(column.preProcessEditCellProps){const hasChanged=newProps.value!==editingState[id][field].value;newProps=(0,esm_extends.Z)({},newProps,{isProcessingProps:!0}),updateOrDeleteFieldState(id,field,newProps);const _editingState$id=editingState[id],otherFieldsProps=(0,objectWithoutPropertiesLoose.Z)(_editingState$id,[field].map(toPropertyKey)),promise=Promise.resolve(column.preProcessEditCellProps({id,row,props:newProps,hasChanged,otherFieldsProps})).then((processedProps=>{apiRef.current.getRowMode(id)!==GridRowModes.View?(editingState=gridEditRowsStateSelector(apiRef.current.state),(processedProps=(0,esm_extends.Z)({},processedProps,{isProcessingProps:!1})).value=column.preProcessEditCellProps?editingState[id][field].value:parsedValue,updateOrDeleteFieldState(id,field,processedProps)):resolve(!1)}));promises.push(promise)}Object.entries(editingState[id]).forEach((([thisField,fieldProps])=>{if(thisField===field)return;const fieldColumn=apiRef.current.getColumn(thisField);if(!fieldColumn.preProcessEditCellProps)return;fieldProps=(0,esm_extends.Z)({},fieldProps,{isProcessingProps:!0}),updateOrDeleteFieldState(id,thisField,fieldProps),editingState=gridEditRowsStateSelector(apiRef.current.state);const _editingState$id2=editingState[id],otherFieldsProps=(0,objectWithoutPropertiesLoose.Z)(_editingState$id2,[thisField].map(toPropertyKey)),promise=Promise.resolve(fieldColumn.preProcessEditCellProps({id,row,props:fieldProps,hasChanged:!1,otherFieldsProps})).then((processedProps=>{apiRef.current.getRowMode(id)!==GridRowModes.View?(processedProps=(0,esm_extends.Z)({},processedProps,{isProcessingProps:!1}),updateOrDeleteFieldState(id,thisField,processedProps)):resolve(!1)}));promises.push(promise)})),Promise.all(promises).then((()=>{apiRef.current.getRowMode(id)===GridRowModes.Edit?(editingState=gridEditRowsStateSelector(apiRef.current.state),resolve(!editingState[id][field].error)):resolve(!1)}))}))}),[apiRef,throwIfNotEditable,updateOrDeleteFieldState]),getRowWithUpdatedValuesFromRowEditing:react.useCallback((id=>{const editingState=gridEditRowsStateSelector(apiRef.current.state),row=apiRef.current.getRow(id);if(!editingState[id])return apiRef.current.getRow(id);let rowUpdate=(0,esm_extends.Z)({},row);return Object.entries(editingState[id]).forEach((([field,fieldProps])=>{const column=apiRef.current.getColumn(field);column.valueSetter?rowUpdate=column.valueSetter(fieldProps.value,rowUpdate,column,apiRef):rowUpdate[field]=fieldProps.value})),rowUpdate}),[apiRef])};useGridApiMethod(apiRef,{getRowMode,startRowEditMode,stopRowEditMode},"public"),useGridApiMethod(apiRef,editingPrivateApi,"private"),react.useEffect((()=>{rowModesModelProp&&updateRowModesModel(rowModesModelProp)}),[rowModesModelProp,updateRowModesModel]),(0,useEnhancedEffect.Z)((()=>{const rowsLookup=gridRowsLookupSelector(apiRef),copyOfPrevRowModesModel=prevRowModesModel.current;prevRowModesModel.current=deepClone(rowModesModel);const ids=new Set([...Object.keys(rowModesModel),...Object.keys(copyOfPrevRowModesModel)]);Array.from(ids).forEach((id=>{const params=rowModesModel[id]??{mode:GridRowModes.View},prevMode=copyOfPrevRowModesModel[id]?.mode||GridRowModes.View,originalId=rowsLookup[id]?apiRef.current.getRowId(rowsLookup[id]):id;params.mode===GridRowModes.Edit&&prevMode===GridRowModes.View?updateStateToStartRowEditMode((0,esm_extends.Z)({id:originalId},params)):params.mode===GridRowModes.View&&prevMode===GridRowModes.Edit&&updateStateToStopRowEditMode((0,esm_extends.Z)({id:originalId},params))}))}),[apiRef,rowModesModel,updateStateToStartRowEditMode,updateStateToStopRowEditMode])})(apiRef,props);const debounceMap=react.useRef({}),{isCellEditable:isCellEditableProp}=props,isCellEditable=react.useCallback((params=>!isAutogeneratedRowNode(params.rowNode)&&(!!params.colDef.editable&&(!!params.colDef.renderEditCell&&(!isCellEditableProp||isCellEditableProp(params))))),[isCellEditableProp]);react.useEffect((()=>{const debounces=debounceMap.current;return()=>{Object.entries(debounces).forEach((([id,fields])=>{Object.keys(fields).forEach((field=>{const[timeout]=debounces[id][field];clearTimeout(timeout),delete debounces[id][field]}))}))}}),[]);const runPendingEditCellValueMutation=react.useCallback(((id,field)=>{if(debounceMap.current[id])if(field){if(debounceMap.current[id][field]){const[,runCallback]=debounceMap.current[id][field];runCallback()}}else Object.keys(debounceMap.current[id]).forEach((debouncedField=>{const[,runCallback]=debounceMap.current[id][debouncedField];runCallback()}))}),[]),setEditCellValue=react.useCallback((params=>{const{id,field,debounceMs}=params;return new Promise((resolve=>{((id,field,debounceMs,callback)=>{if(!debounceMs)return void callback();if(debounceMap.current[id]||(debounceMap.current[id]={}),debounceMap.current[id][field]){const[timeout]=debounceMap.current[id][field];clearTimeout(timeout)}const timeout=setTimeout((()=>{callback(),delete debounceMap.current[id][field]}),debounceMs);debounceMap.current[id][field]=[timeout,()=>{const[timeout]=debounceMap.current[id][field];clearTimeout(timeout),callback(),delete debounceMap.current[id][field]}]})(id,field,debounceMs,(async()=>{const setEditCellValueToCall=props.editMode===GridEditModes.Row?apiRef.current.setRowEditingEditCellValue:apiRef.current.setCellEditingEditCellValue;if(apiRef.current.getCellMode(id,field)===GridCellModes.Edit){const result=await setEditCellValueToCall(params);resolve(result)}}))}))}),[apiRef,props.editMode]),getRowWithUpdatedValues=react.useCallback(((id,field)=>props.editMode===GridEditModes.Cell?apiRef.current.getRowWithUpdatedValuesFromCellEditing(id,field):apiRef.current.getRowWithUpdatedValuesFromRowEditing(id)),[apiRef,props.editMode]),getEditCellMeta=react.useCallback(((id,field)=>{const editingState=gridEditRowsStateSelector(apiRef.current.state);return editingState[id]?.[field]??null}),[apiRef]),editingSharedPrivateApi={runPendingEditCellValueMutation};useGridApiMethod(apiRef,{isCellEditable,setEditCellValue,getRowWithUpdatedValues,unstable_getEditCellMeta:getEditCellMeta},"public"),useGridApiMethod(apiRef,editingSharedPrivateApi,"private")},rowsStateInitializer=(state,props,apiRef)=>{const isDataSourceAvailable=!!props.unstable_dataSource;return apiRef.current.caches.rows=createRowsInternalCache({rows:isDataSourceAvailable?[]:props.rows,getRowId:props.getRowId,loading:props.loading,rowCount:props.rowCount}),(0,esm_extends.Z)({},state,{rows:getRowsStateFromCache({apiRef,rowCountProp:props.rowCount,loadingProp:!!isDataSourceAvailable||props.loading,previousTree:null,previousTreeDepths:null})})},flatRowTreeCreationMethod=params=>"full"===params.updates.type?(rows=>{const tree={[GRID_ROOT_GROUP_ID]:(0,esm_extends.Z)({},{type:"group",id:GRID_ROOT_GROUP_ID,depth:-1,groupingField:null,groupingKey:null,isAutoGenerated:!0,children:[],childrenFromPath:{},childrenExpanded:!0,parent:null},{children:rows})};for(let i=0;i<rows.length;i+=1){const rowId=rows[i];tree[rowId]={id:rowId,depth:0,parent:GRID_ROOT_GROUP_ID,type:"leaf",groupingKey:null}}return{groupingName:"none",tree,treeDepths:{0:rows.length},dataRowIds:rows}})(params.updates.rows):(({previousTree,actions})=>{const tree=(0,esm_extends.Z)({},previousTree),idsToRemoveFromRootGroup={};for(let i=0;i<actions.remove.length;i+=1){const idToDelete=actions.remove[i];idsToRemoveFromRootGroup[idToDelete]=!0,delete tree[idToDelete]}for(let i=0;i<actions.insert.length;i+=1){const idToInsert=actions.insert[i];tree[idToInsert]={id:idToInsert,depth:0,parent:GRID_ROOT_GROUP_ID,type:"leaf",groupingKey:null}}const rootGroup=tree[GRID_ROOT_GROUP_ID];let rootGroupChildren=[...rootGroup.children,...actions.insert];return Object.values(idsToRemoveFromRootGroup).length&&(rootGroupChildren=rootGroupChildren.filter((id=>!idsToRemoveFromRootGroup[id]))),tree[GRID_ROOT_GROUP_ID]=(0,esm_extends.Z)({},rootGroup,{children:rootGroupChildren}),{groupingName:"none",tree,treeDepths:{0:rootGroupChildren.length},dataRowIds:rootGroupChildren}})({previousTree:params.previousTree,actions:params.updates.actions});class MissingRowIdError extends Error{}function useGridParamsApi(apiRef,props){const getColumnHeaderParams=react.useCallback((field=>({field,colDef:apiRef.current.getColumn(field)})),[apiRef]),getRowParams=react.useCallback((id=>{const row=apiRef.current.getRow(id);if(!row)throw new MissingRowIdError(`No row with id #${id} found`);return{id,columns:apiRef.current.getAllColumns(),row}}),[apiRef]),getCellParamsForRow=react.useCallback(((id,field,row,{cellMode,colDef,hasFocus,rowNode,tabIndex})=>{const rawValue=row[field],value=colDef?.valueGetter?colDef.valueGetter(rawValue,row,colDef,apiRef):rawValue,params={id,field,row,rowNode,colDef,cellMode,hasFocus,tabIndex,value,formattedValue:value,isEditable:!1,api:null};return colDef&&colDef.valueFormatter&&(params.formattedValue=colDef.valueFormatter(value,row,colDef,apiRef)),params.isEditable=colDef&&apiRef.current.isCellEditable(params),params}),[apiRef]),getCellParams=react.useCallback(((id,field)=>{const row=apiRef.current.getRow(id),rowNode=apiRef.current.getRowNode(id);if(!row||!rowNode)throw new MissingRowIdError(`No row with id #${id} found`);const cellFocus=gridFocusCellSelector(apiRef),cellTabIndex=gridTabIndexCellSelector(apiRef),cellMode=apiRef.current.getCellMode(id,field);return apiRef.current.getCellParamsForRow(id,field,row,{colDef:props.unstable_listView&&props.unstable_listColumn?.field===field?gridListColumnSelector(apiRef.current.state):apiRef.current.getColumn(field),rowNode,hasFocus:null!==cellFocus&&cellFocus.field===field&&cellFocus.id===id,tabIndex:cellTabIndex&&cellTabIndex.field===field&&cellTabIndex.id===id?0:-1,cellMode})}),[apiRef,props.unstable_listView,props.unstable_listColumn?.field]),getCellValue=react.useCallback(((id,field)=>{const colDef=apiRef.current.getColumn(field),row=apiRef.current.getRow(id);if(!row)throw new MissingRowIdError(`No row with id #${id} found`);return colDef&&colDef.valueGetter?colDef.valueGetter(row[colDef.field],row,colDef,apiRef):row[field]}),[apiRef]),getRowValue=react.useCallback(((row,colDef)=>{const field=colDef.field;if(!colDef||!colDef.valueGetter)return row[field];const value=row[colDef.field];return colDef.valueGetter(value,row,colDef,apiRef)}),[apiRef]),getRowFormattedValue=react.useCallback(((row,colDef)=>{const value=getRowValue(row,colDef);return colDef&&colDef.valueFormatter?colDef.valueFormatter(value,row,colDef,apiRef):value}),[apiRef,getRowValue]),getColumnHeaderElement=react.useCallback((field=>apiRef.current.rootElementRef.current?function getGridColumnHeaderElement(root,field){return root.querySelector(`[role="columnheader"][data-field="${escapeOperandAttributeSelector(field)}"]`)}(apiRef.current.rootElementRef.current,field):null),[apiRef]),getRowElement=react.useCallback((id=>apiRef.current.rootElementRef.current?function getGridRowElement(root,id){return root.querySelector(getGridRowElementSelector(id))}(apiRef.current.rootElementRef.current,id):null),[apiRef]),getCellElement=react.useCallback(((id,field)=>apiRef.current.rootElementRef.current?function getGridCellElement(root,{id,field}){const selector=`${getGridRowElementSelector(id)} .${gridClasses.cell}[data-field="${escapeOperandAttributeSelector(field)}"]`;return root.querySelector(selector)}(apiRef.current.rootElementRef.current,{id,field}):null),[apiRef]),paramsPrivateApi={getCellParamsForRow};useGridApiMethod(apiRef,{getCellValue,getCellParams,getCellElement,getRowValue,getRowFormattedValue,getRowParams,getRowElement,getColumnHeaderParams,getColumnHeaderElement},"public"),useGridApiMethod(apiRef,paramsPrivateApi,"private")}const getSelectionModelPropValue=(selectionModelProp,prevSelectionModel)=>null==selectionModelProp||Array.isArray(selectionModelProp)?selectionModelProp:prevSelectionModel&&prevSelectionModel[0]===selectionModelProp?prevSelectionModel:[selectionModelProp],rowSelectionStateInitializer=(state,props)=>(0,esm_extends.Z)({},state,{rowSelection:props.rowSelection?getSelectionModelPropValue(props.rowSelectionModel)??[]:[]}),useGridRowSelection=(apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridSelection"),runIfRowSelectionIsEnabled=react.useCallback((callback=>(...args)=>{props.rowSelection&&callback(...args)}),[props.rowSelection]),applyAutoSelection=props.signature!==GridSignature.DataGrid&&(props.rowSelectionPropagation?.parents||props.rowSelectionPropagation?.descendants),propRowSelectionModel=react.useMemo((()=>getSelectionModelPropValue(props.rowSelectionModel,gridRowSelectionStateSelector(apiRef.current.state))),[apiRef,props.rowSelectionModel]),lastRowToggled=react.useRef(null);apiRef.current.registerControlState({stateId:"rowSelection",propModel:propRowSelectionModel,propOnChange:props.onRowSelectionModelChange,stateSelector:gridRowSelectionStateSelector,changeEvent:"rowSelectionChange"});const{checkboxSelection,disableRowSelectionOnClick,isRowSelectable:propIsRowSelectable}=props,canHaveMultipleSelection=isMultipleRowSelectionEnabled(props),tree=useGridSelector(apiRef,gridRowTreeSelector),isNestedData=useGridSelector(apiRef,gridRowMaximumTreeDepthSelector)>1,expandMouseRowRangeSelection=react.useCallback((id=>{let endId=id;const startId=lastRowToggled.current??id,isSelected=apiRef.current.isRowSelected(id);if(isSelected){const visibleRowIds=gridExpandedSortedRowIdsSelector(apiRef),startIndex=visibleRowIds.findIndex((rowId=>rowId===startId)),endIndex=visibleRowIds.findIndex((rowId=>rowId===endId));if(startIndex===endIndex)return;endId=startIndex>endIndex?visibleRowIds[endIndex+1]:visibleRowIds[endIndex-1]}lastRowToggled.current=id,apiRef.current.selectRowRange({startId,endId},!isSelected)}),[apiRef]),setRowSelectionModel=react.useCallback((model=>{if(props.signature===GridSignature.DataGrid&&!canHaveMultipleSelection&&Array.isArray(model)&&model.length>1)throw new Error(["MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.","You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection."].join("\n"));gridRowSelectionStateSelector(apiRef.current.state)!==model&&(logger.debug("Setting selection model"),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rowSelection:props.rowSelection?model:[]}))),apiRef.current.forceUpdate())}),[apiRef,logger,props.rowSelection,props.signature,canHaveMultipleSelection]),isRowSelected=react.useCallback((id=>gridRowSelectionStateSelector(apiRef.current.state).includes(id)),[apiRef]),isRowSelectable=react.useCallback((id=>{if(!1===props.rowSelection)return!1;if(propIsRowSelectable&&!propIsRowSelectable(apiRef.current.getRowParams(id)))return!1;const rowNode=gridRowTreeSelector(apiRef)[id];return"footer"!==rowNode?.type&&"pinnedRow"!==rowNode?.type}),[apiRef,props.rowSelection,propIsRowSelectable]),getSelectedRows=react.useCallback((()=>selectedGridRowsSelector(apiRef)),[apiRef]),selectRow=react.useCallback(((id,isSelected=!0,resetSelection=!1)=>{if(apiRef.current.isRowSelectable(id))if(lastRowToggled.current=id,resetSelection){logger.debug(`Setting selection for row ${id}`);const newSelection=[],addRow=rowId=>{newSelection.push(rowId)};isSelected&&(addRow(id),applyAutoSelection&&findRowsToSelect(apiRef,tree,id,props.rowSelectionPropagation?.descendants??!1,props.rowSelectionPropagation?.parents??!1,addRow)),apiRef.current.setRowSelectionModel(newSelection)}else{logger.debug(`Toggling selection for row ${id}`);const selection=gridRowSelectionStateSelector(apiRef.current.state),newSelection=new Set(selection);newSelection.delete(id);const addRow=rowId=>{newSelection.add(rowId)},removeRow=rowId=>{newSelection.delete(rowId)};isSelected?(addRow(id),applyAutoSelection&&findRowsToSelect(apiRef,tree,id,props.rowSelectionPropagation?.descendants??!1,props.rowSelectionPropagation?.parents??!1,addRow)):applyAutoSelection&&findRowsToDeselect(apiRef,tree,id,props.rowSelectionPropagation?.descendants??!1,props.rowSelectionPropagation?.parents??!1,removeRow);(newSelection.size<2||canHaveMultipleSelection)&&apiRef.current.setRowSelectionModel(Array.from(newSelection))}}),[apiRef,logger,applyAutoSelection,tree,props.rowSelectionPropagation?.descendants,props.rowSelectionPropagation?.parents,canHaveMultipleSelection]),selectRows=react.useCallback(((ids,isSelected=!0,resetSelection=!1)=>{logger.debug("Setting selection for several rows");const selectableIds=ids.filter((id=>apiRef.current.isRowSelectable(id)));let newSelection;if(resetSelection){if(isSelected){if(newSelection=new Set(selectableIds),applyAutoSelection){const addRow=rowId=>{newSelection.add(rowId)};selectableIds.forEach((id=>{findRowsToSelect(apiRef,tree,id,props.rowSelectionPropagation?.descendants??!1,props.rowSelectionPropagation?.parents??!1,addRow)}))}}else newSelection=new Set;const currentLookup=selectedIdsLookupSelector(apiRef);if(newSelection.size===Object.keys(currentLookup).length&&Array.from(newSelection).every((id=>currentLookup[id]===id)))return}else{newSelection=new Set(Object.values(selectedIdsLookupSelector(apiRef)));const addRow=rowId=>{newSelection.add(rowId)},removeRow=rowId=>{newSelection.delete(rowId)};selectableIds.forEach((id=>{isSelected?(newSelection.add(id),applyAutoSelection&&findRowsToSelect(apiRef,tree,id,props.rowSelectionPropagation?.descendants??!1,props.rowSelectionPropagation?.parents??!1,addRow)):(removeRow(id),applyAutoSelection&&findRowsToDeselect(apiRef,tree,id,props.rowSelectionPropagation?.descendants??!1,props.rowSelectionPropagation?.parents??!1,removeRow))}))}(newSelection.size<2||canHaveMultipleSelection)&&apiRef.current.setRowSelectionModel(Array.from(newSelection))}),[logger,applyAutoSelection,canHaveMultipleSelection,apiRef,tree,props.rowSelectionPropagation?.descendants,props.rowSelectionPropagation?.parents]),selectRowRange=react.useCallback((({startId,endId},isSelected=!0,resetSelection=!1)=>{if(!apiRef.current.getRow(startId)||!apiRef.current.getRow(endId))return;logger.debug(`Expanding selection from row ${startId} to row ${endId}`);const allPagesRowIds=gridExpandedSortedRowIdsSelector(apiRef),startIndex=allPagesRowIds.indexOf(startId),endIndex=allPagesRowIds.indexOf(endId),[start,end]=startIndex>endIndex?[endIndex,startIndex]:[startIndex,endIndex],rowsBetweenStartAndEnd=allPagesRowIds.slice(start,end+1);apiRef.current.selectRows(rowsBetweenStartAndEnd,isSelected,resetSelection)}),[apiRef,logger]),selectionPrivateApi={selectRows,selectRowRange};useGridApiMethod(apiRef,{selectRow,setRowSelectionModel,getSelectedRows,isRowSelected,isRowSelectable},"public"),useGridApiMethod(apiRef,selectionPrivateApi,props.signature===GridSignature.DataGrid?"private":"public");const removeOutdatedSelection=react.useCallback(((sortModelUpdated=!1)=>{const currentSelection=gridRowSelectionStateSelector(apiRef.current.state),rowsLookup=gridRowsLookupSelector(apiRef),filteredRowsLookup=gridFilteredRowsLookupSelector(apiRef),selectionLookup=(0,esm_extends.Z)({},selectedIdsLookupSelector(apiRef));let hasChanged=!1;currentSelection.forEach((id=>{if((id=>"server"===props.filterMode?!rowsLookup[id]:!rowsLookup[id]||!1===filteredRowsLookup[id])(id)){if(props.keepNonExistentRowsSelected)return;return delete selectionLookup[id],void(hasChanged=!0)}if(!props.rowSelectionPropagation?.parents)return;const node=tree[id];if("group"===node.type){if(node.isAutoGenerated)return delete selectionLookup[id],void(hasChanged=!0);node.children.every((childId=>!1===filteredRowsLookup[childId]))||(delete selectionLookup[id],hasChanged=!0)}}));const shouldReapplyPropagation=isNestedData&&props.rowSelectionPropagation?.parents&&Object.keys(selectionLookup).length>0;if(hasChanged||shouldReapplyPropagation&&!sortModelUpdated){const newSelection=Object.values(selectionLookup);shouldReapplyPropagation?apiRef.current.selectRows(newSelection,!0,!0):apiRef.current.setRowSelectionModel(newSelection)}}),[apiRef,isNestedData,props.rowSelectionPropagation?.parents,props.keepNonExistentRowsSelected,props.filterMode,tree]),handleSingleRowSelection=react.useCallback(((id,event)=>{const hasCtrlKey=event.metaKey||event.ctrlKey,isMultipleSelectionDisabled=!checkboxSelection&&!hasCtrlKey&&!(event=>!!event.key)(event),resetSelection=!canHaveMultipleSelection||isMultipleSelectionDisabled,isSelected=apiRef.current.isRowSelected(id);resetSelection?apiRef.current.selectRow(id,!!isMultipleSelectionDisabled||!isSelected,!0):apiRef.current.selectRow(id,!isSelected,!1)}),[apiRef,canHaveMultipleSelection,checkboxSelection]),handleRowClick=react.useCallback(((params,event)=>{if(disableRowSelectionOnClick)return;const field=event.target.closest(`.${gridClasses.cell}`)?.getAttribute("data-field");if(field===GRID_CHECKBOX_SELECTION_COL_DEF.field)return;if("__detail_panel_toggle__"===field)return;if(field){const column=apiRef.current.getColumn(field);if("actions"===column?.type)return}"pinnedRow"!==gridRowTreeSelector(apiRef)[params.id].type&&(event.shiftKey&&canHaveMultipleSelection?expandMouseRowRangeSelection(params.id):handleSingleRowSelection(params.id,event))}),[disableRowSelectionOnClick,canHaveMultipleSelection,apiRef,expandMouseRowRangeSelection,handleSingleRowSelection]),preventSelectionOnShift=react.useCallback(((params,event)=>{canHaveMultipleSelection&&event.shiftKey&&window.getSelection()?.removeAllRanges()}),[canHaveMultipleSelection]),handleRowSelectionCheckboxChange=react.useCallback(((params,event)=>{canHaveMultipleSelection&&event.nativeEvent.shiftKey?expandMouseRowRangeSelection(params.id):apiRef.current.selectRow(params.id,params.value,!canHaveMultipleSelection)}),[apiRef,expandMouseRowRangeSelection,canHaveMultipleSelection]),handleHeaderSelectionCheckboxChange=react.useCallback((params=>{const rowsToBeSelected=props.pagination&&props.checkboxSelectionVisibleOnly&&"client"===props.paginationMode?gridPaginatedVisibleSortedGridRowIdsSelector(apiRef):gridExpandedSortedRowIdsSelector(apiRef);apiRef.current.selectRows(rowsToBeSelected,params.value)}),[apiRef,props.checkboxSelectionVisibleOnly,props.pagination,props.paginationMode]),handleCellKeyDown=react.useCallback(((params,event)=>{if(apiRef.current.getCellMode(params.id,params.field)!==GridCellModes.Edit&&!isEventTargetInPortal(event)){if(isNavigationKey(event.key)&&event.shiftKey){const focusCell=gridFocusCellSelector(apiRef);if(focusCell&&focusCell.id!==params.id){event.preventDefault();const isNextRowSelected=apiRef.current.isRowSelected(focusCell.id);if(!canHaveMultipleSelection)return void apiRef.current.selectRow(focusCell.id,!isNextRowSelected,!0);const newRowIndex=apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id),previousRowIndex=apiRef.current.getRowIndexRelativeToVisibleRows(params.id);let start,end;newRowIndex>previousRowIndex?isNextRowSelected?(start=previousRowIndex,end=newRowIndex-1):(start=previousRowIndex,end=newRowIndex):isNextRowSelected?(start=newRowIndex+1,end=previousRowIndex):(start=newRowIndex,end=previousRowIndex);const rowsBetweenStartAndEnd=getVisibleRows(apiRef).rows.slice(start,end+1).map((row=>row.id));return void apiRef.current.selectRows(rowsBetweenStartAndEnd,!isNextRowSelected)}}if(" "===event.key&&event.shiftKey)return event.preventDefault(),void handleSingleRowSelection(params.id,event);"A"===String.fromCharCode(event.keyCode)&&(event.ctrlKey||event.metaKey)&&(event.preventDefault(),selectRows(apiRef.current.getAllRowIds(),!0))}}),[apiRef,handleSingleRowSelection,selectRows,canHaveMultipleSelection]);useGridApiEventHandler(apiRef,"sortedRowsSet",runIfRowSelectionIsEnabled((()=>removeOutdatedSelection(!0)))),useGridApiEventHandler(apiRef,"filteredRowsSet",runIfRowSelectionIsEnabled(removeOutdatedSelection)),useGridApiEventHandler(apiRef,"rowClick",runIfRowSelectionIsEnabled(handleRowClick)),useGridApiEventHandler(apiRef,"rowSelectionCheckboxChange",runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange)),useGridApiEventHandler(apiRef,"headerSelectionCheckboxChange",handleHeaderSelectionCheckboxChange),useGridApiEventHandler(apiRef,"cellMouseDown",runIfRowSelectionIsEnabled(preventSelectionOnShift)),useGridApiEventHandler(apiRef,"cellKeyDown",runIfRowSelectionIsEnabled(handleCellKeyDown)),react.useEffect((()=>{void 0!==propRowSelectionModel&&apiRef.current.setRowSelectionModel(propRowSelectionModel)}),[apiRef,propRowSelectionModel,props.rowSelection]),react.useEffect((()=>{props.rowSelection||apiRef.current.setRowSelectionModel([])}),[apiRef,props.rowSelection]);const isStateControlled=null!=propRowSelectionModel;react.useEffect((()=>{if(isStateControlled||!props.rowSelection)return;const currentSelection=gridRowSelectionStateSelector(apiRef.current.state);if(isRowSelectable){const newSelection=currentSelection.filter((id=>isRowSelectable(id)));newSelection.length<currentSelection.length&&apiRef.current.setRowSelectionModel(newSelection)}}),[apiRef,isRowSelectable,isStateControlled,props.rowSelection]),react.useEffect((()=>{if(!props.rowSelection||isStateControlled)return;const currentSelection=gridRowSelectionStateSelector(apiRef.current.state);!canHaveMultipleSelection&&currentSelection.length>1&&apiRef.current.setRowSelectionModel([])}),[apiRef,canHaveMultipleSelection,checkboxSelection,isStateControlled,props.rowSelection]),react.useEffect((()=>{runIfRowSelectionIsEnabled(removeOutdatedSelection)}),[removeOutdatedSelection,runIfRowSelectionIsEnabled])},useGridRowSelectionPreProcessors=(apiRef,props)=>{const classes=(ownerState=>{const{classes}=ownerState;return react.useMemo((()=>(0,composeClasses.Z)({cellCheckbox:["cellCheckbox"],columnHeaderCheckbox:["columnHeaderCheckbox"]},getDataGridUtilityClass,classes)),[classes])})({classes:props.classes}),updateSelectionColumn=react.useCallback((columnsState=>{const selectionColumn=(0,esm_extends.Z)({},GRID_CHECKBOX_SELECTION_COL_DEF,{cellClassName:classes.cellCheckbox,headerClassName:classes.columnHeaderCheckbox,headerName:apiRef.current.getLocaleText("checkboxSelectionHeaderName")}),shouldHaveSelectionColumn=props.checkboxSelection,haveSelectionColumn=null!=columnsState.lookup.__check__;return shouldHaveSelectionColumn&&!haveSelectionColumn?(columnsState.lookup.__check__=selectionColumn,columnsState.orderedFields=["__check__",...columnsState.orderedFields]):!shouldHaveSelectionColumn&&haveSelectionColumn?(delete columnsState.lookup.__check__,columnsState.orderedFields=columnsState.orderedFields.filter((field=>"__check__"!==field))):shouldHaveSelectionColumn&&haveSelectionColumn&&(columnsState.lookup.__check__=(0,esm_extends.Z)({},selectionColumn,columnsState.lookup.__check__)),columnsState}),[apiRef,classes,props.checkboxSelection]);useGridRegisterPipeProcessor(apiRef,"hydrateColumns",updateSelectionColumn)},sortingStateInitializer=(state,props)=>{const sortModel=props.sortModel??props.initialState?.sorting?.sortModel??[];return(0,esm_extends.Z)({},state,{sorting:{sortModel:sanitizeSortModel(sortModel,props.disableMultipleColumnsSorting),sortedRows:[]}})};function scrollIntoView(dimensions){const{containerSize,scrollPosition,elementSize,elementOffset}=dimensions,elementEnd=elementOffset+elementSize;return elementSize>containerSize?elementOffset:elementEnd-containerSize>scrollPosition?elementEnd-containerSize:elementOffset<scrollPosition?elementOffset:void 0}var ownerWindow=__webpack_require__("./node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js");const DATA_GRID_PROPS_DEFAULT_VALUES={autoHeight:!1,autoPageSize:!1,autosizeOnMount:!1,checkboxSelection:!1,checkboxSelectionVisibleOnly:!1,clipboardCopyCellDelimiter:"\t",columnBufferPx:150,columnHeaderHeight:56,disableAutosize:!1,disableColumnFilter:!1,disableColumnMenu:!1,disableColumnReorder:!1,disableColumnResize:!1,disableColumnSelector:!1,disableColumnSorting:!1,disableDensitySelector:!1,disableEval:!1,disableMultipleColumnsFiltering:!1,disableMultipleColumnsSorting:!1,disableMultipleRowSelection:!1,disableRowSelectionOnClick:!1,disableVirtualization:!1,editMode:GridEditModes.Cell,filterDebounceMs:150,filterMode:"client",hideFooter:!1,hideFooterPagination:!1,hideFooterRowCount:!1,hideFooterSelectedRowCount:!1,ignoreDiacritics:!1,ignoreValueFormatterDuringExport:!1,indeterminateCheckboxAction:"deselect",keepColumnPositionIfDraggedOutside:!1,keepNonExistentRowsSelected:!1,loading:!1,logger:console,logLevel:"error",pageSizeOptions:[25,50,100],pagination:!1,paginationMode:"client",resetPageOnSortFilter:!1,resizeThrottleMs:60,rowBufferPx:150,rowHeight:52,rowPositionsDebounceMs:166,rows:[],rowSelection:!0,rowSpacingType:"margin",showCellVerticalBorder:!1,showColumnVerticalBorder:!1,sortingMode:"client",sortingOrder:["asc","desc",null],throttleRowsMs:0,unstable_rowSpanning:!1,virtualizeColumnsWithAutoRowHeight:!1},EMPTY_SIZE={width:0,height:0},EMPTY_DIMENSIONS={isReady:!1,root:EMPTY_SIZE,viewportOuterSize:EMPTY_SIZE,viewportInnerSize:EMPTY_SIZE,contentSize:EMPTY_SIZE,minimumSize:EMPTY_SIZE,hasScrollX:!1,hasScrollY:!1,scrollbarSize:0,headerHeight:0,groupHeaderHeight:0,headerFilterHeight:0,rowWidth:0,rowHeight:0,columnsTotalWidth:0,leftPinnedWidth:0,rightPinnedWidth:0,headersTotalHeight:0,topContainerHeight:0,bottomContainerHeight:0},dimensionsStateInitializer=(state,props,apiRef)=>{const dimensions=EMPTY_DIMENSIONS,density=gridDensityFactorSelector(apiRef);return(0,esm_extends.Z)({},state,{dimensions:(0,esm_extends.Z)({},dimensions,getStaticDimensions(props,apiRef,density,gridVisiblePinnedColumnDefinitionsSelector(apiRef)))})},columnsTotalWidthSelector=createSelector_createSelector(gridVisibleColumnDefinitionsSelector,gridColumnPositionsSelector,((visibleColumns,positions)=>{const colCount=visibleColumns.length;return 0===colCount?0:roundToDecimalPlaces(positions[colCount-1]+visibleColumns[colCount-1].computedWidth,1)}));function useGridDimensions(apiRef,props){const logger=useGridLogger(apiRef,"useResizeContainer"),errorShown=react.useRef(!1),rootDimensionsRef=react.useRef(EMPTY_SIZE),pinnedColumns=useGridSelector(apiRef,gridVisiblePinnedColumnDefinitionsSelector),densityFactor=useGridSelector(apiRef,gridDensityFactorSelector),columnsTotalWidth=useGridSelector(apiRef,columnsTotalWidthSelector),isFirstSizing=react.useRef(!0),{rowHeight,headerHeight,groupHeaderHeight,headerFilterHeight,headersTotalHeight,leftPinnedWidth,rightPinnedWidth}=getStaticDimensions(props,apiRef,densityFactor,pinnedColumns),previousSize=react.useRef(void 0),getRootDimensions=react.useCallback((()=>gridDimensionsSelector(apiRef.current.state)),[apiRef]),setDimensions=react.useCallback((dimensions=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{dimensions}))),apiRef.current.rootElementRef.current&&setCSSVariables(apiRef.current.rootElementRef.current,gridDimensionsSelector(apiRef.current.state))}),[apiRef]),resize=react.useCallback((()=>{const element=apiRef.current.mainElementRef.current;if(!element)return;const computedStyle=(0,ownerWindow.Z)(element).getComputedStyle(element),newSize={width:parseFloat(computedStyle.width)||0,height:parseFloat(computedStyle.height)||0};previousSize.current&&areElementSizesEqual(previousSize.current,newSize)||(apiRef.current.publishEvent("resize",newSize),previousSize.current=newSize)}),[apiRef]),getViewportPageSize=react.useCallback((()=>{const dimensions=gridDimensionsSelector(apiRef.current.state);if(!dimensions.isReady)return 0;const currentPage=getVisibleRows(apiRef);if(props.getRowHeight){const renderContext=gridRenderContextSelector(apiRef),viewportPageSize=renderContext.lastRowIndex-renderContext.firstRowIndex;return Math.min(viewportPageSize-1,currentPage.rows.length)}const maximumPageSizeWithoutScrollBar=Math.floor(dimensions.viewportInnerSize.height/rowHeight);return Math.min(maximumPageSizeWithoutScrollBar,currentPage.rows.length)}),[apiRef,props.getRowHeight,rowHeight]),updateDimensions=react.useCallback((()=>{if(isFirstSizing.current)return;const scrollbarSize=function measureScrollbarSize(element,scrollbarSize){if(void 0!==scrollbarSize)return scrollbarSize;if(null===element)return 0;const cachedSize=scrollbarSizeCache.get(element);if(void 0!==cachedSize)return cachedSize;const scrollDiv=(0,ownerDocument.Z)(element).createElement("div");scrollDiv.style.width="99px",scrollDiv.style.height="99px",scrollDiv.style.position="absolute",scrollDiv.style.overflow="scroll",scrollDiv.className="scrollDiv",element.appendChild(scrollDiv);const size=scrollDiv.offsetWidth-scrollDiv.clientWidth;return element.removeChild(scrollDiv),scrollbarSizeCache.set(element,size),size}(apiRef.current.mainElementRef.current,props.scrollbarSize),rowsMeta=gridRowsMetaSelector(apiRef.current.state),topContainerHeight=headersTotalHeight+rowsMeta.pinnedTopRowsTotalHeight,bottomContainerHeight=rowsMeta.pinnedBottomRowsTotalHeight,contentSize={width:columnsTotalWidth-leftPinnedWidth-rightPinnedWidth,height:roundToDecimalPlaces(rowsMeta.currentPageTotalHeight,1)};let viewportOuterSize,viewportInnerSize,hasScrollX=!1,hasScrollY=!1;if(props.autoHeight)hasScrollY=!1,hasScrollX=Math.round(columnsTotalWidth)>Math.round(rootDimensionsRef.current.width),viewportOuterSize={width:rootDimensionsRef.current.width,height:topContainerHeight+bottomContainerHeight+contentSize.height},viewportInnerSize={width:Math.max(0,viewportOuterSize.width-(hasScrollY?scrollbarSize:0)),height:Math.max(0,viewportOuterSize.height-(hasScrollX?scrollbarSize:0))};else{viewportOuterSize={width:rootDimensionsRef.current.width,height:rootDimensionsRef.current.height},viewportInnerSize={width:Math.max(0,viewportOuterSize.width-leftPinnedWidth-rightPinnedWidth),height:Math.max(0,viewportOuterSize.height-topContainerHeight-bottomContainerHeight)};const content=contentSize,container=viewportInnerSize,hasScrollXIfNoYScrollBar=content.width>container.width,hasScrollYIfNoXScrollBar=content.height>container.height;(hasScrollXIfNoYScrollBar||hasScrollYIfNoXScrollBar)&&(hasScrollY=hasScrollYIfNoXScrollBar,hasScrollX=content.width+(hasScrollY?scrollbarSize:0)>container.width,hasScrollX&&(hasScrollY=content.height+scrollbarSize>container.height)),hasScrollY&&(viewportInnerSize.width-=scrollbarSize),hasScrollX&&(viewportInnerSize.height-=scrollbarSize)}const rowWidth=Math.max(viewportOuterSize.width,columnsTotalWidth+(hasScrollY?scrollbarSize:0)),minimumSize={width:columnsTotalWidth,height:topContainerHeight+contentSize.height+bottomContainerHeight},newDimensions={isReady:!0,root:rootDimensionsRef.current,viewportOuterSize,viewportInnerSize,contentSize,minimumSize,hasScrollX,hasScrollY,scrollbarSize,headerHeight,groupHeaderHeight,headerFilterHeight,rowWidth,rowHeight,columnsTotalWidth,leftPinnedWidth,rightPinnedWidth,headersTotalHeight,topContainerHeight,bottomContainerHeight},prevDimensions=apiRef.current.state.dimensions;isDeepEqual(prevDimensions,newDimensions)||(setDimensions(newDimensions),areElementSizesEqual(newDimensions.viewportInnerSize,prevDimensions.viewportInnerSize)||apiRef.current.publishEvent("viewportInnerSizeChange",newDimensions.viewportInnerSize),apiRef.current.updateRenderContext?.())}),[apiRef,setDimensions,props.scrollbarSize,props.autoHeight,rowHeight,headerHeight,groupHeaderHeight,headerFilterHeight,columnsTotalWidth,headersTotalHeight,leftPinnedWidth,rightPinnedWidth]),updateDimensionCallback=(0,useEventCallback.Z)(updateDimensions),debouncedUpdateDimensions=react.useMemo((()=>props.resizeThrottleMs>0?function throttle(func,wait=166){let timeout,lastArgs;const later=()=>{timeout=void 0,func(...lastArgs)};function throttled(...args){lastArgs=args,void 0===timeout&&(timeout=setTimeout(later,wait))}return throttled.clear=()=>{clearTimeout(timeout),timeout=void 0},throttled}((()=>{updateDimensionCallback(),apiRef.current.publishEvent("debouncedResize",rootDimensionsRef.current)}),props.resizeThrottleMs):void 0),[apiRef,props.resizeThrottleMs,updateDimensionCallback]);react.useEffect((()=>debouncedUpdateDimensions?.clear),[debouncedUpdateDimensions]);const apiPublic={resize,getRootDimensions},apiPrivate={updateDimensions,getViewportPageSize};(0,useEnhancedEffect.Z)(updateDimensions,[updateDimensions]),useGridApiMethod(apiRef,apiPublic,"public"),useGridApiMethod(apiRef,apiPrivate,"private");const handleRootMount=react.useCallback((root=>{setCSSVariables(root,gridDimensionsSelector(apiRef.current.state))}),[apiRef]),handleResize=react.useCallback((size=>{if(rootDimensionsRef.current=size,0!==size.height||errorShown.current||props.autoHeight||isJSDOM||(logger.error(["The parent DOM element of the Data Grid has an empty height.","Please make sure that this element has an intrinsic height.","The grid displays with a height of 0px.","","More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n")),errorShown.current=!0),0!==size.width||errorShown.current||isJSDOM||(logger.error(["The parent DOM element of the Data Grid has an empty width.","Please make sure that this element has an intrinsic width.","The grid displays with a width of 0px.","","More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n")),errorShown.current=!0),isFirstSizing.current||!debouncedUpdateDimensions)return isFirstSizing.current=!1,void updateDimensions();debouncedUpdateDimensions()}),[updateDimensions,props.autoHeight,debouncedUpdateDimensions,logger]);useGridApiOptionHandler(apiRef,"rootMount",handleRootMount),useGridApiOptionHandler(apiRef,"resize",handleResize),useGridApiOptionHandler(apiRef,"debouncedResize",props.onResize)}function setCSSVariables(root,dimensions){const set=(k,v)=>root.style.setProperty(k,v);set("--DataGrid-hasScrollX",`${Number(dimensions.hasScrollX)}`),set("--DataGrid-hasScrollY",`${Number(dimensions.hasScrollY)}`),set("--DataGrid-scrollbarSize",`${dimensions.scrollbarSize}px`),set("--DataGrid-rowWidth",`${dimensions.rowWidth}px`),set("--DataGrid-columnsTotalWidth",`${dimensions.columnsTotalWidth}px`),set("--DataGrid-leftPinnedWidth",`${dimensions.leftPinnedWidth}px`),set("--DataGrid-rightPinnedWidth",`${dimensions.rightPinnedWidth}px`),set("--DataGrid-headerHeight",`${dimensions.headerHeight}px`),set("--DataGrid-headersTotalHeight",`${dimensions.headersTotalHeight}px`),set("--DataGrid-topContainerHeight",`${dimensions.topContainerHeight}px`),set("--DataGrid-bottomContainerHeight",`${dimensions.bottomContainerHeight}px`),set("--height",`${dimensions.rowHeight}px`)}function getStaticDimensions(props,apiRef,density,pinnedColumnns){const validRowHeight=getValidRowHeight(props.rowHeight,DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight,rowHeightWarning);return{rowHeight:Math.floor(validRowHeight*density),headerHeight:Math.floor(props.columnHeaderHeight*density),groupHeaderHeight:Math.floor((props.columnGroupHeaderHeight??props.columnHeaderHeight)*density),headerFilterHeight:Math.floor((props.headerFilterHeight??props.columnHeaderHeight)*density),columnsTotalWidth:columnsTotalWidthSelector(apiRef),headersTotalHeight:getTotalHeaderHeight(apiRef,props),leftPinnedWidth:pinnedColumnns.left.reduce(((w,col)=>w+col.computedWidth),0),rightPinnedWidth:pinnedColumnns.right.reduce(((w,col)=>w+col.computedWidth),0)}}const scrollbarSizeCache=new WeakMap;function areElementSizesEqual(a,b){return a.width===b.width&&a.height===b.height}const ResizeObserver_ResizeObserver=void 0!==globalThis.ResizeObserver?globalThis.ResizeObserver:class ResizeObserver{observe(){}unobserve(){}disconnect(){}},rowsMetaStateInitializer=(state,props,apiRef)=>{apiRef.current.caches.rowsMeta={heights:new Map};const baseRowHeight=gridRowHeightSelector(apiRef.current.state),dataRowCount=gridRowCountSelector(apiRef),pagination=gridPaginationSelector(apiRef.current.state),rowCount=Math.min(pagination.enabled?pagination.paginationModel.pageSize:dataRowCount,dataRowCount);return(0,esm_extends.Z)({},state,{rowsMeta:{currentPageTotalHeight:rowCount*baseRowHeight,positions:Array.from({length:rowCount},((_,i)=>i*baseRowHeight)),pinnedTopRowsTotalHeight:0,pinnedBottomRowsTotalHeight:0}})};function calculateCellColSpan(params){const{apiRef,lookup,columnIndex,rowId,minFirstColumnIndex,maxLastColumnIndex,columns}=params,columnsLength=columns.length,column=columns[columnIndex],row=apiRef.current.getRow(rowId),value=apiRef.current.getRowValue(row,column),colSpan="function"==typeof column.colSpan?column.colSpan(value,row,column,apiRef):column.colSpan;if(!colSpan||1===colSpan)return setCellColSpanInfo(lookup,rowId,columnIndex,{spannedByColSpan:!1,cellProps:{colSpan:1,width:column.computedWidth}}),{colSpan:1};let width=column.computedWidth;for(let j=1;j<colSpan;j+=1){const nextColumnIndex=columnIndex+j;if(nextColumnIndex>=minFirstColumnIndex&&nextColumnIndex<maxLastColumnIndex){width+=columns[nextColumnIndex].computedWidth,setCellColSpanInfo(lookup,rowId,columnIndex+j,{spannedByColSpan:!0,rightVisibleCellIndex:Math.min(columnIndex+colSpan,columnsLength-1),leftVisibleCellIndex:columnIndex})}setCellColSpanInfo(lookup,rowId,columnIndex,{spannedByColSpan:!1,cellProps:{colSpan,width}})}return{colSpan}}function setCellColSpanInfo(lookup,rowId,columnIndex,cellColSpanInfo){lookup[rowId]||(lookup[rowId]={}),lookup[rowId][columnIndex]=cellColSpanInfo}function isLeaf(node){return void 0!==node.field}const recurrentUnwrapGroupingColumnModel=(columnGroupNode,parents,unwrappedGroupingModelToComplete)=>{if(isLeaf(columnGroupNode)){if(void 0!==unwrappedGroupingModelToComplete[columnGroupNode.field])throw new Error(["MUI X: columnGroupingModel contains duplicated field",`column field ${columnGroupNode.field} occurs two times in the grouping model:`,`- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(" > ")}`,`- ${parents.join(" > ")}`].join("\n"));return void(unwrappedGroupingModelToComplete[columnGroupNode.field]=parents)}const{groupId,children}=columnGroupNode;children.forEach((child=>{recurrentUnwrapGroupingColumnModel(child,[...parents,groupId],unwrappedGroupingModelToComplete)}))},unwrapGroupingColumnModel=columnGroupingModel=>{if(!columnGroupingModel)return{};const unwrappedSubTree={};return columnGroupingModel.forEach((columnGroupNode=>{recurrentUnwrapGroupingColumnModel(columnGroupNode,[],unwrappedSubTree)})),unwrappedSubTree},getColumnGroupsHeaderStructure=(orderedColumns,unwrappedGroupingModel,pinnedFields)=>{const getParents=field=>unwrappedGroupingModel[field]??[],groupingHeaderStructure=[],maxDepth=Math.max(...orderedColumns.map((field=>getParents(field).length))),haveSameParents=(field1,field2,depth)=>isDeepEqual(getParents(field1).slice(0,depth+1),getParents(field2).slice(0,depth+1));for(let depth=0;depth<maxDepth;depth+=1){const depthStructure=orderedColumns.reduce(((structure,newField)=>{const groupId=getParents(newField)[depth]??null;if(0===structure.length)return[{columnFields:[newField],groupId}];const lastGroup=structure[structure.length-1],prevField=lastGroup.columnFields[lastGroup.columnFields.length-1];return lastGroup.groupId!==groupId||!haveSameParents(prevField,newField,depth)||(field1=prevField,field2=newField,pinnedFields?.left&&pinnedFields.left.includes(field1)&&!pinnedFields.left.includes(field2)||pinnedFields?.right&&!pinnedFields.right.includes(field1)&&pinnedFields.right.includes(field2))?[...structure,{columnFields:[newField],groupId}]:[...structure.slice(0,structure.length-1),{columnFields:[...lastGroup.columnFields,newField],groupId}];var field1,field2}),[]);groupingHeaderStructure.push(depthStructure)}return groupingHeaderStructure},useGridColumnGrouping_excluded=["groupId","children"],createGroupLookup=columnGroupingModel=>{let groupLookup={};return columnGroupingModel.forEach((node=>{if(isLeaf(node))return;const{groupId,children}=node,other=(0,objectWithoutPropertiesLoose.Z)(node,useGridColumnGrouping_excluded);if(!groupId)throw new Error("MUI X: An element of the columnGroupingModel does not have either `field` or `groupId`.");const groupParam=(0,esm_extends.Z)({},other,{groupId}),subTreeLookup=createGroupLookup(children);if(void 0!==subTreeLookup[groupId]||void 0!==groupLookup[groupId])throw new Error(`MUI X: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);groupLookup=(0,esm_extends.Z)({},groupLookup,subTreeLookup,{[groupId]:groupParam})})),(0,esm_extends.Z)({},groupLookup)},columnGroupsStateInitializer=(state,props,apiRef)=>{if(!props.columnGroupingModel)return state;const columnFields=gridColumnFieldsSelector(apiRef),visibleColumnFields=gridVisibleColumnFieldsSelector(apiRef),groupLookup=createGroupLookup(props.columnGroupingModel??[]),unwrappedGroupingModel=unwrapGroupingColumnModel(props.columnGroupingModel??[]),columnGroupsHeaderStructure=getColumnGroupsHeaderStructure(columnFields,unwrappedGroupingModel,apiRef.current.state.pinnedColumns??{}),maxDepth=0===visibleColumnFields.length?0:Math.max(...visibleColumnFields.map((field=>unwrappedGroupingModel[field]?.length??0)));return(0,esm_extends.Z)({},state,{columnGrouping:{lookup:groupLookup,unwrappedGroupingModel,headerStructure:columnGroupsHeaderStructure,maxDepth}})},DEFAULT_GRID_AUTOSIZE_OPTIONS={includeHeaders:!0,includeOutliers:!1,outliersFactor:1.5,expand:!1,disableColumnVirtualization:!0};function trackFinger(event,currentTouchId){if(void 0!==currentTouchId&&event.changedTouches){for(let i=0;i<event.changedTouches.length;i+=1){const touch=event.changedTouches[i];if(touch.identifier===currentTouchId)return{x:touch.clientX,y:touch.clientY}}return!1}return{x:event.clientX,y:event.clientY}}function computeNewWidth(initialOffsetToSeparator,clickX,columnBounds,resizeDirection){let newWidth=initialOffsetToSeparator;return newWidth+="Right"===resizeDirection?clickX-columnBounds.left:columnBounds.right-clickX,newWidth}function preventClick(event){event.preventDefault(),event.stopImmediatePropagation()}function useColumnVirtualizationDisabled(apiRef){const promise=react.useRef(void 0),selector=()=>gridVirtualizationColumnEnabledSelector(apiRef),value=useGridSelector(apiRef,selector);react.useEffect((()=>{promise.current&&!1===value&&(promise.current.resolve(),promise.current=void 0)}));return()=>{if(!promise.current){if(!1===selector())return Promise.resolve();promise.current=function createControllablePromise(){let resolve,reject;const promise=new Promise(((_resolve,_reject)=>{resolve=_resolve,reject=_reject}));return promise.resolve=resolve,promise.reject=reject,promise}()}return promise.current}}function extractColumnWidths(apiRef,options,columns){const widthByField={},root=apiRef.current.rootElementRef.current;return root.classList.add(gridClasses.autosizing),columns.forEach((column=>{const widths=function findGridCells(api,field){const container=api.virtualScrollerRef.current;return Array.from(container.querySelectorAll(`:scope > div > div > div > [data-field="${escapeOperandAttributeSelector(field)}"][role="gridcell"]`))}(apiRef.current,column.field).map((cell=>cell.getBoundingClientRect().width??0)),filteredWidths=options.includeOutliers?widths:function excludeOutliers(inputValues,factor){if(inputValues.length<4)return inputValues;const values=inputValues.slice();values.sort(((a,b)=>a-b));const q1=values[Math.floor(.25*values.length)],q3=values[Math.floor(.75*values.length)-1],iqr=q3-q1,deviation=iqr<5?5:iqr*factor;return values.filter((v=>v>q1-deviation&&v<q3+deviation))}(widths,options.outliersFactor);if(options.includeHeaders){const header=function findGridHeader(api,field){return api.columnHeadersContainerRef.current.querySelector(`:scope > div > [data-field="${escapeOperandAttributeSelector(field)}"][role="columnheader"]`)}(apiRef.current,column.field);if(header){const title=header.querySelector(`.${gridClasses.columnHeaderTitle}`),content=header.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`),iconContainer=header.querySelector(`.${gridClasses.iconButtonContainer}`),menuContainer=header.querySelector(`.${gridClasses.menuIcon}`),element=title??content,style=window.getComputedStyle(header,null),paddingWidth=parseInt(style.paddingLeft,10)+parseInt(style.paddingRight,10),width=element.scrollWidth+1+paddingWidth+(iconContainer?.clientWidth??0)+(menuContainer?.clientWidth??0);filteredWidths.push(width)}}const hasColumnMin=column.minWidth!==-1/0&&void 0!==column.minWidth,hasColumnMax=column.maxWidth!==1/0&&void 0!==column.maxWidth,min=hasColumnMin?column.minWidth:0,max=hasColumnMax?column.maxWidth:1/0,maxContent=0===filteredWidths.length?0:Math.max(...filteredWidths);widthByField[column.field]=clamp(maxContent,min,max)})),root.classList.remove(gridClasses.autosizing),widthByField}const columnResizeStateInitializer=state=>(0,esm_extends.Z)({},state,{columnResize:{resizingColumnField:""}});function createResizeRefs(){return{colDef:void 0,initialColWidth:0,initialTotalWidth:0,previousMouseClickEvent:void 0,columnHeaderElement:void 0,headerFilterElement:void 0,groupHeaderElements:[],cellElements:[],leftPinnedCellsAfter:[],rightPinnedCellsBefore:[],fillerLeft:void 0,fillerRight:void 0,leftPinnedHeadersAfter:[],rightPinnedHeadersBefore:[]}}const useGridColumnResize=(apiRef,props)=>{const isRtl=(0,RtlProvider.V)(),logger=useGridLogger(apiRef,"useGridColumnResize"),refs=(0,useLazyRef.Z)(createResizeRefs).current,initialOffsetToSeparator=react.useRef(null),resizeDirection=react.useRef(null),stopResizeEventTimeout=(0,useTimeout.Z)(),touchId=react.useRef(void 0),updateWidth=newWidth=>{logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);const prevWidth=refs.columnHeaderElement.offsetWidth,widthDiff=newWidth-prevWidth,columnWidthDiff=newWidth-refs.initialColWidth;if(columnWidthDiff>0){const newTotalWidth=refs.initialTotalWidth+columnWidthDiff;apiRef.current.rootElementRef?.current?.style.setProperty("--DataGrid-rowWidth",`${newTotalWidth}px`)}refs.colDef.computedWidth=newWidth,refs.colDef.width=newWidth,refs.colDef.flex=0,refs.columnHeaderElement.style.width=`${newWidth}px`;const headerFilterElement=refs.headerFilterElement;headerFilterElement&&(headerFilterElement.style.width=`${newWidth}px`),refs.groupHeaderElements.forEach((element=>{const div=element;let finalWidth;finalWidth="1"===div.getAttribute("aria-colspan")?`${newWidth}px`:`${div.offsetWidth+widthDiff}px`,div.style.width=finalWidth})),refs.cellElements.forEach((element=>{const div=element;let finalWidth;finalWidth="1"===div.getAttribute("aria-colspan")?`${newWidth}px`:`${div.offsetWidth+widthDiff}px`,div.style.setProperty("--width",finalWidth)}));const pinnedPosition=apiRef.current.unstable_applyPipeProcessors("isColumnPinned",!1,refs.colDef.field);pinnedPosition===GridPinnedColumnPosition.LEFT&&(updateProperty(refs.fillerLeft,"width",widthDiff),refs.leftPinnedCellsAfter.forEach((cell=>{updateProperty(cell,"left",widthDiff)})),refs.leftPinnedHeadersAfter.forEach((header=>{updateProperty(header,"left",widthDiff)}))),pinnedPosition===GridPinnedColumnPosition.RIGHT&&(updateProperty(refs.fillerRight,"width",widthDiff),refs.rightPinnedCellsBefore.forEach((cell=>{updateProperty(cell,"right",widthDiff)})),refs.rightPinnedHeadersBefore.forEach((header=>{updateProperty(header,"right",widthDiff)})))},finishResize=nativeEvent=>{if(stopListening(),refs.previousMouseClickEvent){const prevEvent=refs.previousMouseClickEvent,prevTimeStamp=prevEvent.timeStamp,prevClientX=prevEvent.clientX,prevClientY=prevEvent.clientY;if(nativeEvent.timeStamp-prevTimeStamp<300&&nativeEvent.clientX===prevClientX&&nativeEvent.clientY===prevClientY)return refs.previousMouseClickEvent=void 0,void apiRef.current.publishEvent("columnResizeStop",null,nativeEvent)}if(refs.colDef){apiRef.current.setColumnWidth(refs.colDef.field,refs.colDef.width),logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`);const columnsState=gridColumnsStateSelector(apiRef.current.state);refs.groupHeaderElements.forEach((element=>{const div=element,finalWidth=`${function getFieldsFromGroupHeaderElem(colCellEl){return colCellEl.getAttribute("data-fields").slice(2,-2).split("-|-")}(element).reduce(((acc,field)=>!1!==columnsState.columnVisibilityModel[field]?acc+columnsState.lookup[field].computedWidth:acc),0)}px`;div.style.width=finalWidth}))}stopResizeEventTimeout.start(0,(()=>{apiRef.current.publishEvent("columnResizeStop",null,nativeEvent)}))},storeReferences=(colDef,separator,xStart)=>{const root=apiRef.current.rootElementRef.current;refs.initialColWidth=colDef.computedWidth,refs.initialTotalWidth=apiRef.current.getRootDimensions().rowWidth,refs.colDef=colDef,refs.columnHeaderElement=function findHeaderElementFromField(elem,field){return elem.querySelector(`[data-field="${escapeOperandAttributeSelector(field)}"]`)}(apiRef.current.columnHeadersContainerRef.current,colDef.field);const headerFilterElement=root.querySelector(`.${gridClasses.headerFilterRow} [data-field="${escapeOperandAttributeSelector(colDef.field)}"]`);headerFilterElement&&(refs.headerFilterElement=headerFilterElement),refs.groupHeaderElements=function findGroupHeaderElementsFromField(elem,field){return Array.from(elem.querySelectorAll(`[data-fields*="|-${escapeOperandAttributeSelector(field)}-|"]`)??[])}(apiRef.current.columnHeadersContainerRef?.current,colDef.field),refs.cellElements=function findGridCellElementsFromCol(col,api){if(!findParentElementFromClassName(col,gridClasses.root))throw new Error("MUI X: The root element is not found.");const ariaColIndex=col.getAttribute("aria-colindex");if(!ariaColIndex)return[];const colIndex=Number(ariaColIndex)-1,cells=[];return api.virtualScrollerRef?.current?(queryRows(api).forEach((rowElement=>{const rowId=rowElement.getAttribute("data-id");if(!rowId)return;let columnIndex=colIndex;const cellColSpanInfo=api.unstable_getCellColSpanInfo(rowId,colIndex);cellColSpanInfo&&cellColSpanInfo.spannedByColSpan&&(columnIndex=cellColSpanInfo.leftVisibleCellIndex);const cell=rowElement.querySelector(`[data-colindex="${columnIndex}"]`);cell&&cells.push(cell)})),cells):[]}(refs.columnHeaderElement,apiRef.current),refs.fillerLeft=findGridElement(apiRef.current,isRtl?"filler--pinnedRight":"filler--pinnedLeft"),refs.fillerRight=findGridElement(apiRef.current,isRtl?"filler--pinnedLeft":"filler--pinnedRight");const pinnedPosition=apiRef.current.unstable_applyPipeProcessors("isColumnPinned",!1,refs.colDef.field);refs.leftPinnedCellsAfter=pinnedPosition!==GridPinnedColumnPosition.LEFT?[]:function findLeftPinnedCellsAfterCol(api,col,isRtl){const colIndex=parseCellColIndex(col);return findPinnedCells({api,colIndex,position:isRtl?"right":"left",filterFn:index=>isRtl?index<colIndex:index>colIndex})}(apiRef.current,refs.columnHeaderElement,isRtl),refs.rightPinnedCellsBefore=pinnedPosition!==GridPinnedColumnPosition.RIGHT?[]:function findRightPinnedCellsBeforeCol(api,col,isRtl){const colIndex=parseCellColIndex(col);return findPinnedCells({api,colIndex,position:isRtl?"left":"right",filterFn:index=>isRtl?index>colIndex:index<colIndex})}(apiRef.current,refs.columnHeaderElement,isRtl),refs.leftPinnedHeadersAfter=pinnedPosition!==GridPinnedColumnPosition.LEFT?[]:function findLeftPinnedHeadersAfterCol(api,col,isRtl){const colIndex=parseCellColIndex(col);return findPinnedHeaders({api,position:isRtl?"right":"left",colIndex,filterFn:index=>isRtl?index<colIndex:index>colIndex})}(apiRef.current,refs.columnHeaderElement,isRtl),refs.rightPinnedHeadersBefore=pinnedPosition!==GridPinnedColumnPosition.RIGHT?[]:function findRightPinnedHeadersBeforeCol(api,col,isRtl){const colIndex=parseCellColIndex(col);return findPinnedHeaders({api,position:isRtl?"left":"right",colIndex,filterFn:(index,element)=>!element.classList.contains(gridClasses["columnHeader--last"])&&(isRtl?index>colIndex:index<colIndex)})}(apiRef.current,refs.columnHeaderElement,isRtl),resizeDirection.current=function getResizeDirection(separator,isRtl){const side=separator.classList.contains(gridClasses["columnSeparator--sideRight"])?"Right":"Left";return isRtl?function flipResizeDirection(side){return"Right"===side?"Left":"Right"}(side):side}(separator,isRtl),initialOffsetToSeparator.current=function computeOffsetToSeparator(clickX,columnBounds,resizeDirection){return"Left"===resizeDirection?clickX-columnBounds.left:columnBounds.right-clickX}(xStart,refs.columnHeaderElement.getBoundingClientRect(),resizeDirection.current)},handleResizeMouseUp=(0,useEventCallback.Z)(finishResize),handleResizeMouseMove=(0,useEventCallback.Z)((nativeEvent=>{if(0===nativeEvent.buttons)return void handleResizeMouseUp(nativeEvent);let newWidth=computeNewWidth(initialOffsetToSeparator.current,nativeEvent.clientX,refs.columnHeaderElement.getBoundingClientRect(),resizeDirection.current);newWidth=clamp(newWidth,refs.colDef.minWidth,refs.colDef.maxWidth),updateWidth(newWidth);const params={element:refs.columnHeaderElement,colDef:refs.colDef,width:newWidth};apiRef.current.publishEvent("columnResize",params,nativeEvent)})),handleTouchEnd=(0,useEventCallback.Z)((nativeEvent=>{trackFinger(nativeEvent,touchId.current)&&finishResize(nativeEvent)})),handleTouchMove=(0,useEventCallback.Z)((nativeEvent=>{const finger=trackFinger(nativeEvent,touchId.current);if(!finger)return;if("mousemove"===nativeEvent.type&&0===nativeEvent.buttons)return void handleTouchEnd(nativeEvent);let newWidth=computeNewWidth(initialOffsetToSeparator.current,finger.x,refs.columnHeaderElement.getBoundingClientRect(),resizeDirection.current);newWidth=clamp(newWidth,refs.colDef.minWidth,refs.colDef.maxWidth),updateWidth(newWidth);const params={element:refs.columnHeaderElement,colDef:refs.colDef,width:newWidth};apiRef.current.publishEvent("columnResize",params,nativeEvent)})),handleTouchStart=(0,useEventCallback.Z)((event=>{const cellSeparator=findParentElementFromClassName(event.target,gridClasses["columnSeparator--resizable"]);if(!cellSeparator)return;const touch=event.changedTouches[0];null!=touch&&(touchId.current=touch.identifier);const field=function getFieldFromHeaderElem(colCellEl){return colCellEl.getAttribute("data-field")}(findParentElementFromClassName(event.target,gridClasses.columnHeader)),colDef=apiRef.current.getColumn(field);logger.debug(`Start Resize on col ${colDef.field}`),apiRef.current.publishEvent("columnResizeStart",{field},event),storeReferences(colDef,cellSeparator,touch.clientX);const doc=(0,ownerDocument.Z)(event.currentTarget);doc.addEventListener("touchmove",handleTouchMove),doc.addEventListener("touchend",handleTouchEnd)})),stopListening=react.useCallback((()=>{const doc=(0,ownerDocument.Z)(apiRef.current.rootElementRef.current);doc.body.style.removeProperty("cursor"),doc.removeEventListener("mousemove",handleResizeMouseMove),doc.removeEventListener("mouseup",handleResizeMouseUp),doc.removeEventListener("touchmove",handleTouchMove),doc.removeEventListener("touchend",handleTouchEnd),setTimeout((()=>{doc.removeEventListener("click",preventClick,!0)}),100),refs.columnHeaderElement&&(refs.columnHeaderElement.style.pointerEvents="unset")}),[apiRef,refs,handleResizeMouseMove,handleResizeMouseUp,handleTouchMove,handleTouchEnd]),handleResizeStart=react.useCallback((({field})=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{columnResize:(0,esm_extends.Z)({},state.columnResize,{resizingColumnField:field})}))),apiRef.current.forceUpdate()}),[apiRef]),handleResizeStop=react.useCallback((()=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{columnResize:(0,esm_extends.Z)({},state.columnResize,{resizingColumnField:""})}))),apiRef.current.forceUpdate()}),[apiRef]),handleColumnResizeMouseDown=(0,useEventCallback.Z)((({colDef},event)=>{if(0!==event.button)return;if(!event.currentTarget.classList.contains(gridClasses["columnSeparator--resizable"]))return;event.preventDefault(),logger.debug(`Start Resize on col ${colDef.field}`),apiRef.current.publishEvent("columnResizeStart",{field:colDef.field},event),storeReferences(colDef,event.currentTarget,event.clientX);const doc=(0,ownerDocument.Z)(apiRef.current.rootElementRef.current);doc.body.style.cursor="col-resize",refs.previousMouseClickEvent=event.nativeEvent,doc.addEventListener("mousemove",handleResizeMouseMove),doc.addEventListener("mouseup",handleResizeMouseUp),doc.addEventListener("click",preventClick,!0)})),handleColumnSeparatorDoubleClick=(0,useEventCallback.Z)(((params,event)=>{if(props.disableAutosize)return;if(0!==event.button)return;const column=apiRef.current.state.columns.lookup[params.field];!1!==column.resizable&&apiRef.current.autosizeColumns((0,esm_extends.Z)({},props.autosizeOptions,{disableColumnVirtualization:!1,columns:[column.field]}))})),columnVirtualizationDisabled=useColumnVirtualizationDisabled(apiRef),isAutosizingRef=react.useRef(!1),autosizeColumns=react.useCallback((async userOptions=>{const root=apiRef.current.rootElementRef?.current;if(!root)return;if(isAutosizingRef.current)return;isAutosizingRef.current=!0;const state=gridColumnsStateSelector(apiRef.current.state),options=(0,esm_extends.Z)({},DEFAULT_GRID_AUTOSIZE_OPTIONS,userOptions,{columns:userOptions?.columns??state.orderedFields});options.columns=options.columns.filter((c=>!1!==state.columnVisibilityModel[c]));const columns=options.columns.map((c=>apiRef.current.state.columns.lookup[c]));try{!props.disableVirtualization&&options.disableColumnVirtualization&&(apiRef.current.unstable_setColumnVirtualization(!1),await columnVirtualizationDisabled());const widthByField=extractColumnWidths(apiRef,options,columns),newColumns=columns.map((column=>(0,esm_extends.Z)({},column,{width:widthByField[column.field],computedWidth:widthByField[column.field],flex:0})));if(options.expand){const totalWidth=state.orderedFields.map((field=>state.lookup[field])).filter((c=>!1!==state.columnVisibilityModel[c.field])).reduce(((total,column)=>total+(widthByField[column.field]??column.computedWidth??column.width)),0),dimensions=apiRef.current.getRootDimensions(),remainingWidth=dimensions.viewportInnerSize.width-totalWidth;if(remainingWidth>0){const widthPerColumn=remainingWidth/(newColumns.length||1);newColumns.forEach((column=>{column.width+=widthPerColumn,column.computedWidth+=widthPerColumn}))}}apiRef.current.updateColumns(newColumns),newColumns.forEach(((newColumn,index)=>{if(newColumn.width!==columns[index].width){const width=newColumn.width;apiRef.current.publishEvent("columnWidthChange",{element:apiRef.current.getColumnHeaderElement(newColumn.field),colDef:newColumn,width})}}))}finally{props.disableVirtualization||apiRef.current.unstable_setColumnVirtualization(!0),isAutosizingRef.current=!1}}),[apiRef,columnVirtualizationDisabled,props.disableVirtualization]);react.useEffect((()=>stopListening),[stopListening]),(0,useOnMount.Z)((()=>{props.autosizeOnMount&&Promise.resolve().then((()=>{apiRef.current.autosizeColumns(props.autosizeOptions)}))})),useGridNativeEventListener(apiRef,(()=>apiRef.current.columnHeadersContainerRef?.current),"touchstart",handleTouchStart,{passive:!0}),useGridApiMethod(apiRef,{autosizeColumns},"public"),useGridApiEventHandler(apiRef,"columnResizeStop",handleResizeStop),useGridApiEventHandler(apiRef,"columnResizeStart",handleResizeStart),useGridApiEventHandler(apiRef,"columnSeparatorMouseDown",handleColumnResizeMouseDown),useGridApiEventHandler(apiRef,"columnSeparatorDoubleClick",handleColumnSeparatorDoubleClick),useGridApiOptionHandler(apiRef,"columnResize",props.onColumnResize),useGridApiOptionHandler(apiRef,"columnWidthChange",props.onColumnWidthChange)};function updateProperty(element,property,delta){element&&(element.style[property]=`${parseInt(element.style[property],10)+delta}px`)}function isRowContextInitialized(renderContext){return 0!==renderContext.firstRowIndex||0!==renderContext.lastRowIndex}const getCellValue=(row,colDef,apiRef)=>{if(!row)return null;let cellValue=row[colDef.field];const valueGetter=colDef.rowSpanValueGetter??colDef.valueGetter;return valueGetter&&(cellValue=valueGetter(cellValue,row,colDef,apiRef)),cellValue},EMPTY_STATE={spannedCells:{},hiddenCells:{},hiddenCellOriginMap:{}},EMPTY_RANGE={firstRowIndex:0,lastRowIndex:0},skippedFields=new Set(["__check__","__reorder__","__detail_panel_toggle__"]),computeRowSpanningState=(apiRef,colDefs,visibleRows,range,rangeToProcess,resetState,processedRange)=>{const spannedCells=resetState?{}:(0,esm_extends.Z)({},apiRef.current.state.rowSpanning.spannedCells),hiddenCells=resetState?{}:(0,esm_extends.Z)({},apiRef.current.state.rowSpanning.hiddenCells),hiddenCellOriginMap=resetState?{}:(0,esm_extends.Z)({},apiRef.current.state.rowSpanning.hiddenCellOriginMap);return resetState&&(processedRange=EMPTY_RANGE),colDefs.forEach((colDef=>{if(!skippedFields.has(colDef.field)){for(let index=rangeToProcess.firstRowIndex;index<rangeToProcess.lastRowIndex;index+=1){const row=visibleRows[index];if(hiddenCells[row.id]?.[colDef.field])continue;const cellValue=getCellValue(row.model,colDef,apiRef);if(null==cellValue)continue;let spannedRowId=row.id,spannedRowIndex=index,rowSpan=0;const backwardsHiddenCells=[];if(index===rangeToProcess.firstRowIndex){let prevIndex=index-1,prevRowEntry=visibleRows[prevIndex];for(;prevIndex>=range.firstRowIndex&&prevRowEntry&&getCellValue(prevRowEntry.model,colDef,apiRef)===cellValue;){const currentRow=visibleRows[prevIndex+1];hiddenCells[currentRow.id]?hiddenCells[currentRow.id][colDef.field]=!0:hiddenCells[currentRow.id]={[colDef.field]:!0},backwardsHiddenCells.push(index),rowSpan+=1,spannedRowId=prevRowEntry.id,spannedRowIndex=prevIndex,prevIndex-=1,prevRowEntry=visibleRows[prevIndex]}}backwardsHiddenCells.forEach((hiddenCellIndex=>{hiddenCellOriginMap[hiddenCellIndex]?hiddenCellOriginMap[hiddenCellIndex][colDef.field]=spannedRowIndex:hiddenCellOriginMap[hiddenCellIndex]={[colDef.field]:spannedRowIndex}}));let relativeIndex=index+1;for(;relativeIndex<=range.lastRowIndex&&visibleRows[relativeIndex]&&getCellValue(visibleRows[relativeIndex].model,colDef,apiRef)===cellValue;){const currentRow=visibleRows[relativeIndex];hiddenCells[currentRow.id]?hiddenCells[currentRow.id][colDef.field]=!0:hiddenCells[currentRow.id]={[colDef.field]:!0},hiddenCellOriginMap[relativeIndex]?hiddenCellOriginMap[relativeIndex][colDef.field]=spannedRowIndex:hiddenCellOriginMap[relativeIndex]={[colDef.field]:spannedRowIndex},relativeIndex+=1,rowSpan+=1}rowSpan>0&&(spannedCells[spannedRowId]?spannedCells[spannedRowId][colDef.field]=rowSpan+1:spannedCells[spannedRowId]={[colDef.field]:rowSpan+1})}processedRange={firstRowIndex:Math.min(processedRange.firstRowIndex,rangeToProcess.firstRowIndex),lastRowIndex:Math.max(processedRange.lastRowIndex,rangeToProcess.lastRowIndex)}}})),{spannedCells,hiddenCells,hiddenCellOriginMap,processedRange}},getInitialRangeToProcess=(props,apiRef)=>{const rowCount=gridDataRowIdsSelector(apiRef).length;if(props.pagination){const pageSize=gridPageSizeSelector(apiRef);let paginationLastRowIndex=20;return pageSize>0&&(paginationLastRowIndex=pageSize-1),{firstRowIndex:0,lastRowIndex:Math.min(paginationLastRowIndex,rowCount)}}return{firstRowIndex:0,lastRowIndex:Math.min(20,rowCount)}},rowSpanningStateInitializer=(state,props,apiRef)=>{if(!props.unstable_rowSpanning)return(0,esm_extends.Z)({},state,{rowSpanning:EMPTY_STATE});const rowIds=state.rows.dataRowIds||[],orderedFields=state.columns.orderedFields||[],dataRowIdToModelLookup=state.rows.dataRowIdToModelLookup,columnsLookup=state.columns.lookup,isFilteringPending=Boolean(state.filter.filterModel.items.length)||Boolean(state.filter.filterModel.quickFilterValues?.length);if(!rowIds.length||!orderedFields.length||!dataRowIdToModelLookup||!columnsLookup||isFilteringPending)return(0,esm_extends.Z)({},state,{rowSpanning:EMPTY_STATE});const rangeToProcess=getInitialRangeToProcess(props,apiRef),rows=rowIds.map((id=>({id,model:dataRowIdToModelLookup[id]}))),colDefs=orderedFields.map((field=>columnsLookup[field])),{spannedCells,hiddenCells,hiddenCellOriginMap}=computeRowSpanningState(apiRef,colDefs,rows,rangeToProcess,rangeToProcess,!0,EMPTY_RANGE);return(0,esm_extends.Z)({},state,{rowSpanning:{spannedCells,hiddenCells,hiddenCellOriginMap}})};new Set;const listViewStateInitializer=(state,props,apiRef)=>(0,esm_extends.Z)({},state,{listViewColumn:props.unstable_listColumn?(0,esm_extends.Z)({},props.unstable_listColumn,{computedWidth:getListColumnWidth(apiRef)}):void 0});function getListColumnWidth(apiRef){return gridDimensionsSelector(apiRef.current.state).viewportInnerSize.width}const useDataGridComponent=(inputApiRef,props)=>{const apiRef=useGridInitialization(inputApiRef,props);return useGridRowSelectionPreProcessors(apiRef,props),(apiRef=>{useGridRegisterStrategyProcessor(apiRef,"none","rowTreeCreation",flatRowTreeCreationMethod)})(apiRef),useGridInitializeState(propsStateInitializer,apiRef,props),useGridInitializeState(rowSelectionStateInitializer,apiRef,props),useGridInitializeState(columnsStateInitializer,apiRef,props),useGridInitializeState(rowsStateInitializer,apiRef,props),useGridInitializeState(paginationStateInitializer,apiRef,props),useGridInitializeState(editingStateInitializer,apiRef,props),useGridInitializeState(focusStateInitializer,apiRef,props),useGridInitializeState(sortingStateInitializer,apiRef,props),useGridInitializeState(preferencePanelStateInitializer,apiRef,props),useGridInitializeState(filterStateInitializer,apiRef,props),useGridInitializeState(rowSpanningStateInitializer,apiRef,props),useGridInitializeState(densityStateInitializer,apiRef,props),useGridInitializeState(columnResizeStateInitializer,apiRef,props),useGridInitializeState(columnMenuStateInitializer,apiRef,props),useGridInitializeState(columnGroupsStateInitializer,apiRef,props),useGridInitializeState(virtualizationStateInitializer,apiRef,props),useGridInitializeState(dimensionsStateInitializer,apiRef,props),useGridInitializeState(rowsMetaStateInitializer,apiRef,props),useGridInitializeState(listViewStateInitializer,apiRef,props),useGridKeyboardNavigation(apiRef,props),useGridRowSelection(apiRef,props),function useGridColumns(apiRef,props){const logger=useGridLogger(apiRef,"useGridColumns"),previousColumnsProp=react.useRef(props.columns);apiRef.current.registerControlState({stateId:"visibleColumns",propModel:props.columnVisibilityModel,propOnChange:props.onColumnVisibilityModelChange,stateSelector:gridColumnVisibilityModelSelector,changeEvent:"columnVisibilityModelChange"});const setGridColumnsState=react.useCallback((columnsState=>{logger.debug("Updating columns state."),apiRef.current.setState(mergeColumnsState(columnsState)),apiRef.current.publishEvent("columnsChange",columnsState.orderedFields),apiRef.current.updateRenderContext?.(),apiRef.current.forceUpdate()}),[logger,apiRef]),getColumn=react.useCallback((field=>gridColumnLookupSelector(apiRef)[field]),[apiRef]),getAllColumns=react.useCallback((()=>gridColumnDefinitionsSelector(apiRef)),[apiRef]),getVisibleColumns=react.useCallback((()=>gridVisibleColumnDefinitionsSelector(apiRef)),[apiRef]),getColumnIndex=react.useCallback(((field,useVisibleColumns=!0)=>(useVisibleColumns?gridVisibleColumnDefinitionsSelector(apiRef):gridColumnDefinitionsSelector(apiRef)).findIndex((col=>col.field===field))),[apiRef]),getColumnPosition=react.useCallback((field=>{const index=getColumnIndex(field);return gridColumnPositionsSelector(apiRef)[index]}),[apiRef,getColumnIndex]),setColumnVisibilityModel=react.useCallback((model=>{gridColumnVisibilityModelSelector(apiRef)!==model&&(apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{columns:createColumnsState({apiRef,columnsToUpsert:[],initialState:void 0,columnVisibilityModel:model,keepOnlyColumnsToUpsert:!1})}))),apiRef.current.updateRenderContext?.(),apiRef.current.forceUpdate())}),[apiRef]),updateColumns=react.useCallback((columns=>{const columnsState=createColumnsState({apiRef,columnsToUpsert:columns,initialState:void 0,keepOnlyColumnsToUpsert:!1});setGridColumnsState(columnsState)}),[apiRef,setGridColumnsState]),setColumnVisibility=react.useCallback(((field,isVisible)=>{const columnVisibilityModel=gridColumnVisibilityModelSelector(apiRef);if(isVisible!==(columnVisibilityModel[field]??!0)){const newModel=(0,esm_extends.Z)({},columnVisibilityModel,{[field]:isVisible});apiRef.current.setColumnVisibilityModel(newModel)}}),[apiRef]),getColumnIndexRelativeToVisibleColumns=react.useCallback((field=>gridColumnFieldsSelector(apiRef).findIndex((col=>col===field))),[apiRef]),setColumnIndex=react.useCallback(((field,targetIndexPosition)=>{const allColumns=gridColumnFieldsSelector(apiRef),oldIndexPosition=getColumnIndexRelativeToVisibleColumns(field);if(oldIndexPosition===targetIndexPosition)return;logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);const updatedColumns=[...allColumns],fieldRemoved=updatedColumns.splice(oldIndexPosition,1)[0];updatedColumns.splice(targetIndexPosition,0,fieldRemoved),setGridColumnsState((0,esm_extends.Z)({},gridColumnsStateSelector(apiRef.current.state),{orderedFields:updatedColumns}));const params={column:apiRef.current.getColumn(field),targetIndex:apiRef.current.getColumnIndexRelativeToVisibleColumns(field),oldIndex:oldIndexPosition};apiRef.current.publishEvent("columnIndexChange",params)}),[apiRef,logger,setGridColumnsState,getColumnIndexRelativeToVisibleColumns]),setColumnWidth=react.useCallback(((field,width)=>{logger.debug(`Updating column ${field} width to ${width}`);const columnsState=gridColumnsStateSelector(apiRef.current.state),column=columnsState.lookup[field],newColumn=(0,esm_extends.Z)({},column,{width,hasBeenResized:!0});setGridColumnsState(hydrateColumnsWidth((0,esm_extends.Z)({},columnsState,{lookup:(0,esm_extends.Z)({},columnsState.lookup,{[field]:newColumn})}),apiRef.current.getRootDimensions())),apiRef.current.publishEvent("columnWidthChange",{element:apiRef.current.getColumnHeaderElement(field),colDef:newColumn,width})}),[apiRef,logger,setGridColumnsState]),columnReorderApi={setColumnIndex};useGridApiMethod(apiRef,{getColumn,getAllColumns,getColumnIndex,getColumnPosition,getVisibleColumns,getColumnIndexRelativeToVisibleColumns,updateColumns,setColumnVisibilityModel,setColumnVisibility,setColumnWidth},"public"),useGridApiMethod(apiRef,columnReorderApi,props.signature===GridSignature.DataGrid?"private":"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{const columnsStateToExport={},columnVisibilityModelToExport=gridColumnVisibilityModelSelector(apiRef);(!context.exportOnlyDirtyModels||null!=props.columnVisibilityModel||Object.keys(props.initialState?.columns?.columnVisibilityModel??{}).length>0||Object.keys(columnVisibilityModelToExport).length>0)&&(columnsStateToExport.columnVisibilityModel=columnVisibilityModelToExport),columnsStateToExport.orderedFields=gridColumnFieldsSelector(apiRef);const columns=gridColumnDefinitionsSelector(apiRef),dimensions={};return columns.forEach((colDef=>{if(colDef.hasBeenResized){const colDefDimensions={};COLUMNS_DIMENSION_PROPERTIES.forEach((propertyName=>{let propertyValue=colDef[propertyName];propertyValue===1/0&&(propertyValue=-1),colDefDimensions[propertyName]=propertyValue})),dimensions[colDef.field]=colDefDimensions}})),Object.keys(dimensions).length>0&&(columnsStateToExport.dimensions=dimensions),(0,esm_extends.Z)({},prevState,{columns:columnsStateToExport})}),[apiRef,props.columnVisibilityModel,props.initialState?.columns]),stateRestorePreProcessing=react.useCallback(((params,context)=>{const columnVisibilityModelToImport=context.stateToRestore.columns?.columnVisibilityModel,initialState=context.stateToRestore.columns;if(null==columnVisibilityModelToImport&&null==initialState)return params;const columnsState=createColumnsState({apiRef,columnsToUpsert:[],initialState,columnVisibilityModel:columnVisibilityModelToImport,keepOnlyColumnsToUpsert:!1});return apiRef.current.setState(mergeColumnsState(columnsState)),null!=initialState&&apiRef.current.publishEvent("columnsChange",columnsState.orderedFields),params}),[apiRef]),preferencePanelPreProcessing=react.useCallback(((initialValue,value)=>{if(value===GridPreferencePanelsValue.columns){const ColumnsPanel=props.slots.columnsPanel;return(0,jsx_runtime.jsx)(ColumnsPanel,(0,esm_extends.Z)({},props.slotProps?.columnsPanel))}return initialValue}),[props.slots.columnsPanel,props.slotProps?.columnsPanel]),addColumnMenuItems=react.useCallback((columnMenuItems=>props.disableColumnSelector?columnMenuItems:[...columnMenuItems,"columnMenuColumnsItem"]),[props.disableColumnSelector]);useGridRegisterPipeProcessor(apiRef,"columnMenu",addColumnMenuItems),useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing),useGridRegisterPipeProcessor(apiRef,"preferencePanel",preferencePanelPreProcessing);const prevInnerWidth=react.useRef(null);useGridApiEventHandler(apiRef,"viewportInnerSizeChange",(size=>{if(prevInnerWidth.current!==size.width){if(prevInnerWidth.current=size.width,!gridVisibleColumnDefinitionsSelector(apiRef).some((col=>col.flex&&col.flex>0)))return;setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state),apiRef.current.getRootDimensions()))}}));const hydrateColumns=react.useCallback((()=>{logger.info("Columns pipe processing have changed, regenerating the columns");const columnsState=createColumnsState({apiRef,columnsToUpsert:[],initialState:void 0,keepOnlyColumnsToUpsert:!1});setGridColumnsState(columnsState)}),[apiRef,logger,setGridColumnsState]);useGridRegisterPipeApplier(apiRef,"hydrateColumns",hydrateColumns);const isFirstRender=react.useRef(!0);react.useEffect((()=>{if(isFirstRender.current)return void(isFirstRender.current=!1);if(logger.info(`GridColumns have changed, new length ${props.columns.length}`),previousColumnsProp.current===props.columns)return;const columnsState=createColumnsState({apiRef,initialState:void 0,columnsToUpsert:props.columns,keepOnlyColumnsToUpsert:!0});previousColumnsProp.current=props.columns,setGridColumnsState(columnsState)}),[logger,apiRef,setGridColumnsState,props.columns]),react.useEffect((()=>{void 0!==props.columnVisibilityModel&&apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel)}),[apiRef,logger,props.columnVisibilityModel])}(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridRows"),lastUpdateMs=react.useRef(Date.now()),lastRowCount=react.useRef(props.rowCount),timeout=(0,useTimeout.Z)(),getRow=react.useCallback((id=>{const model=gridRowsLookupSelector(apiRef)[id];if(model)return model;const node=apiRef.current.getRowNode(id);return node&&isAutogeneratedRowNode(node)?{[GRID_ID_AUTOGENERATED]:id}:null}),[apiRef]),getRowId=react.useCallback((row=>gridRowIdSelector(apiRef.current.state,row)),[apiRef]),throttledRowsChange=react.useCallback((({cache,throttle})=>{const run=()=>{lastUpdateMs.current=Date.now(),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:getRowsStateFromCache({apiRef,rowCountProp:props.rowCount,loadingProp:props.loading,previousTree:gridRowTreeSelector(apiRef),previousTreeDepths:gridRowTreeDepthsSelector(apiRef),previousGroupsToFetch:gridRowGroupsToFetchSelector(apiRef)})}))),apiRef.current.publishEvent("rowsSet"),apiRef.current.forceUpdate()};if(timeout.clear(),apiRef.current.caches.rows=cache,!throttle)return void run();const throttleRemainingTimeMs=props.throttleRowsMs-(Date.now()-lastUpdateMs.current);throttleRemainingTimeMs>0?timeout.start(throttleRemainingTimeMs,run):run()}),[props.throttleRowsMs,props.rowCount,props.loading,apiRef,timeout]),setRows=react.useCallback((rows=>{logger.debug(`Updating all rows, new length ${rows.length}`);const cache=createRowsInternalCache({rows,getRowId:props.getRowId,loading:props.loading,rowCount:props.rowCount}),prevCache=apiRef.current.caches.rows;cache.rowsBeforePartialUpdates=prevCache.rowsBeforePartialUpdates,throttledRowsChange({cache,throttle:!0})}),[logger,props.getRowId,props.loading,props.rowCount,throttledRowsChange,apiRef]),updateRows=react.useCallback((updates=>{if(props.signature===GridSignature.DataGrid&&updates.length>1)throw new Error(["MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.","You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));const nonPinnedRowsUpdates=computeRowsUpdates(apiRef,updates,props.getRowId),cache=updateCacheWithNewRows({updates:nonPinnedRowsUpdates,getRowId:props.getRowId,previousCache:apiRef.current.caches.rows});throttledRowsChange({cache,throttle:!0})}),[props.signature,props.getRowId,throttledRowsChange,apiRef]),updateServerRows=react.useCallback(((updates,groupKeys)=>{const nonPinnedRowsUpdates=computeRowsUpdates(apiRef,updates,props.getRowId),cache=updateCacheWithNewRows({updates:nonPinnedRowsUpdates,getRowId:props.getRowId,previousCache:apiRef.current.caches.rows,groupKeys:groupKeys??[]});throttledRowsChange({cache,throttle:!1})}),[props.getRowId,throttledRowsChange,apiRef]),setLoading=react.useCallback((loading=>{loading!==props.loading&&(logger.debug(`Setting loading to ${loading}`),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{loading})}))),apiRef.current.caches.rows.loadingPropBeforePartialUpdates=loading)}),[props.loading,apiRef,logger]),getRowModels=react.useCallback((()=>{const dataRows=gridDataRowIdsSelector(apiRef),idRowsLookup=gridRowsLookupSelector(apiRef);return new Map(dataRows.map((id=>[id,idRowsLookup[id]??{}])))}),[apiRef]),getRowsCount=react.useCallback((()=>gridRowCountSelector(apiRef)),[apiRef]),getAllRowIds=react.useCallback((()=>gridDataRowIdsSelector(apiRef)),[apiRef]),getRowIndexRelativeToVisibleRows=react.useCallback((id=>{const row=apiRef.current.getRow(id),{rowToIndexMap}=getVisibleRows(apiRef);return rowToIndexMap.get(row)}),[apiRef]),setRowChildrenExpansion=react.useCallback(((id,isExpanded)=>{const currentNode=apiRef.current.getRowNode(id);if(!currentNode)throw new Error(`MUI X: No row with id #${id} found.`);if("group"!==currentNode.type)throw new Error("MUI X: Only group nodes can be expanded or collapsed.");const newNode=(0,esm_extends.Z)({},currentNode,{childrenExpanded:isExpanded});apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{tree:(0,esm_extends.Z)({},state.rows.tree,{[id]:newNode})})}))),apiRef.current.forceUpdate(),apiRef.current.publishEvent("rowExpansionChange",newNode)}),[apiRef]),getRowNode=react.useCallback((id=>gridRowTreeSelector(apiRef)[id]??null),[apiRef]),getRowGroupChildren=react.useCallback((({skipAutoGeneratedRows=!0,groupId,applySorting,applyFiltering})=>{const tree=gridRowTreeSelector(apiRef);let children;if(applySorting){const groupNode=tree[groupId];if(!groupNode)return[];const sortedRowIds=gridSortedRowIdsSelector(apiRef);children=[];for(let index=sortedRowIds.findIndex((id=>id===groupId))+1;index<sortedRowIds.length&&tree[sortedRowIds[index]].depth>groupNode.depth;index+=1){const id=sortedRowIds[index];skipAutoGeneratedRows&&isAutogeneratedRowNode(tree[id])||children.push(id)}}else children=getTreeNodeDescendants(tree,groupId,skipAutoGeneratedRows);if(applyFiltering){const filteredRowsLookup=gridFilteredRowsLookupSelector(apiRef);children=children.filter((childId=>!1!==filteredRowsLookup[childId]))}return children}),[apiRef]),setRowIndex=react.useCallback(((rowId,targetIndex)=>{const node=apiRef.current.getRowNode(rowId);if(!node)throw new Error(`MUI X: No row with id #${rowId} found.`);if(node.parent!==GRID_ROOT_GROUP_ID)throw new Error("MUI X: The row reordering do not support reordering of grouped rows yet.");if("leaf"!==node.type)throw new Error("MUI X: The row reordering do not support reordering of footer or grouping rows.");apiRef.current.setState((state=>{const group=gridRowTreeSelector(state,apiRef.current.instanceId)[GRID_ROOT_GROUP_ID],allRows=group.children,oldIndex=allRows.findIndex((row=>row===rowId));if(-1===oldIndex||oldIndex===targetIndex)return state;logger.debug(`Moving row ${rowId} to index ${targetIndex}`);const updatedRows=[...allRows];return updatedRows.splice(targetIndex,0,updatedRows.splice(oldIndex,1)[0]),(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{tree:(0,esm_extends.Z)({},state.rows.tree,{[GRID_ROOT_GROUP_ID]:(0,esm_extends.Z)({},group,{children:updatedRows})})})})})),apiRef.current.publishEvent("rowsSet")}),[apiRef,logger]),rowApi={getRow,setLoading,getRowId,getRowModels,getRowsCount,getAllRowIds,setRows,updateRows,getRowNode,getRowIndexRelativeToVisibleRows,unstable_replaceRows:react.useCallback(((firstRowToRender,newRows)=>{if(props.signature===GridSignature.DataGrid&&newRows.length>1)throw new Error(["MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.","You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));if(0===newRows.length)return;if(gridRowMaximumTreeDepthSelector(apiRef)>1)throw new Error("`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping");const tree=(0,esm_extends.Z)({},gridRowTreeSelector(apiRef)),dataRowIdToModelLookup=(0,esm_extends.Z)({},gridRowsLookupSelector(apiRef)),dataRowIdToIdLookup=(0,esm_extends.Z)({},gridRowsDataRowIdToIdLookupSelector(apiRef)),rootGroup=tree[GRID_ROOT_GROUP_ID],rootGroupChildren=[...rootGroup.children],seenIds=new Set;for(let i=0;i<newRows.length;i+=1){const rowModel=newRows[i],rowId=getRowIdFromRowModel(rowModel,props.getRowId,"A row was provided without id when calling replaceRows()."),[removedRowId]=rootGroupChildren.splice(firstRowToRender+i,1,rowId);seenIds.has(removedRowId)||(delete dataRowIdToModelLookup[removedRowId],delete dataRowIdToIdLookup[removedRowId],delete tree[removedRowId]);const rowTreeNodeConfig={id:rowId,depth:0,parent:GRID_ROOT_GROUP_ID,type:"leaf",groupingKey:null};dataRowIdToModelLookup[rowId]=rowModel,dataRowIdToIdLookup[rowId]=rowId,tree[rowId]=rowTreeNodeConfig,seenIds.add(rowId)}tree[GRID_ROOT_GROUP_ID]=(0,esm_extends.Z)({},rootGroup,{children:rootGroupChildren});const dataRowIds=rootGroupChildren.filter((childId=>"leaf"===tree[childId]?.type));apiRef.current.caches.rows.dataRowIdToModelLookup=dataRowIdToModelLookup,apiRef.current.caches.rows.dataRowIdToIdLookup=dataRowIdToIdLookup,apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{dataRowIdToModelLookup,dataRowIdToIdLookup,dataRowIds,tree})}))),apiRef.current.publishEvent("rowsSet")}),[apiRef,props.signature,props.getRowId])},rowProApi={setRowIndex,setRowChildrenExpansion,getRowGroupChildren},rowProPrivateApi={updateServerRows},groupRows=react.useCallback((()=>{let cache;logger.info("Row grouping pre-processing have changed, regenerating the row tree"),cache=apiRef.current.caches.rows.rowsBeforePartialUpdates===props.rows?(0,esm_extends.Z)({},apiRef.current.caches.rows,{updates:{type:"full",rows:gridDataRowIdsSelector(apiRef)}}):createRowsInternalCache({rows:props.rows,getRowId:props.getRowId,loading:props.loading,rowCount:props.rowCount}),throttledRowsChange({cache,throttle:!1})}),[logger,apiRef,props.rows,props.getRowId,props.loading,props.rowCount,throttledRowsChange]),previousDataSource=(0,useLazyRef.Z)((()=>props.unstable_dataSource)),handleStrategyProcessorChange=react.useCallback((methodName=>{props.unstable_dataSource&&props.unstable_dataSource!==previousDataSource.current?previousDataSource.current=props.unstable_dataSource:"rowTreeCreation"===methodName&&groupRows()}),[groupRows,previousDataSource,props.unstable_dataSource]),handleStrategyActivityChange=react.useCallback((()=>{apiRef.current.getActiveStrategy("rowTree")!==gridRowGroupingNameSelector(apiRef)&&groupRows()}),[apiRef,groupRows]);useGridApiEventHandler(apiRef,"activeStrategyProcessorChange",handleStrategyProcessorChange),useGridApiEventHandler(apiRef,"strategyAvailabilityChange",handleStrategyActivityChange);const applyHydrateRowsProcessor=react.useCallback((()=>{apiRef.current.setState((state=>{const response=apiRef.current.unstable_applyPipeProcessors("hydrateRows",{tree:gridRowTreeSelector(state,apiRef.current.instanceId),treeDepths:gridRowTreeDepthsSelector(state,apiRef.current.instanceId),dataRowIds:gridDataRowIdsSelector(state,apiRef.current.instanceId),dataRowIdToModelLookup:gridRowsLookupSelector(state,apiRef.current.instanceId),dataRowIdToIdLookup:gridRowsDataRowIdToIdLookupSelector(state,apiRef.current.instanceId)});return(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,response,{totalTopLevelRowCount:getTopLevelRowCount({tree:response.tree,rowCountProp:props.rowCount})})})})),apiRef.current.publishEvent("rowsSet"),apiRef.current.forceUpdate()}),[apiRef,props.rowCount]);useGridRegisterPipeApplier(apiRef,"hydrateRows",applyHydrateRowsProcessor),useGridApiMethod(apiRef,rowApi,"public"),useGridApiMethod(apiRef,rowProApi,props.signature===GridSignature.DataGrid?"private":"public"),useGridApiMethod(apiRef,rowProPrivateApi,"private");const isFirstRender=react.useRef(!0);react.useEffect((()=>{if(isFirstRender.current)return void(isFirstRender.current=!1);let isRowCountPropUpdated=!1;props.rowCount!==lastRowCount.current&&(isRowCountPropUpdated=!0,lastRowCount.current=props.rowCount);const areNewRowsAlreadyInState=apiRef.current.caches.rows.rowsBeforePartialUpdates===props.rows,isNewLoadingAlreadyInState=apiRef.current.caches.rows.loadingPropBeforePartialUpdates===props.loading,isNewRowCountAlreadyInState=apiRef.current.caches.rows.rowCountPropBeforePartialUpdates===props.rowCount;areNewRowsAlreadyInState&&(isNewLoadingAlreadyInState||(apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{loading:props.loading})}))),apiRef.current.caches.rows.loadingPropBeforePartialUpdates=props.loading,apiRef.current.forceUpdate()),isNewRowCountAlreadyInState||(apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{totalRowCount:Math.max(props.rowCount||0,state.rows.totalRowCount),totalTopLevelRowCount:Math.max(props.rowCount||0,state.rows.totalTopLevelRowCount)})}))),apiRef.current.caches.rows.rowCountPropBeforePartialUpdates=props.rowCount,apiRef.current.forceUpdate()),!isRowCountPropUpdated)||(logger.debug(`Updating all rows, new length ${props.rows?.length}`),throttledRowsChange({cache:createRowsInternalCache({rows:props.rows,getRowId:props.getRowId,loading:props.loading,rowCount:props.rowCount}),throttle:!1}))}),[props.rows,props.rowCount,props.getRowId,props.loading,logger,throttledRowsChange,apiRef])})(apiRef,props),((apiRef,props)=>{const processedRange=(0,useLazyRef.Z)((()=>apiRef.current.state.rowSpanning!==EMPTY_STATE?getInitialRangeToProcess(props,apiRef):EMPTY_RANGE)),updateRowSpanningState=react.useCallback(((renderContext,resetState=!1)=>{const{range,rows:visibleRows}=getVisibleRows(apiRef,{pagination:props.pagination,paginationMode:props.paginationMode});if(null===range||!isRowContextInitialized(renderContext))return;resetState&&(processedRange.current=EMPTY_RANGE);const rangeToProcess=function getUnprocessedRange(testRange,processedRange){return testRange.firstRowIndex>=processedRange.firstRowIndex&&testRange.lastRowIndex<=processedRange.lastRowIndex?null:testRange.firstRowIndex>=processedRange.firstRowIndex&&testRange.lastRowIndex>processedRange.lastRowIndex?{firstRowIndex:processedRange.lastRowIndex,lastRowIndex:testRange.lastRowIndex}:testRange.firstRowIndex<processedRange.firstRowIndex&&testRange.lastRowIndex<=processedRange.lastRowIndex?{firstRowIndex:testRange.firstRowIndex,lastRowIndex:processedRange.firstRowIndex-1}:testRange}({firstRowIndex:renderContext.firstRowIndex,lastRowIndex:Math.min(renderContext.lastRowIndex,range.lastRowIndex+1)},processedRange.current);if(null===rangeToProcess)return;const colDefs=gridVisibleColumnDefinitionsSelector(apiRef),{spannedCells,hiddenCells,hiddenCellOriginMap,processedRange:newProcessedRange}=computeRowSpanningState(apiRef,colDefs,visibleRows,range,rangeToProcess,resetState,processedRange.current);processedRange.current=newProcessedRange;const newSpannedCellsCount=Object.keys(spannedCells).length,newHiddenCellsCount=Object.keys(hiddenCells).length,currentSpannedCellsCount=Object.keys(apiRef.current.state.rowSpanning.spannedCells).length,currentHiddenCellsCount=Object.keys(apiRef.current.state.rowSpanning.hiddenCells).length;(resetState||newSpannedCellsCount!==currentSpannedCellsCount||newHiddenCellsCount!==currentHiddenCellsCount)&&(0!==newSpannedCellsCount||0!==currentSpannedCellsCount)&&apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rowSpanning:{spannedCells,hiddenCells,hiddenCellOriginMap}})))}),[apiRef,processedRange,props.pagination,props.paginationMode]),resetRowSpanningState=react.useCallback((()=>{const renderContext=gridRenderContextSelector(apiRef);isRowContextInitialized(renderContext)&&updateRowSpanningState(renderContext,!0)}),[apiRef,updateRowSpanningState]);useGridApiEventHandler(apiRef,"renderedRowsIntervalChange",runIf(props.unstable_rowSpanning,updateRowSpanningState)),useGridApiEventHandler(apiRef,"sortedRowsSet",runIf(props.unstable_rowSpanning,resetRowSpanningState)),useGridApiEventHandler(apiRef,"paginationModelChange",runIf(props.unstable_rowSpanning,resetRowSpanningState)),useGridApiEventHandler(apiRef,"filteredRowsSet",runIf(props.unstable_rowSpanning,resetRowSpanningState)),useGridApiEventHandler(apiRef,"columnsChange",runIf(props.unstable_rowSpanning,resetRowSpanningState)),react.useEffect((()=>{props.unstable_rowSpanning?apiRef.current.state.rowSpanning===EMPTY_STATE&&resetRowSpanningState():apiRef.current.state.rowSpanning!==EMPTY_STATE&&apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rowSpanning:EMPTY_STATE})))}),[apiRef,resetRowSpanningState,props.unstable_rowSpanning])})(apiRef,props),useGridParamsApi(apiRef,props),(apiRef=>{const lookup=react.useRef({}),resetColSpan=()=>{lookup.current={}},columnSpanningPrivateApi={resetColSpan,calculateColSpan:react.useCallback((({rowId,minFirstColumn,maxLastColumn,columns})=>{for(let i=minFirstColumn;i<maxLastColumn;i+=1){const cellProps=calculateCellColSpan({apiRef,lookup:lookup.current,columnIndex:i,rowId,minFirstColumnIndex:minFirstColumn,maxLastColumnIndex:maxLastColumn,columns});cellProps.colSpan>1&&(i+=cellProps.colSpan-1)}}),[apiRef])};useGridApiMethod(apiRef,{unstable_getCellColSpanInfo:(rowId,columnIndex)=>lookup.current[rowId]?.[columnIndex]},"public"),useGridApiMethod(apiRef,columnSpanningPrivateApi,"private"),useGridApiEventHandler(apiRef,"columnOrderChange",resetColSpan)})(apiRef),((apiRef,props)=>{const getColumnGroupPath=react.useCallback((field=>gridColumnGroupsUnwrappedModelSelector(apiRef)[field]??[]),[apiRef]),getAllGroupDetails=react.useCallback((()=>gridColumnGroupsLookupSelector(apiRef)),[apiRef]);useGridApiMethod(apiRef,{getColumnGroupPath,getAllGroupDetails},"public");const handleColumnIndexChange=react.useCallback((()=>{const unwrappedGroupingModel=unwrapGroupingColumnModel(props.columnGroupingModel??[]);apiRef.current.setState((state=>{const orderedFields=state.columns?.orderedFields??[],pinnedColumns=state.pinnedColumns??{},columnGroupsHeaderStructure=getColumnGroupsHeaderStructure(orderedFields,unwrappedGroupingModel,pinnedColumns);return(0,esm_extends.Z)({},state,{columnGrouping:(0,esm_extends.Z)({},state.columnGrouping,{headerStructure:columnGroupsHeaderStructure})})}))}),[apiRef,props.columnGroupingModel]),updateColumnGroupingState=react.useCallback((columnGroupingModel=>{const pinnedColumns=apiRef.current.getPinnedColumns?.()??{},columnFields=gridColumnFieldsSelector(apiRef),visibleColumnFields=gridVisibleColumnFieldsSelector(apiRef),groupLookup=createGroupLookup(columnGroupingModel??[]),unwrappedGroupingModel=unwrapGroupingColumnModel(columnGroupingModel??[]),columnGroupsHeaderStructure=getColumnGroupsHeaderStructure(columnFields,unwrappedGroupingModel,pinnedColumns),maxDepth=0===visibleColumnFields.length?0:Math.max(...visibleColumnFields.map((field=>unwrappedGroupingModel[field]?.length??0)));apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{columnGrouping:{lookup:groupLookup,unwrappedGroupingModel,headerStructure:columnGroupsHeaderStructure,maxDepth}})))}),[apiRef]);useGridApiEventHandler(apiRef,"columnIndexChange",handleColumnIndexChange),useGridApiEventHandler(apiRef,"columnsChange",(()=>{updateColumnGroupingState(props.columnGroupingModel)})),useGridApiEventHandler(apiRef,"columnVisibilityModelChange",(()=>{updateColumnGroupingState(props.columnGroupingModel)})),react.useEffect((()=>{updateColumnGroupingState(props.columnGroupingModel)}),[updateColumnGroupingState,props.columnGroupingModel])})(apiRef,props),useGridEditing(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridFocus"),lastClickedCell=react.useRef(null),hasRootReference=null!==apiRef.current.rootElementRef.current,publishCellFocusOut=react.useCallback(((cell,event)=>{cell&&apiRef.current.getRow(cell.id)&&apiRef.current.publishEvent("cellFocusOut",apiRef.current.getCellParams(cell.id,cell.field),event)}),[apiRef]),setCellFocus=react.useCallback(((id,field)=>{const focusedCell=gridFocusCellSelector(apiRef);focusedCell?.id===id&&focusedCell?.field===field||(apiRef.current.setState((state=>(logger.debug(`Focusing on cell with id=${id} and field=${field}`),(0,esm_extends.Z)({},state,{tabIndex:{cell:{id,field},columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null},focus:{cell:{id,field},columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null}})))),apiRef.current.forceUpdate(),apiRef.current.getRow(id)&&(focusedCell&&publishCellFocusOut(focusedCell,{}),apiRef.current.publishEvent("cellFocusIn",apiRef.current.getCellParams(id,field))))}),[apiRef,logger,publishCellFocusOut]),setColumnHeaderFocus=react.useCallback(((field,event={})=>{const cell=gridFocusCellSelector(apiRef);publishCellFocusOut(cell,event),apiRef.current.setState((state=>(logger.debug(`Focusing on column header with colIndex=${field}`),(0,esm_extends.Z)({},state,{tabIndex:{columnHeader:{field},columnHeaderFilter:null,cell:null,columnGroupHeader:null},focus:{columnHeader:{field},columnHeaderFilter:null,cell:null,columnGroupHeader:null}})))),apiRef.current.forceUpdate()}),[apiRef,logger,publishCellFocusOut]),setColumnHeaderFilterFocus=react.useCallback(((field,event={})=>{const cell=gridFocusCellSelector(apiRef);publishCellFocusOut(cell,event),apiRef.current.setState((state=>(logger.debug(`Focusing on column header filter with colIndex=${field}`),(0,esm_extends.Z)({},state,{tabIndex:{columnHeader:null,columnHeaderFilter:{field},cell:null,columnGroupHeader:null},focus:{columnHeader:null,columnHeaderFilter:{field},cell:null,columnGroupHeader:null}})))),apiRef.current.forceUpdate()}),[apiRef,logger,publishCellFocusOut]),setColumnGroupHeaderFocus=react.useCallback(((field,depth,event={})=>{const cell=gridFocusCellSelector(apiRef);cell&&apiRef.current.publishEvent("cellFocusOut",apiRef.current.getCellParams(cell.id,cell.field),event),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{tabIndex:{columnGroupHeader:{field,depth},columnHeader:null,columnHeaderFilter:null,cell:null},focus:{columnGroupHeader:{field,depth},columnHeader:null,columnHeaderFilter:null,cell:null}}))),apiRef.current.forceUpdate()}),[apiRef]),getColumnGroupHeaderFocus=react.useCallback((()=>gridFocusColumnGroupHeaderSelector(apiRef)),[apiRef]),moveFocusToRelativeCell=react.useCallback(((id,field,direction)=>{let columnIndexToFocus=apiRef.current.getColumnIndex(field);const visibleColumns=gridVisibleColumnDefinitionsSelector(apiRef),currentPage=getVisibleRows(apiRef,{pagination:props.pagination,paginationMode:props.paginationMode}),pinnedRows=gridPinnedRowsSelector(apiRef),currentPageRows=[].concat(pinnedRows.top||[],currentPage.rows,pinnedRows.bottom||[]);let rowIndexToFocus=currentPageRows.findIndex((row=>row.id===id));"right"===direction?columnIndexToFocus+=1:"left"===direction?columnIndexToFocus-=1:rowIndexToFocus+=1,columnIndexToFocus>=visibleColumns.length?(rowIndexToFocus+=1,rowIndexToFocus<currentPageRows.length&&(columnIndexToFocus=0)):columnIndexToFocus<0&&(rowIndexToFocus-=1,rowIndexToFocus>=0&&(columnIndexToFocus=visibleColumns.length-1)),rowIndexToFocus=clamp(rowIndexToFocus,0,currentPageRows.length-1);const rowToFocus=currentPageRows[rowIndexToFocus];if(!rowToFocus)return;const colSpanInfo=apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id,columnIndexToFocus);colSpanInfo&&colSpanInfo.spannedByColSpan&&("left"===direction||"below"===direction?columnIndexToFocus=colSpanInfo.leftVisibleCellIndex:"right"===direction&&(columnIndexToFocus=colSpanInfo.rightVisibleCellIndex)),columnIndexToFocus=clamp(columnIndexToFocus,0,visibleColumns.length-1);const columnToFocus=visibleColumns[columnIndexToFocus];apiRef.current.setCellFocus(rowToFocus.id,columnToFocus.field)}),[apiRef,props.pagination,props.paginationMode]),handleCellDoubleClick=react.useCallback((({id,field})=>{apiRef.current.setCellFocus(id,field)}),[apiRef]),handleCellKeyDown=react.useCallback(((params,event)=>{"Enter"===event.key||"Tab"===event.key||"Shift"===event.key||isNavigationKey(event.key)||apiRef.current.setCellFocus(params.id,params.field)}),[apiRef]),handleColumnHeaderFocus=react.useCallback((({field},event)=>{event.target===event.currentTarget&&apiRef.current.setColumnHeaderFocus(field,event)}),[apiRef]),handleColumnGroupHeaderFocus=react.useCallback((({fields,depth},event)=>{if(event.target!==event.currentTarget)return;const focusedColumnGroup=gridFocusColumnGroupHeaderSelector(apiRef);null!==focusedColumnGroup&&focusedColumnGroup.depth===depth&&fields.includes(focusedColumnGroup.field)||apiRef.current.setColumnGroupHeaderFocus(fields[0],depth,event)}),[apiRef]),handleBlur=react.useCallback(((_,event)=>{event.relatedTarget?.getAttribute("class")?.includes(gridClasses.columnHeader)||(logger.debug("Clearing focus"),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{focus:{cell:null,columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null}}))))}),[logger,apiRef]),handleCellMouseDown=react.useCallback((params=>{lastClickedCell.current=params}),[]),handleDocumentClick=react.useCallback((event=>{const cellParams=lastClickedCell.current;lastClickedCell.current=null;const focusedCell=gridFocusCellSelector(apiRef);if(!apiRef.current.unstable_applyPipeProcessors("canUpdateFocus",!0,{event,cell:cellParams}))return;if(!focusedCell)return void(cellParams&&apiRef.current.setCellFocus(cellParams.id,cellParams.field));if(cellParams?.id===focusedCell.id&&cellParams?.field===focusedCell.field)return;const cellElement=apiRef.current.getCellElement(focusedCell.id,focusedCell.field);cellElement?.contains(event.target)||(cellParams?apiRef.current.setCellFocus(cellParams.id,cellParams.field):(apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{focus:{cell:null,columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null}}))),apiRef.current.forceUpdate(),publishCellFocusOut(focusedCell,event)))}),[apiRef,publishCellFocusOut]),handleCellModeChange=react.useCallback((params=>{if("view"===params.cellMode)return;const cell=gridFocusCellSelector(apiRef);cell?.id===params.id&&cell?.field===params.field||apiRef.current.setCellFocus(params.id,params.field)}),[apiRef]),handleRowSet=react.useCallback((()=>{const cell=gridFocusCellSelector(apiRef);if(cell&&!apiRef.current.getRow(cell.id)){const lastFocusedRowId=cell.id;let nextRowId=null;if(void 0!==lastFocusedRowId){const rowEl=apiRef.current.getRowElement(lastFocusedRowId),lastFocusedRowIndex=rowEl?.dataset.rowindex?Number(rowEl?.dataset.rowindex):0,currentPage=getVisibleRows(apiRef,{pagination:props.pagination,paginationMode:props.paginationMode}),nextRow=currentPage.rows[clamp(lastFocusedRowIndex,0,currentPage.rows.length-1)];nextRowId=nextRow?.id??null}apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{focus:{cell:null===nextRowId?null:{id:nextRowId,field:cell.field},columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null}})))}}),[apiRef,props.pagination,props.paginationMode]),handlePaginationModelChange=(0,useEventCallback.Z)((()=>{const currentFocusedCell=gridFocusCellSelector(apiRef);if(!currentFocusedCell)return;const currentPage=getVisibleRows(apiRef,{pagination:props.pagination,paginationMode:props.paginationMode});if(currentPage.rows.find((row=>row.id===currentFocusedCell.id)))return;const visibleColumns=gridVisibleColumnDefinitionsSelector(apiRef);apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{tabIndex:{cell:{id:currentPage.rows[0].id,field:visibleColumns[0].field},columnGroupHeader:null,columnHeader:null,columnHeaderFilter:null}})))})),focusPrivateApi={moveFocusToRelativeCell,setColumnGroupHeaderFocus,getColumnGroupHeaderFocus};useGridApiMethod(apiRef,{setCellFocus,setColumnHeaderFocus,setColumnHeaderFilterFocus},"public"),useGridApiMethod(apiRef,focusPrivateApi,"private"),react.useEffect((()=>{const doc=(0,ownerDocument.Z)(apiRef.current.rootElementRef.current);return doc.addEventListener("mouseup",handleDocumentClick),()=>{doc.removeEventListener("mouseup",handleDocumentClick)}}),[apiRef,hasRootReference,handleDocumentClick]),useGridApiEventHandler(apiRef,"columnHeaderBlur",handleBlur),useGridApiEventHandler(apiRef,"cellDoubleClick",handleCellDoubleClick),useGridApiEventHandler(apiRef,"cellMouseDown",handleCellMouseDown),useGridApiEventHandler(apiRef,"cellKeyDown",handleCellKeyDown),useGridApiEventHandler(apiRef,"cellModeChange",handleCellModeChange),useGridApiEventHandler(apiRef,"columnHeaderFocus",handleColumnHeaderFocus),useGridApiEventHandler(apiRef,"columnGroupHeaderFocus",handleColumnGroupHeaderFocus),useGridApiEventHandler(apiRef,"rowsSet",handleRowSet),useGridApiEventHandler(apiRef,"paginationModelChange",handlePaginationModelChange)})(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridPreferencesPanel"),hidePreferences=react.useCallback((()=>{apiRef.current.setState((state=>{if(!state.preferencePanel.open)return state;logger.debug("Hiding Preferences Panel");const preferencePanelState=gridPreferencePanelStateSelector(state);return apiRef.current.publishEvent("preferencePanelClose",{openedPanelValue:preferencePanelState.openedPanelValue}),(0,esm_extends.Z)({},state,{preferencePanel:{open:!1}})}))}),[apiRef,logger]),showPreferences=react.useCallback(((newValue,panelId,labelId)=>{logger.debug("Opening Preferences Panel"),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{preferencePanel:(0,esm_extends.Z)({},state.preferencePanel,{open:!0,openedPanelValue:newValue,panelId,labelId})}))),apiRef.current.publishEvent("preferencePanelOpen",{openedPanelValue:newValue})}),[logger,apiRef]);useGridApiMethod(apiRef,{showPreferences,hidePreferences},"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{const preferencePanelToExport=gridPreferencePanelStateSelector(apiRef.current.state);return!context.exportOnlyDirtyModels||null!=props.initialState?.preferencePanel||preferencePanelToExport.open?(0,esm_extends.Z)({},prevState,{preferencePanel:preferencePanelToExport}):prevState}),[apiRef,props.initialState?.preferencePanel]),stateRestorePreProcessing=react.useCallback(((params,context)=>{const preferencePanel=context.stateToRestore.preferencePanel;return null!=preferencePanel&&apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{preferencePanel}))),params}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing)})(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridFilter");apiRef.current.registerControlState({stateId:"filter",propModel:props.filterModel,propOnChange:props.onFilterModelChange,stateSelector:gridFilterModelSelector,changeEvent:"filterModelChange"});const updateFilteredRows=react.useCallback((()=>{apiRef.current.setState((state=>{const filterModel=gridFilterModelSelector(state,apiRef.current.instanceId),filterState=apiRef.current.getFilterState(filterModel),newState=(0,esm_extends.Z)({},state,{filter:(0,esm_extends.Z)({},state.filter,filterState)}),visibleRowsLookupState=getVisibleRowsLookupState(apiRef,newState);return(0,esm_extends.Z)({},newState,{visibleRowsLookup:visibleRowsLookupState})})),apiRef.current.publishEvent("filteredRowsSet")}),[apiRef]),addColumnMenuItem=react.useCallback(((columnMenuItems,colDef)=>null==colDef||!1===colDef.filterable||props.disableColumnFilter?columnMenuItems:[...columnMenuItems,"columnMenuFilterItem"]),[props.disableColumnFilter]),applyFilters=react.useCallback((()=>{updateFilteredRows(),apiRef.current.forceUpdate()}),[apiRef,updateFilteredRows]),upsertFilterItem=react.useCallback((item=>{const filterModel=gridFilterModelSelector(apiRef),items=[...filterModel.items],itemIndex=items.findIndex((filterItem=>filterItem.id===item.id));-1===itemIndex?items.push(item):items[itemIndex]=item,apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items}),"upsertFilterItem")}),[apiRef]),upsertFilterItems=react.useCallback((items=>{const filterModel=gridFilterModelSelector(apiRef),existingItems=[...filterModel.items];items.forEach((item=>{const itemIndex=existingItems.findIndex((filterItem=>filterItem.id===item.id));-1===itemIndex?existingItems.push(item):existingItems[itemIndex]=item})),apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items:existingItems}),"upsertFilterItems")}),[apiRef]),deleteFilterItem=react.useCallback((itemToDelete=>{const filterModel=gridFilterModelSelector(apiRef),items=filterModel.items.filter((item=>item.id!==itemToDelete.id));items.length!==filterModel.items.length&&apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items}),"deleteFilterItem")}),[apiRef]),showFilterPanel=react.useCallback(((targetColumnField,panelId,labelId)=>{if(logger.debug("Displaying filter panel"),targetColumnField){const filterModel=gridFilterModelSelector(apiRef),filterItemsWithValue=filterModel.items.filter((item=>{if(void 0!==item.value)return!Array.isArray(item.value)||0!==item.value.length;const column=apiRef.current.getColumn(item.field),filterOperator=column.filterOperators?.find((operator=>operator.value===item.operator));return!(void 0===filterOperator?.requiresFilterValue||filterOperator?.requiresFilterValue)}));let newFilterItems;const filterItemOnTarget=filterItemsWithValue.find((item=>item.field===targetColumnField)),targetColumn=apiRef.current.getColumn(targetColumnField);newFilterItems=filterItemOnTarget?filterItemsWithValue:props.disableMultipleColumnsFiltering?[cleanFilterItem({field:targetColumnField,operator:targetColumn.filterOperators[0].value},apiRef)]:[...filterItemsWithValue,cleanFilterItem({field:targetColumnField,operator:targetColumn.filterOperators[0].value},apiRef)],apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items:newFilterItems}))}apiRef.current.showPreferences(GridPreferencePanelsValue.filters,panelId,labelId)}),[apiRef,logger,props.disableMultipleColumnsFiltering]),hideFilterPanel=react.useCallback((()=>{logger.debug("Hiding filter panel"),apiRef.current.hidePreferences()}),[apiRef,logger]),setFilterLogicOperator=react.useCallback((logicOperator=>{const filterModel=gridFilterModelSelector(apiRef);filterModel.logicOperator!==logicOperator&&apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{logicOperator}),"changeLogicOperator")}),[apiRef]),setQuickFilterValues=react.useCallback((values=>{const filterModel=gridFilterModelSelector(apiRef);isDeepEqual(filterModel.quickFilterValues,values)||apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{quickFilterValues:[...values]}))}),[apiRef]),setFilterModel=react.useCallback(((model,reason)=>{gridFilterModelSelector(apiRef)!==model&&(logger.debug("Setting filter model"),apiRef.current.updateControlState("filter",mergeStateWithFilterModel(model,props.disableMultipleColumnsFiltering,apiRef),reason),apiRef.current.unstable_applyFilters())}),[apiRef,logger,props.disableMultipleColumnsFiltering]),getFilterState=react.useCallback((inputFilterModel=>{const filterModel=sanitizeFilterModel(inputFilterModel,props.disableMultipleColumnsFiltering,apiRef),isRowMatchingFilters="client"===props.filterMode?buildAggregatedFilterApplier(filterModel,apiRef,props.disableEval):null,filterResult=apiRef.current.applyStrategyProcessor("filtering",{isRowMatchingFilters,filterModel:filterModel??getDefaultGridFilterModel()});return(0,esm_extends.Z)({},filterResult,{filterModel})}),[props.disableMultipleColumnsFiltering,props.filterMode,props.disableEval,apiRef]),filterApi={setFilterLogicOperator,unstable_applyFilters:applyFilters,deleteFilterItem,upsertFilterItem,upsertFilterItems,setFilterModel,showFilterPanel,hideFilterPanel,setQuickFilterValues,ignoreDiacritics:props.ignoreDiacritics,getFilterState};useGridApiMethod(apiRef,filterApi,"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{const filterModelToExport=gridFilterModelSelector(apiRef);return context.exportOnlyDirtyModels&&null==props.filterModel&&null==props.initialState?.filter?.filterModel&&isDeepEqual(filterModelToExport,getDefaultGridFilterModel())?prevState:(0,esm_extends.Z)({},prevState,{filter:{filterModel:filterModelToExport}})}),[apiRef,props.filterModel,props.initialState?.filter?.filterModel]),stateRestorePreProcessing=react.useCallback(((params,context)=>{const filterModel=context.stateToRestore.filter?.filterModel;return null==filterModel?params:(apiRef.current.updateControlState("filter",mergeStateWithFilterModel(filterModel,props.disableMultipleColumnsFiltering,apiRef),"restoreState"),(0,esm_extends.Z)({},params,{callbacks:[...params.callbacks,apiRef.current.unstable_applyFilters]}))}),[apiRef,props.disableMultipleColumnsFiltering]),preferencePanelPreProcessing=react.useCallback(((initialValue,value)=>{if(value===GridPreferencePanelsValue.filters){const FilterPanel=props.slots.filterPanel;return(0,jsx_runtime.jsx)(FilterPanel,(0,esm_extends.Z)({},props.slotProps?.filterPanel))}return initialValue}),[props.slots.filterPanel,props.slotProps?.filterPanel]),{getRowId}=props,getRowsRef=(0,useLazyRef.Z)(createMemoizedValues),flatFilteringMethod=react.useCallback((params=>{if("client"!==props.filterMode||!params.isRowMatchingFilters||!params.filterModel.items.length&&!params.filterModel.quickFilterValues?.length)return defaultGridFilterLookup;const dataRowIdToModelLookup=gridRowsLookupSelector(apiRef),filteredRowsLookup={},{isRowMatchingFilters}=params,filterCache={},result={passingFilterItems:null,passingQuickFilterValues:null},rows=getRowsRef.current(apiRef.current.state.rows.dataRowIdToModelLookup);for(let i=0;i<rows.length;i+=1){const row=rows[i],id=getRowId?getRowId(row):row.id;isRowMatchingFilters(row,void 0,result);const isRowPassing=passFilterLogic([result.passingFilterItems],[result.passingQuickFilterValues],params.filterModel,apiRef,filterCache);filteredRowsLookup[id]=isRowPassing}const footerId="auto-generated-group-footer-root";return dataRowIdToModelLookup[footerId]&&(filteredRowsLookup[footerId]=!0),{filteredRowsLookup,filteredChildrenCountLookup:{},filteredDescendantCountLookup:{}}}),[apiRef,props.filterMode,getRowId,getRowsRef]);useGridRegisterPipeProcessor(apiRef,"columnMenu",addColumnMenuItem),useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing),useGridRegisterPipeProcessor(apiRef,"preferencePanel",preferencePanelPreProcessing),useGridRegisterStrategyProcessor(apiRef,"none","filtering",flatFilteringMethod),useGridRegisterStrategyProcessor(apiRef,"none","visibleRowsLookupCreation",getVisibleRowsLookup);const handleColumnsChange=react.useCallback((()=>{logger.debug("onColUpdated - GridColumns changed, applying filters");const filterModel=gridFilterModelSelector(apiRef),columnsLookup=gridColumnLookupSelector(apiRef),newFilterItems=filterModel.items.filter((item=>item.field&&columnsLookup[item.field]));newFilterItems.length<filterModel.items.length&&apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items:newFilterItems}))}),[apiRef,logger]),handleStrategyProcessorChange=react.useCallback((methodName=>{"filtering"===methodName&&apiRef.current.unstable_applyFilters()}),[apiRef]),updateVisibleRowsLookupState=react.useCallback((()=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{visibleRowsLookup:getVisibleRowsLookupState(apiRef,state)}))),apiRef.current.forceUpdate()}),[apiRef]);useGridApiEventHandler(apiRef,"rowsSet",updateFilteredRows),useGridApiEventHandler(apiRef,"columnsChange",handleColumnsChange),useGridApiEventHandler(apiRef,"activeStrategyProcessorChange",handleStrategyProcessorChange),useGridApiEventHandler(apiRef,"rowExpansionChange",updateVisibleRowsLookupState),useGridApiEventHandler(apiRef,"columnVisibilityModelChange",(()=>{const filterModel=gridFilterModelSelector(apiRef);filterModel.quickFilterValues&&shouldQuickFilterExcludeHiddenColumns(filterModel)&&apiRef.current.unstable_applyFilters()})),useFirstRender((()=>{apiRef.current.unstable_applyFilters()})),(0,useEnhancedEffect.Z)((()=>{void 0!==props.filterModel&&apiRef.current.setFilterModel(props.filterModel)}),[apiRef,logger,props.filterModel])})(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridSorting");apiRef.current.registerControlState({stateId:"sortModel",propModel:props.sortModel,propOnChange:props.onSortModelChange,stateSelector:gridSortModelSelector,changeEvent:"sortModelChange"});const upsertSortModel=react.useCallback(((field,sortItem)=>{const sortModel=gridSortModelSelector(apiRef),existingIdx=sortModel.findIndex((c=>c.field===field));let newSortModel=[...sortModel];return existingIdx>-1?null==sortItem?.sort?newSortModel.splice(existingIdx,1):newSortModel.splice(existingIdx,1,sortItem):newSortModel=[...sortModel,sortItem],newSortModel}),[apiRef]),createSortItem=react.useCallback(((col,directionOverride)=>{const existing=gridSortModelSelector(apiRef).find((c=>c.field===col.field));if(existing){const nextSort=void 0===directionOverride?getNextGridSortDirection(col.sortingOrder??props.sortingOrder,existing.sort):directionOverride;return void 0===nextSort?void 0:(0,esm_extends.Z)({},existing,{sort:nextSort})}return{field:col.field,sort:void 0===directionOverride?getNextGridSortDirection(col.sortingOrder??props.sortingOrder):directionOverride}}),[apiRef,props.sortingOrder]),addColumnMenuItem=react.useCallback(((columnMenuItems,colDef)=>null==colDef||!1===colDef.sortable||props.disableColumnSorting?columnMenuItems:(colDef.sortingOrder||props.sortingOrder).some((item=>!!item))?[...columnMenuItems,"columnMenuSortItem"]:columnMenuItems),[props.sortingOrder,props.disableColumnSorting]),applySorting=react.useCallback((()=>{apiRef.current.setState((state=>{if("server"===props.sortingMode)return logger.debug("Skipping sorting rows as sortingMode = server"),(0,esm_extends.Z)({},state,{sorting:(0,esm_extends.Z)({},state.sorting,{sortedRows:getTreeNodeDescendants(gridRowTreeSelector(apiRef),GRID_ROOT_GROUP_ID,!1)})});const sortModel=gridSortModelSelector(state,apiRef.current.instanceId),sortRowList=buildAggregatedSortingApplier(sortModel,apiRef),sortedRows=apiRef.current.applyStrategyProcessor("sorting",{sortRowList});return(0,esm_extends.Z)({},state,{sorting:(0,esm_extends.Z)({},state.sorting,{sortedRows})})})),apiRef.current.publishEvent("sortedRowsSet"),apiRef.current.forceUpdate()}),[apiRef,logger,props.sortingMode]),setSortModel=react.useCallback((model=>{gridSortModelSelector(apiRef)!==model&&(logger.debug("Setting sort model"),apiRef.current.setState(mergeStateWithSortModel(model,props.disableMultipleColumnsSorting)),apiRef.current.forceUpdate(),apiRef.current.applySorting())}),[apiRef,logger,props.disableMultipleColumnsSorting]),sortColumn=react.useCallback(((field,direction,allowMultipleSorting)=>{const column=apiRef.current.getColumn(field),sortItem=createSortItem(column,direction);let sortModel;sortModel=!allowMultipleSorting||props.disableMultipleColumnsSorting?null==sortItem?.sort?[]:[sortItem]:upsertSortModel(column.field,sortItem),apiRef.current.setSortModel(sortModel)}),[apiRef,upsertSortModel,createSortItem,props.disableMultipleColumnsSorting]),getSortModel=react.useCallback((()=>gridSortModelSelector(apiRef)),[apiRef]),getSortedRows=react.useCallback((()=>gridSortedRowEntriesSelector(apiRef).map((row=>row.model))),[apiRef]),getSortedRowIds=react.useCallback((()=>gridSortedRowIdsSelector(apiRef)),[apiRef]),getRowIdFromRowIndex=react.useCallback((index=>apiRef.current.getSortedRowIds()[index]),[apiRef]);useGridApiMethod(apiRef,{getSortModel,getSortedRows,getSortedRowIds,getRowIdFromRowIndex,setSortModel,sortColumn,applySorting},"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{const sortModelToExport=gridSortModelSelector(apiRef);return!context.exportOnlyDirtyModels||null!=props.sortModel||null!=props.initialState?.sorting?.sortModel||sortModelToExport.length>0?(0,esm_extends.Z)({},prevState,{sorting:{sortModel:sortModelToExport}}):prevState}),[apiRef,props.sortModel,props.initialState?.sorting?.sortModel]),stateRestorePreProcessing=react.useCallback(((params,context)=>{const sortModel=context.stateToRestore.sorting?.sortModel;return null==sortModel?params:(apiRef.current.setState(mergeStateWithSortModel(sortModel,props.disableMultipleColumnsSorting)),(0,esm_extends.Z)({},params,{callbacks:[...params.callbacks,apiRef.current.applySorting]}))}),[apiRef,props.disableMultipleColumnsSorting]),flatSortingMethod=react.useCallback((params=>{const rowTree=gridRowTreeSelector(apiRef),rootGroupNode=rowTree[GRID_ROOT_GROUP_ID],sortedChildren=params.sortRowList?params.sortRowList(rootGroupNode.children.map((childId=>rowTree[childId]))):[...rootGroupNode.children];return null!=rootGroupNode.footerId&&sortedChildren.push(rootGroupNode.footerId),sortedChildren}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing),useGridRegisterStrategyProcessor(apiRef,"none","sorting",flatSortingMethod);const handleColumnHeaderClick=react.useCallback((({field,colDef},event)=>{if(!colDef.sortable||props.disableColumnSorting)return;const allowMultipleSorting=event.shiftKey||event.metaKey||event.ctrlKey;sortColumn(field,void 0,allowMultipleSorting)}),[sortColumn,props.disableColumnSorting]),handleColumnHeaderKeyDown=react.useCallback((({field,colDef},event)=>{colDef.sortable&&!props.disableColumnSorting&&("Enter"!==event.key||event.ctrlKey||event.metaKey||sortColumn(field,void 0,event.shiftKey))}),[sortColumn,props.disableColumnSorting]),handleColumnsChange=react.useCallback((()=>{const sortModel=gridSortModelSelector(apiRef),latestColumns=gridColumnLookupSelector(apiRef);if(sortModel.length>0){const newModel=sortModel.filter((sortItem=>latestColumns[sortItem.field]));newModel.length<sortModel.length&&apiRef.current.setSortModel(newModel)}}),[apiRef]),handleStrategyProcessorChange=react.useCallback((methodName=>{"sorting"===methodName&&apiRef.current.applySorting()}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"columnMenu",addColumnMenuItem),useGridApiEventHandler(apiRef,"columnHeaderClick",handleColumnHeaderClick),useGridApiEventHandler(apiRef,"columnHeaderKeyDown",handleColumnHeaderKeyDown),useGridApiEventHandler(apiRef,"rowsSet",apiRef.current.applySorting),useGridApiEventHandler(apiRef,"columnsChange",handleColumnsChange),useGridApiEventHandler(apiRef,"activeStrategyProcessorChange",handleStrategyProcessorChange),useFirstRender((()=>{apiRef.current.applySorting()})),(0,useEnhancedEffect.Z)((()=>{void 0!==props.sortModel&&apiRef.current.setSortModel(props.sortModel)}),[apiRef,props.sortModel])})(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useDensity");apiRef.current.registerControlState({stateId:"density",propModel:props.density,propOnChange:props.onDensityChange,stateSelector:gridDensitySelector,changeEvent:"densityChange"});const setDensity=(0,useEventCallback.Z)((newDensity=>{gridDensitySelector(apiRef.current.state)!==newDensity&&(logger.debug(`Set grid density to ${newDensity}`),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{density:newDensity}))))}));useGridApiMethod(apiRef,{setDensity},"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{const exportedDensity=gridDensitySelector(apiRef.current.state);return context.exportOnlyDirtyModels&&null==props.density&&null==props.initialState?.density?prevState:(0,esm_extends.Z)({},prevState,{density:exportedDensity})}),[apiRef,props.density,props.initialState?.density]),stateRestorePreProcessing=react.useCallback(((params,context)=>{const restoredDensity=context.stateToRestore?.density?context.stateToRestore.density:gridDensitySelector(apiRef.current.state);return apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{density:restoredDensity}))),params}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing),react.useEffect((()=>{props.density&&apiRef.current.setDensity(props.density)}),[apiRef,props.density])})(apiRef,props),useGridColumnResize(apiRef,props),useGridPagination(apiRef,props),((apiRef,props)=>{const{getRowHeight:getRowHeightProp,getRowSpacing,getEstimatedRowHeight}=props,heightCache=apiRef.current.caches.rowsMeta.heights,lastMeasuredRowIndex=react.useRef(-1),hasRowWithAutoHeight=react.useRef(!1),isHeightMetaValid=react.useRef(!1),densityFactor=useGridSelector(apiRef,gridDensityFactorSelector),currentPage=useGridVisibleRows(apiRef),pinnedRows=useGridSelector(apiRef,gridPinnedRowsSelector),rowHeight=useGridSelector(apiRef,gridRowHeightSelector),processHeightEntry=react.useCallback((row=>{const baseRowHeight=gridDimensionsSelector(apiRef.current.state).rowHeight,entry=apiRef.current.getRowHeightEntry(row.id);if(getRowHeightProp){const rowHeightFromUser=getRowHeightProp((0,esm_extends.Z)({},row,{densityFactor}));if("auto"===rowHeightFromUser){if(entry.needsFirstMeasurement){const estimatedRowHeight=getEstimatedRowHeight?getEstimatedRowHeight((0,esm_extends.Z)({},row,{densityFactor})):baseRowHeight;entry.content=estimatedRowHeight??baseRowHeight}hasRowWithAutoHeight.current=!0,entry.autoHeight=!0}else entry.content=getValidRowHeight(rowHeightFromUser,baseRowHeight,getRowHeightWarning),entry.needsFirstMeasurement=!1,entry.autoHeight=!1}else entry.content=baseRowHeight,entry.needsFirstMeasurement=!1;if(getRowSpacing){const indexRelativeToCurrentPage=apiRef.current.getRowIndexRelativeToVisibleRows(row.id),spacing=getRowSpacing((0,esm_extends.Z)({},row,{isFirstVisible:0===indexRelativeToCurrentPage,isLastVisible:indexRelativeToCurrentPage===currentPage.rows.length-1,indexRelativeToCurrentPage}));entry.spacingTop=spacing.top??0,entry.spacingBottom=spacing.bottom??0}else entry.spacingTop=0,entry.spacingBottom=0;return apiRef.current.unstable_applyPipeProcessors("rowHeight",entry,row),entry}),[apiRef,currentPage.rows,getRowHeightProp,getEstimatedRowHeight,rowHeight,getRowSpacing,densityFactor]),hydrateRowsMeta=react.useCallback((()=>{hasRowWithAutoHeight.current=!1;const pinnedTopRowsTotalHeight=pinnedRows.top.reduce(((acc,row)=>{const entry=processHeightEntry(row);return acc+entry.content+entry.spacingTop+entry.spacingBottom+entry.detail}),0),pinnedBottomRowsTotalHeight=pinnedRows.bottom.reduce(((acc,row)=>{const entry=processHeightEntry(row);return acc+entry.content+entry.spacingTop+entry.spacingBottom+entry.detail}),0),positions=[],currentPageTotalHeight=currentPage.rows.reduce(((acc,row)=>{positions.push(acc);const entry=processHeightEntry(row);return acc+(entry.content+entry.spacingTop+entry.spacingBottom+entry.detail)}),0);hasRowWithAutoHeight.current||(lastMeasuredRowIndex.current=1/0);const didHeightsChange=pinnedTopRowsTotalHeight!==apiRef.current.state.rowsMeta.pinnedTopRowsTotalHeight||pinnedBottomRowsTotalHeight!==apiRef.current.state.rowsMeta.pinnedBottomRowsTotalHeight||currentPageTotalHeight!==apiRef.current.state.rowsMeta.currentPageTotalHeight,rowsMeta={currentPageTotalHeight,positions,pinnedTopRowsTotalHeight,pinnedBottomRowsTotalHeight};apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rowsMeta}))),didHeightsChange&&apiRef.current.updateDimensions(),isHeightMetaValid.current=!0}),[apiRef,pinnedRows,currentPage.rows,processHeightEntry]),resizeObserver=(0,useLazyRef.Z)((()=>new ResizeObserver_ResizeObserver((entries=>{for(let i=0;i<entries.length;i+=1){const entry=entries[i],height=entry.borderBoxSize&&entry.borderBoxSize.length>0?entry.borderBoxSize[0].blockSize:entry.contentRect.height,rowId=entry.target.__mui_id;apiRef.current.unstable_storeRowHeightMeasurement(rowId,height)}isHeightMetaValid.current||apiRef.current.requestPipeProcessorsApplication("rowHeight")})))).current;useGridRegisterPipeApplier(apiRef,"rowHeight",hydrateRowsMeta),(0,useEnhancedEffect.Z)((()=>{hydrateRowsMeta()}),[hydrateRowsMeta]);const rowsMetaApi={unstable_getRowHeight:rowId=>heightCache.get(rowId)?.content??rowHeight,unstable_setLastMeasuredRowIndex:index=>{hasRowWithAutoHeight.current&&index>lastMeasuredRowIndex.current&&(lastMeasuredRowIndex.current=index)},unstable_storeRowHeightMeasurement:(id,height)=>{const entry=apiRef.current.getRowHeightEntry(id),didChange=entry.content!==height;entry.needsFirstMeasurement=!1,entry.content=height,isHeightMetaValid.current&&=!didChange},resetRowHeights:()=>{heightCache.clear(),hydrateRowsMeta()}},rowsMetaPrivateApi={hydrateRowsMeta,observeRowHeight:(element,rowId)=>(element.__mui_id=rowId,resizeObserver.observe(element),()=>resizeObserver.unobserve(element)),rowHasAutoHeight:id=>heightCache.get(id)?.autoHeight??!1,getRowHeightEntry:rowId=>{let entry=heightCache.get(rowId);return void 0===entry&&(entry={content:rowHeight,spacingTop:0,spacingBottom:0,detail:0,autoHeight:!1,needsFirstMeasurement:!0},heightCache.set(rowId,entry)),entry},getLastMeasuredRowIndex:()=>lastMeasuredRowIndex.current};useGridApiMethod(apiRef,rowsMetaApi,"public"),useGridApiMethod(apiRef,rowsMetaPrivateApi,"private")})(apiRef,props),((apiRef,props)=>{const isRtl=(0,RtlProvider.V)(),logger=useGridLogger(apiRef,"useGridScroll"),colRef=apiRef.current.columnHeadersContainerRef,virtualScrollerRef=apiRef.current.virtualScrollerRef,visibleSortedRows=useGridSelector(apiRef,gridExpandedSortedRowEntriesSelector),scrollToIndexes=react.useCallback((params=>{const dimensions=gridDimensionsSelector(apiRef.current.state),totalRowCount=gridRowCountSelector(apiRef),visibleColumns=props.unstable_listView?[gridListColumnSelector(apiRef.current.state)]:gridVisibleColumnDefinitionsSelector(apiRef);if(null!=params.rowIndex&&0===totalRowCount||0===visibleColumns.length)return!1;logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);let scrollCoordinates={};if(void 0!==params.colIndex){const columnPositions=gridColumnPositionsSelector(apiRef);let cellWidth;if(void 0!==params.rowIndex){const rowId=visibleSortedRows[params.rowIndex]?.id,cellColSpanInfo=apiRef.current.unstable_getCellColSpanInfo(rowId,params.colIndex);cellColSpanInfo&&!cellColSpanInfo.spannedByColSpan&&(cellWidth=cellColSpanInfo.cellProps.width)}void 0===cellWidth&&(cellWidth=visibleColumns[params.colIndex].computedWidth),scrollCoordinates.left=scrollIntoView({containerSize:dimensions.viewportOuterSize.width,scrollPosition:Math.abs(virtualScrollerRef.current.scrollLeft),elementSize:cellWidth,elementOffset:columnPositions[params.colIndex]})}if(void 0!==params.rowIndex){const rowsMeta=gridRowsMetaSelector(apiRef.current.state),page=gridPageSelector(apiRef),pageSize=gridPageSizeSelector(apiRef),elementIndex=props.pagination?params.rowIndex-page*pageSize:params.rowIndex,targetOffsetHeight=rowsMeta.positions[elementIndex+1]?rowsMeta.positions[elementIndex+1]-rowsMeta.positions[elementIndex]:rowsMeta.currentPageTotalHeight-rowsMeta.positions[elementIndex];scrollCoordinates.top=scrollIntoView({containerSize:dimensions.viewportInnerSize.height,scrollPosition:virtualScrollerRef.current.scrollTop,elementSize:targetOffsetHeight,elementOffset:rowsMeta.positions[elementIndex]})}return scrollCoordinates=apiRef.current.unstable_applyPipeProcessors("scrollToIndexes",scrollCoordinates,params),(void 0!==typeof scrollCoordinates.left||void 0!==typeof scrollCoordinates.top)&&(apiRef.current.scroll(scrollCoordinates),!0)}),[logger,apiRef,virtualScrollerRef,props.pagination,visibleSortedRows,props.unstable_listView]),scroll=react.useCallback((params=>{if(virtualScrollerRef.current&&void 0!==params.left&&colRef.current){const direction=isRtl?-1:1;colRef.current.scrollLeft=params.left,virtualScrollerRef.current.scrollLeft=direction*params.left,logger.debug(`Scrolling left: ${params.left}`)}virtualScrollerRef.current&&void 0!==params.top&&(virtualScrollerRef.current.scrollTop=params.top,logger.debug(`Scrolling top: ${params.top}`)),logger.debug("Scrolling, updating container, and viewport")}),[virtualScrollerRef,isRtl,colRef,logger]),getScrollPosition=react.useCallback((()=>virtualScrollerRef?.current?{top:virtualScrollerRef.current.scrollTop,left:virtualScrollerRef.current.scrollLeft}:{top:0,left:0}),[virtualScrollerRef]);useGridApiMethod(apiRef,{scroll,scrollToIndexes,getScrollPosition},"public")})(apiRef,props),(apiRef=>{const logger=useGridLogger(apiRef,"useGridColumnMenu"),showColumnMenu=react.useCallback((field=>{const columnMenuState=gridColumnMenuSelector(apiRef.current.state),newState_field=field;(!0!==columnMenuState.open||newState_field!==columnMenuState.field)&&(apiRef.current.setState((state=>state.columnMenu.open&&state.columnMenu.field===field?state:(logger.debug("Opening Column Menu"),(0,esm_extends.Z)({},state,{columnMenu:{open:!0,field}})))),apiRef.current.hidePreferences())}),[apiRef,logger]),hideColumnMenu=react.useCallback((()=>{const columnMenuState=gridColumnMenuSelector(apiRef.current.state);if(columnMenuState.field){const columnLookup=gridColumnLookupSelector(apiRef),columnVisibilityModel=gridColumnVisibilityModelSelector(apiRef),orderedFields=gridColumnFieldsSelector(apiRef);let fieldToFocus=columnMenuState.field;if(columnLookup[fieldToFocus]||(fieldToFocus=orderedFields[0]),!1===columnVisibilityModel[fieldToFocus]){const visibleOrderedFields=orderedFields.filter((field=>field===fieldToFocus||!1!==columnVisibilityModel[field])),fieldIndex=visibleOrderedFields.indexOf(fieldToFocus);fieldToFocus=visibleOrderedFields[fieldIndex+1]||visibleOrderedFields[fieldIndex-1]}apiRef.current.setColumnHeaderFocus(fieldToFocus)}const newState={open:!1,field:void 0};(newState.open!==columnMenuState.open||newState.field!==columnMenuState.field)&&apiRef.current.setState((state=>(logger.debug("Hiding Column Menu"),(0,esm_extends.Z)({},state,{columnMenu:newState}))))}),[apiRef,logger]),toggleColumnMenu=react.useCallback((field=>{logger.debug("Toggle Column Menu");const columnMenu=gridColumnMenuSelector(apiRef.current.state);columnMenu.open&&columnMenu.field===field?hideColumnMenu():showColumnMenu(field)}),[apiRef,logger,showColumnMenu,hideColumnMenu]);useGridApiMethod(apiRef,{showColumnMenu,hideColumnMenu,toggleColumnMenu},"public"),useGridApiEventHandler(apiRef,"columnResizeStart",hideColumnMenu),useGridApiEventHandler(apiRef,"virtualScrollerWheel",apiRef.current.hideColumnMenu),useGridApiEventHandler(apiRef,"virtualScrollerTouchMove",apiRef.current.hideColumnMenu)})(apiRef),useGridCsvExport(apiRef,props),useGridPrintExport(apiRef,props),useGridClipboard(apiRef,props),useGridDimensions(apiRef,props),function useGridEvents(apiRef,props){useGridApiOptionHandler(apiRef,"columnHeaderClick",props.onColumnHeaderClick),useGridApiOptionHandler(apiRef,"columnHeaderContextMenu",props.onColumnHeaderContextMenu),useGridApiOptionHandler(apiRef,"columnHeaderDoubleClick",props.onColumnHeaderDoubleClick),useGridApiOptionHandler(apiRef,"columnHeaderOver",props.onColumnHeaderOver),useGridApiOptionHandler(apiRef,"columnHeaderOut",props.onColumnHeaderOut),useGridApiOptionHandler(apiRef,"columnHeaderEnter",props.onColumnHeaderEnter),useGridApiOptionHandler(apiRef,"columnHeaderLeave",props.onColumnHeaderLeave),useGridApiOptionHandler(apiRef,"cellClick",props.onCellClick),useGridApiOptionHandler(apiRef,"cellDoubleClick",props.onCellDoubleClick),useGridApiOptionHandler(apiRef,"cellKeyDown",props.onCellKeyDown),useGridApiOptionHandler(apiRef,"preferencePanelClose",props.onPreferencePanelClose),useGridApiOptionHandler(apiRef,"preferencePanelOpen",props.onPreferencePanelOpen),useGridApiOptionHandler(apiRef,"menuOpen",props.onMenuOpen),useGridApiOptionHandler(apiRef,"menuClose",props.onMenuClose),useGridApiOptionHandler(apiRef,"rowDoubleClick",props.onRowDoubleClick),useGridApiOptionHandler(apiRef,"rowClick",props.onRowClick),useGridApiOptionHandler(apiRef,"stateChange",props.onStateChange)}(apiRef,props),(apiRef=>{const exportState=react.useCallback(((params={})=>apiRef.current.unstable_applyPipeProcessors("exportState",{},params)),[apiRef]),restoreState=react.useCallback((stateToRestore=>{apiRef.current.unstable_applyPipeProcessors("restoreState",{callbacks:[]},{stateToRestore}).callbacks.forEach((callback=>{callback()})),apiRef.current.forceUpdate()}),[apiRef]);useGridApiMethod(apiRef,{exportState,restoreState},"public")})(apiRef),function useGridVirtualization(apiRef,props){const setVirtualization=enabled=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{virtualization:(0,esm_extends.Z)({},state.virtualization,{enabled,enabledForColumns:enabled,enabledForRows:enabled&&!props.autoHeight})})))},api={unstable_setVirtualization:setVirtualization,unstable_setColumnVirtualization:enabled=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{virtualization:(0,esm_extends.Z)({},state.virtualization,{enabledForColumns:enabled})})))}};useGridApiMethod(apiRef,api,"public"),react.useEffect((()=>{setVirtualization(!props.disableVirtualization)}),[props.disableVirtualization,props.autoHeight])}(apiRef,props),function useGridListView(apiRef,props){const updateListColumnWidth=()=>{apiRef.current.setState((state=>state.listViewColumn?(0,esm_extends.Z)({},state,{listViewColumn:(0,esm_extends.Z)({},state.listViewColumn,{computedWidth:getListColumnWidth(apiRef)})}):state))},prevInnerWidth=react.useRef(null);useGridApiEventHandler(apiRef,"viewportInnerSizeChange",(viewportInnerSize=>{prevInnerWidth.current!==viewportInnerSize.width&&(prevInnerWidth.current=viewportInnerSize.width,updateListColumnWidth())})),useGridApiEventHandler(apiRef,"columnVisibilityModelChange",updateListColumnWidth),(0,useEnhancedEffect.Z)((()=>{const listColumn=props.unstable_listColumn;listColumn&&apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{listViewColumn:(0,esm_extends.Z)({},listColumn,{computedWidth:getListColumnWidth(apiRef)})})))}),[apiRef,props.unstable_listColumn]),react.useEffect((()=>{props.unstable_listView&&props.unstable_listColumn}),[props.unstable_listView,props.unstable_listColumn])}(apiRef,props),apiRef};var useThemeProps=__webpack_require__("./node_modules/@mui/material/styles/useThemeProps.js");const GRID_DEFAULT_LOCALE_TEXT={noRowsLabel:"No rows",noResultsOverlayLabel:"No results found.",toolbarDensity:"Density",toolbarDensityLabel:"Density",toolbarDensityCompact:"Compact",toolbarDensityStandard:"Standard",toolbarDensityComfortable:"Comfortable",toolbarColumns:"Columns",toolbarColumnsLabel:"Select columns",toolbarFilters:"Filters",toolbarFiltersLabel:"Show filters",toolbarFiltersTooltipHide:"Hide filters",toolbarFiltersTooltipShow:"Show filters",toolbarFiltersTooltipActive:count=>1!==count?`${count} active filters`:`${count} active filter`,toolbarQuickFilterPlaceholder:"Search…",toolbarQuickFilterLabel:"Search",toolbarQuickFilterDeleteIconLabel:"Clear",toolbarExport:"Export",toolbarExportLabel:"Export",toolbarExportCSV:"Download as CSV",toolbarExportPrint:"Print",toolbarExportExcel:"Download as Excel",columnsManagementSearchTitle:"Search",columnsManagementNoColumns:"No columns",columnsManagementShowHideAllText:"Show/Hide All",columnsManagementReset:"Reset",columnsManagementDeleteIconLabel:"Clear",filterPanelAddFilter:"Add filter",filterPanelRemoveAll:"Remove all",filterPanelDeleteIconLabel:"Delete",filterPanelLogicOperator:"Logic operator",filterPanelOperator:"Operator",filterPanelOperatorAnd:"And",filterPanelOperatorOr:"Or",filterPanelColumns:"Columns",filterPanelInputLabel:"Value",filterPanelInputPlaceholder:"Filter value",filterOperatorContains:"contains",filterOperatorDoesNotContain:"does not contain",filterOperatorEquals:"equals",filterOperatorDoesNotEqual:"does not equal",filterOperatorStartsWith:"starts with",filterOperatorEndsWith:"ends with",filterOperatorIs:"is",filterOperatorNot:"is not",filterOperatorAfter:"is after",filterOperatorOnOrAfter:"is on or after",filterOperatorBefore:"is before",filterOperatorOnOrBefore:"is on or before",filterOperatorIsEmpty:"is empty",filterOperatorIsNotEmpty:"is not empty",filterOperatorIsAnyOf:"is any of","filterOperator=":"=","filterOperator!=":"!=","filterOperator>":">","filterOperator>=":">=","filterOperator<":"<","filterOperator<=":"<=",headerFilterOperatorContains:"Contains",headerFilterOperatorDoesNotContain:"Does not contain",headerFilterOperatorEquals:"Equals",headerFilterOperatorDoesNotEqual:"Does not equal",headerFilterOperatorStartsWith:"Starts with",headerFilterOperatorEndsWith:"Ends with",headerFilterOperatorIs:"Is",headerFilterOperatorNot:"Is not",headerFilterOperatorAfter:"Is after",headerFilterOperatorOnOrAfter:"Is on or after",headerFilterOperatorBefore:"Is before",headerFilterOperatorOnOrBefore:"Is on or before",headerFilterOperatorIsEmpty:"Is empty",headerFilterOperatorIsNotEmpty:"Is not empty",headerFilterOperatorIsAnyOf:"Is any of","headerFilterOperator=":"Equals","headerFilterOperator!=":"Not equals","headerFilterOperator>":"Greater than","headerFilterOperator>=":"Greater than or equal to","headerFilterOperator<":"Less than","headerFilterOperator<=":"Less than or equal to",filterValueAny:"any",filterValueTrue:"true",filterValueFalse:"false",columnMenuLabel:"Menu",columnMenuShowColumns:"Show columns",columnMenuManageColumns:"Manage columns",columnMenuFilter:"Filter",columnMenuHideColumn:"Hide column",columnMenuUnsort:"Unsort",columnMenuSortAsc:"Sort by ASC",columnMenuSortDesc:"Sort by DESC",columnHeaderFiltersTooltipActive:count=>1!==count?`${count} active filters`:`${count} active filter`,columnHeaderFiltersLabel:"Show filters",columnHeaderSortIconLabel:"Sort",footerRowSelected:count=>1!==count?`${count.toLocaleString()} rows selected`:`${count.toLocaleString()} row selected`,footerTotalRows:"Total Rows:",footerTotalVisibleRows:(visibleCount,totalCount)=>`${visibleCount.toLocaleString()} of ${totalCount.toLocaleString()}`,checkboxSelectionHeaderName:"Checkbox selection",checkboxSelectionSelectAllRows:"Select all rows",checkboxSelectionUnselectAllRows:"Unselect all rows",checkboxSelectionSelectRow:"Select row",checkboxSelectionUnselectRow:"Unselect row",booleanCellTrueLabel:"yes",booleanCellFalseLabel:"no",actionsCellMore:"more",pinToLeft:"Pin to left",pinToRight:"Pin to right",unpin:"Unpin",treeDataGroupingHeaderName:"Group",treeDataExpand:"see children",treeDataCollapse:"hide children",groupingColumnHeaderName:"Group",groupColumn:name=>`Group by ${name}`,unGroupColumn:name=>`Stop grouping by ${name}`,detailPanelToggle:"Detail panel toggle",expandDetailPanel:"Expand",collapseDetailPanel:"Collapse",MuiTablePagination:{},rowReorderingHeaderName:"Row reordering",aggregationMenuItemHeader:"Aggregation",aggregationFunctionLabelSum:"sum",aggregationFunctionLabelAvg:"avg",aggregationFunctionLabelMin:"min",aggregationFunctionLabelMax:"max",aggregationFunctionLabelSize:"size"};var Skeleton=__webpack_require__("./node_modules/@mui/material/Skeleton/Skeleton.js");const GridSkeletonCell_excluded=["field","type","align","width","height","empty","style","className"],DEFAULT_CONTENT_WIDTH_RANGE=[40,80],CONTENT_WIDTH_RANGE_BY_TYPE={number:[40,60],string:[40,80],date:[40,60],dateTime:[60,80],singleSelect:[40,80]},randomNumberGenerator=function createRandomNumberGenerator(seed){const random=function mulberry32(a){return()=>{let t=a+=1831565813;return t=Math.imul(t^t>>>15,1|t),t^=t+Math.imul(t^t>>>7,61|t),((t^t>>>14)>>>0)/4294967296}}(seed);return(min,max)=>min+(max-min)*random()}(12345);const GridSkeletonCell_Memoized=fastMemo((function GridSkeletonCell(props){const{field,type,align,width,height,empty=!1,style,className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridSkeletonCell_excluded),classes=(ownerState=>{const{align,classes,empty}=ownerState,slots={root:["cell","cellSkeleton",`cell--text${align?(0,capitalize.Z)(align):"Left"}`,empty&&"cellEmpty"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})({classes:useGridRootProps().classes,align,empty}),skeletonProps=react.useMemo((()=>{if("boolean"===type||"actions"===type)return{variant:"circular",width:"1.3em",height:"1.3em"};const[min,max]=type?CONTENT_WIDTH_RANGE_BY_TYPE[type]??DEFAULT_CONTENT_WIDTH_RANGE:DEFAULT_CONTENT_WIDTH_RANGE;return{variant:"text",width:`${Math.round(randomNumberGenerator(min,max))}%`,height:"1.2em"}}),[type]);return(0,jsx_runtime.jsx)("div",(0,esm_extends.Z)({"data-field":field,className:(0,clsx.Z)(classes.root,className),style:(0,esm_extends.Z)({height,maxWidth:width,minWidth:width},style)},other,{children:!empty&&(0,jsx_runtime.jsx)(Skeleton.Z,(0,esm_extends.Z)({},skeletonProps))}))})),GridIconButtonContainer_excluded=["className"],GridIconButtonContainerRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"IconButtonContainer",overridesResolver:(props,styles)=>styles.iconButtonContainer})((()=>({display:"flex",visibility:"hidden",width:0}))),GridIconButtonContainer=forwardRef((function GridIconButtonContainer(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridIconButtonContainer_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["iconButtonContainer"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridIconButtonContainerRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState:rootProps},other,{ref}))})),GridColumnHeaderFilterIconButton_useUtilityClasses=ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({icon:["filterIcon"]},getDataGridUtilityClass,classes)};function GridColumnHeaderFilterIconButton(props){const{counter,field,onClick}=props,apiRef=useGridApiContext(),rootProps=useGridRootProps(),ownerState=(0,esm_extends.Z)({},props,{classes:rootProps.classes}),classes=GridColumnHeaderFilterIconButton_useUtilityClasses(ownerState),labelId=(0,useId.Z)(),isOpen=useGridSelectorV8(apiRef,gridPreferencePanelSelectorWithLabel,labelId),panelId=(0,useId.Z)(),toggleFilter=react.useCallback((event=>{event.preventDefault(),event.stopPropagation();const{open,openedPanelValue}=gridPreferencePanelStateSelector(apiRef.current.state);open&&openedPanelValue===GridPreferencePanelsValue.filters?apiRef.current.hideFilterPanel():apiRef.current.showFilterPanel(void 0,panelId,labelId),onClick&&onClick(apiRef.current.getColumnHeaderParams(field),event)}),[apiRef,field,onClick,panelId,labelId]);if(!counter)return null;const iconButton=(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({id:labelId,onClick:toggleFilter,color:"default","aria-label":apiRef.current.getLocaleText("columnHeaderFiltersLabel"),size:"small",tabIndex:-1,"aria-haspopup":"menu","aria-expanded":isOpen,"aria-controls":isOpen?panelId:void 0},rootProps.slotProps?.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnFilteredIcon,{className:classes.icon,fontSize:"small"})}));return(0,jsx_runtime.jsx)(rootProps.slots.baseTooltip,(0,esm_extends.Z)({title:apiRef.current.getLocaleText("columnHeaderFiltersTooltipActive")(counter),enterDelay:1e3},rootProps.slotProps?.baseTooltip,{children:(0,jsx_runtime.jsxs)(GridIconButtonContainer,{children:[counter>1&&(0,jsx_runtime.jsx)(rootProps.slots.baseBadge,{badgeContent:counter,color:"default",children:iconButton}),1===counter&&iconButton]})}))}const GridColumnHeaderSortIcon_excluded=["direction","index","sortingOrder","disabled"];function GridColumnHeaderSortIconRaw(props){const{direction,index,sortingOrder,disabled}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnHeaderSortIcon_excluded),apiRef=useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({icon:["sortIcon"]},getDataGridUtilityClass,classes)})((0,esm_extends.Z)({},props,{classes:rootProps.classes})),iconElement=function getIcon(icons,direction,className,sortingOrder){let Icon;const iconProps={};return"asc"===direction?Icon=icons.columnSortedAscendingIcon:"desc"===direction?Icon=icons.columnSortedDescendingIcon:(Icon=icons.columnUnsortedIcon,iconProps.sortingOrder=sortingOrder),Icon?(0,jsx_runtime.jsx)(Icon,(0,esm_extends.Z)({fontSize:"small",className},iconProps)):null}(rootProps.slots,direction,classes.icon,sortingOrder);if(!iconElement)return null;const iconButton=(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({tabIndex:-1,"aria-label":apiRef.current.getLocaleText("columnHeaderSortIconLabel"),title:apiRef.current.getLocaleText("columnHeaderSortIconLabel"),size:"small",disabled},rootProps.slotProps?.baseIconButton,other,{children:iconElement}));return(0,jsx_runtime.jsxs)(GridIconButtonContainer,{children:[null!=index&&(0,jsx_runtime.jsx)(rootProps.slots.baseBadge,{badgeContent:index,color:"default",overlap:"circular",children:iconButton}),null==index&&iconButton]})}const GridColumnHeaderSortIcon=react.memo(GridColumnHeaderSortIconRaw),GridSelectedRowCount_excluded=["className","selectedRowCount"],GridSelectedRowCountRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"SelectedRowCount",overridesResolver:(props,styles)=>styles.selectedRowCount})((({theme})=>({alignItems:"center",display:"flex",margin:theme.spacing(0,2),visibility:"hidden",width:0,height:0,[theme.breakpoints.up("sm")]:{visibility:"visible",width:"auto",height:"auto"}}))),GridSelectedRowCount=forwardRef((function GridSelectedRowCount(props,ref){const{className,selectedRowCount}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridSelectedRowCount_excluded),apiRef=useGridApiContext(),ownerState=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["selectedRowCount"]},getDataGridUtilityClass,classes)})(ownerState),rowSelectedText=apiRef.current.getLocaleText("footerRowSelected")(selectedRowCount);return(0,jsx_runtime.jsx)(GridSelectedRowCountRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState},other,{ref,children:rowSelectedText}))})),GridFooterContainer_excluded=["className"],GridFooterContainerRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"FooterContainer",overridesResolver:(props,styles)=>styles.footerContainer})({display:"flex",justifyContent:"space-between",alignItems:"center",minHeight:52,borderTop:"1px solid"}),GridFooterContainer=forwardRef((function GridFooterContainer(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFooterContainer_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["footerContainer","withBorderColor"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridFooterContainerRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState:rootProps},other,{ref}))})),GridFooter=forwardRef((function GridFooter(props,ref){const apiRef=useGridApiContext(),rootProps=useGridRootProps(),totalTopLevelRowCount=useGridSelector(apiRef,gridTopLevelRowCountSelector),selectedRowCount=useGridSelector(apiRef,selectedGridRowsCountSelector),visibleTopLevelRowCount=useGridSelector(apiRef,gridFilteredTopLevelRowCountSelector),selectedRowCountElement=!rootProps.hideFooterSelectedRowCount&&selectedRowCount>0?(0,jsx_runtime.jsx)(GridSelectedRowCount,{selectedRowCount}):(0,jsx_runtime.jsx)("div",{}),rowCountElement=rootProps.hideFooterRowCount||rootProps.pagination?null:(0,jsx_runtime.jsx)(rootProps.slots.footerRowCount,(0,esm_extends.Z)({},rootProps.slotProps?.footerRowCount,{rowCount:totalTopLevelRowCount,visibleRowCount:visibleTopLevelRowCount})),paginationElement=rootProps.pagination&&!rootProps.hideFooterPagination&&rootProps.slots.pagination&&(0,jsx_runtime.jsx)(rootProps.slots.pagination,(0,esm_extends.Z)({},rootProps.slotProps?.pagination));return(0,jsx_runtime.jsxs)(GridFooterContainer,(0,esm_extends.Z)({},props,{ref,children:[selectedRowCountElement,rowCountElement,paginationElement]}))})),GridRowCount_excluded=["className","rowCount","visibleRowCount"],GridRowCountRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"RowCount",overridesResolver:(props,styles)=>styles.rowCount})((({theme})=>({alignItems:"center",display:"flex",margin:theme.spacing(0,2)}))),GridRowCount=forwardRef((function GridRowCount(props,ref){const{className,rowCount,visibleRowCount}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridRowCount_excluded),apiRef=useGridApiContext(),ownerState=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["rowCount"]},getDataGridUtilityClass,classes)})(ownerState);if(0===rowCount)return null;const text=visibleRowCount<rowCount?apiRef.current.getLocaleText("footerTotalVisibleRows")(visibleRowCount,rowCount):rowCount.toLocaleString();return(0,jsx_runtime.jsxs)(GridRowCountRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState},other,{ref,children:[apiRef.current.getLocaleText("footerTotalRows")," ",text]}))}));var LinearProgress=__webpack_require__("./node_modules/@mui/material/LinearProgress/LinearProgress.js"),CircularProgress=__webpack_require__("./node_modules/@mui/material/CircularProgress/CircularProgress.js");const GridOverlay_excluded=["className"],GridOverlayRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"Overlay",overridesResolver:(_,styles)=>styles.overlay})({width:"100%",height:"100%",display:"flex",alignSelf:"center",alignItems:"center",justifyContent:"center",backgroundColor:"var(--unstable_DataGrid-overlayBackground)"}),GridOverlay=forwardRef((function GridOverlay(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridOverlay_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["overlay"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridOverlayRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState:rootProps},other,{ref}))})),getPinnedCellOffset=(pinnedPosition,computedWidth,columnIndex,columnPositions,columnsTotalWidth,scrollbarWidth)=>{let pinnedOffset;switch(pinnedPosition){case PinnedColumnPosition.LEFT:pinnedOffset=columnPositions[columnIndex];break;case PinnedColumnPosition.RIGHT:pinnedOffset=columnsTotalWidth-columnPositions[columnIndex]-computedWidth+scrollbarWidth;break;default:pinnedOffset=void 0}return pinnedOffset},shouldCellShowRightBorder=(pinnedPosition,indexInSection,sectionLength,showCellVerticalBorderRootProp,gridHasFiller)=>{const isSectionLastCell=indexInSection===sectionLength-1;return!(pinnedPosition!==PinnedColumnPosition.LEFT||!isSectionLastCell)||!!showCellVerticalBorderRootProp&&(pinnedPosition===PinnedColumnPosition.LEFT||(pinnedPosition===PinnedColumnPosition.RIGHT?!isSectionLastCell:!isSectionLastCell||gridHasFiller))},shouldCellShowLeftBorder=(pinnedPosition,indexInSection)=>pinnedPosition===PinnedColumnPosition.RIGHT&&0===indexInSection,classes={root:gridClasses.scrollbarFiller,header:gridClasses["scrollbarFiller--header"],borderTop:gridClasses["scrollbarFiller--borderTop"],borderBottom:gridClasses["scrollbarFiller--borderBottom"],pinnedRight:gridClasses["scrollbarFiller--pinnedRight"]};function GridScrollbarFillerCell({header,borderTop=!0,borderBottom,pinnedRight}){return(0,jsx_runtime.jsx)("div",{role:"presentation",className:(0,clsx.Z)(classes.root,header&&classes.header,borderTop&&classes.borderTop,borderBottom&&classes.borderBottom,pinnedRight&&classes.pinnedRight)})}const rtlFlipSide=(position,isRtl)=>{if(position)if(isRtl){if(position===PinnedColumnPosition.LEFT)return"right";if(position===PinnedColumnPosition.RIGHT)return"left"}else{if(position===PinnedColumnPosition.LEFT)return"left";if(position===PinnedColumnPosition.RIGHT)return"right"}};function attachPinnedStyle(style,isRtl,pinnedPosition,pinnedOffset){const side=rtlFlipSide(pinnedPosition,isRtl);return side&&void 0!==pinnedOffset?(style[side]=pinnedOffset,style):style}const SkeletonOverlay=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"SkeletonLoadingOverlay",overridesResolver:(props,styles)=>styles.skeletonLoadingOverlay})({minWidth:"100%",width:"max-content",height:"100%",overflow:"clip"}),getColIndex=el=>parseInt(el.getAttribute("data-colindex"),10),GridSkeletonLoadingOverlay=forwardRef((function GridSkeletonLoadingOverlay(props,forwardedRef){const rootProps=useGridRootProps(),{slots}=rootProps,isRtl=(0,RtlProvider.V)(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["skeletonLoadingOverlay"]},getDataGridUtilityClass,classes)})({classes:rootProps.classes}),ref=react.useRef(null),handleRef=(0,useForkRef.Z)(ref,forwardedRef),apiRef=useGridApiContext(),dimensions=useGridSelector(apiRef,gridDimensionsSelector),viewportHeight=dimensions?.viewportInnerSize.height??0,skeletonRowsCount=Math.ceil(viewportHeight/dimensions.rowHeight),totalWidth=useGridSelector(apiRef,gridColumnsTotalWidthSelector),positions=useGridSelector(apiRef,gridColumnPositionsSelector),inViewportCount=react.useMemo((()=>positions.filter((value=>value<=totalWidth)).length),[totalWidth,positions]),allVisibleColumns=useGridSelector(apiRef,gridVisibleColumnDefinitionsSelector),columns=react.useMemo((()=>allVisibleColumns.slice(0,inViewportCount)),[allVisibleColumns,inViewportCount]),pinnedColumns=useGridSelector(apiRef,gridVisiblePinnedColumnDefinitionsSelector),getPinnedPosition=react.useCallback((field=>-1!==pinnedColumns.left.findIndex((col=>col.field===field))?PinnedColumnPosition.LEFT:-1!==pinnedColumns.right.findIndex((col=>col.field===field))?PinnedColumnPosition.RIGHT:void 0),[pinnedColumns.left,pinnedColumns.right]),children=react.useMemo((()=>{const array=[];for(let i=0;i<skeletonRowsCount;i+=1){const rowCells=[];for(let colIndex=0;colIndex<columns.length;colIndex+=1){const column=columns[colIndex],pinnedPosition=getPinnedPosition(column.field),isPinnedLeft=pinnedPosition===PinnedColumnPosition.LEFT,isPinnedRight=pinnedPosition===PinnedColumnPosition.RIGHT,pinnedSide=rtlFlipSide(pinnedPosition,isRtl),sectionLength=pinnedSide?pinnedColumns[pinnedSide].length:columns.length-pinnedColumns.left.length-pinnedColumns.right.length,sectionIndex=pinnedSide?pinnedColumns[pinnedSide].findIndex((col=>col.field===column.field)):colIndex-pinnedColumns.left.length,scrollbarWidth=dimensions.hasScrollY?dimensions.scrollbarSize:0,pinnedStyle=attachPinnedStyle({},isRtl,pinnedPosition,getPinnedCellOffset(pinnedPosition,column.computedWidth,colIndex,positions,dimensions.columnsTotalWidth,scrollbarWidth)),gridHasFiller=dimensions.columnsTotalWidth<dimensions.viewportOuterSize.width,showRightBorder=shouldCellShowRightBorder(pinnedPosition,sectionIndex,sectionLength,rootProps.showCellVerticalBorder,gridHasFiller),showLeftBorder=shouldCellShowLeftBorder(pinnedPosition,sectionIndex),isLastColumn=colIndex===columns.length-1,isFirstPinnedRight=isPinnedRight&&0===sectionIndex,hasFillerBefore=isFirstPinnedRight&&gridHasFiller,hasFillerAfter=isLastColumn&&!isFirstPinnedRight&&gridHasFiller,expandedWidth=dimensions.viewportOuterSize.width-dimensions.columnsTotalWidth,emptyCellWidth=Math.max(0,expandedWidth),emptyCell=(0,jsx_runtime.jsx)(slots.skeletonCell,{width:emptyCellWidth,empty:!0},`skeleton-filler-column-${i}`),hasScrollbarFiller=isLastColumn&&0!==scrollbarWidth;hasFillerBefore&&rowCells.push(emptyCell),rowCells.push((0,jsx_runtime.jsx)(slots.skeletonCell,{field:column.field,type:column.type,align:column.align,width:"var(--width)",height:dimensions.rowHeight,"data-colindex":colIndex,className:(0,clsx.Z)(isPinnedLeft&&gridClasses["cell--pinnedLeft"],isPinnedRight&&gridClasses["cell--pinnedRight"],showRightBorder&&gridClasses["cell--withRightBorder"],showLeftBorder&&gridClasses["cell--withLeftBorder"]),style:(0,esm_extends.Z)({"--width":`${column.computedWidth}px`},pinnedStyle)},`skeleton-column-${i}-${column.field}`)),hasFillerAfter&&rowCells.push(emptyCell),hasScrollbarFiller&&rowCells.push((0,jsx_runtime.jsx)(GridScrollbarFillerCell,{pinnedRight:pinnedColumns.right.length>0},`skeleton-scrollbar-filler-${i}`))}array.push((0,jsx_runtime.jsx)("div",{className:(0,clsx.Z)(gridClasses.row,gridClasses.rowSkeleton,0===i&&gridClasses["row--firstVisible"]),children:rowCells},`skeleton-row-${i}`))}return array}),[slots,columns,pinnedColumns,skeletonRowsCount,rootProps.showCellVerticalBorder,dimensions,positions,getPinnedPosition,isRtl]);return useGridApiEventHandler(apiRef,"columnResize",(params=>{const{colDef,width}=params,cells=ref.current?.querySelectorAll(`[data-field="${escapeOperandAttributeSelector(colDef.field)}"]`);if(!cells)throw new Error("MUI X: Expected skeleton cells to be defined with `data-field` attribute.");const resizedColIndex=columns.findIndex((col=>col.field===colDef.field)),pinnedPosition=getPinnedPosition(colDef.field),isPinnedLeft=pinnedPosition===PinnedColumnPosition.LEFT,isPinnedRight=pinnedPosition===PinnedColumnPosition.RIGHT,currentWidth=getComputedStyle(cells[0]).getPropertyValue("--width"),delta=parseInt(currentWidth,10)-width;if(cells&&cells.forEach((element=>{element.style.setProperty("--width",`${width}px`)})),isPinnedLeft){const pinnedCells=ref.current?.querySelectorAll(`.${gridClasses["cell--pinnedLeft"]}`);pinnedCells?.forEach((element=>{getColIndex(element)>resizedColIndex&&(element.style.left=parseInt(getComputedStyle(element).left,10)-delta+"px")}))}if(isPinnedRight){const pinnedCells=ref.current?.querySelectorAll(`.${gridClasses["cell--pinnedRight"]}`);pinnedCells?.forEach((element=>{getColIndex(element)<resizedColIndex&&(element.style.right=`${parseInt(getComputedStyle(element).right,10)+delta}px`)}))}})),(0,jsx_runtime.jsx)(SkeletonOverlay,(0,esm_extends.Z)({className:classes.root},props,{ref:handleRef,children}))})),GridLoadingOverlay_excluded=["variant","noRowsVariant","style"],LOADING_VARIANTS={"circular-progress":{component:CircularProgress.Z,style:{}},"linear-progress":{component:LinearProgress.Z,style:{display:"block"}},skeleton:{component:GridSkeletonLoadingOverlay,style:{display:"block"}}},GridLoadingOverlay=forwardRef((function GridLoadingOverlay(props,ref){const{variant="circular-progress",noRowsVariant="circular-progress",style}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridLoadingOverlay_excluded),apiRef=useGridApiContext(),rowsCount=useGridSelector(apiRef,gridRowCountSelector),activeVariant=LOADING_VARIANTS[0===rowsCount?noRowsVariant:variant];return(0,jsx_runtime.jsx)(GridOverlay,(0,esm_extends.Z)({style:(0,esm_extends.Z)({},activeVariant.style,style)},other,{ref,children:(0,jsx_runtime.jsx)(activeVariant.component,{})}))})),GridNoRowsOverlay=forwardRef((function GridNoRowsOverlay(props,ref){const noRowsLabel=useGridApiContext().current.getLocaleText("noRowsLabel");return(0,jsx_runtime.jsx)(GridOverlay,(0,esm_extends.Z)({},props,{ref,children:noRowsLabel}))}));var memoTheme=__webpack_require__("./node_modules/@mui/material/utils/memoTheme.js"),DefaultPropsProvider=__webpack_require__("./node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js"),Select=__webpack_require__("./node_modules/@mui/material/Select/Select.js"),TableCell=__webpack_require__("./node_modules/@mui/material/TableCell/TableCell.js"),Toolbar=__webpack_require__("./node_modules/@mui/material/Toolbar/Toolbar.js"),KeyboardArrowLeft=__webpack_require__("./node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js"),KeyboardArrowRight=__webpack_require__("./node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js"),IconButton=__webpack_require__("./node_modules/@mui/material/IconButton/IconButton.js"),createSvgIcon=__webpack_require__("./node_modules/@mui/material/utils/createSvgIcon.js");const LastPage=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"}),"LastPage"),FirstPage=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"}),"FirstPage"),TablePagination_TablePaginationActions=react.forwardRef((function TablePaginationActions(props,ref){const{backIconButtonProps,count,disabled=!1,getItemAriaLabel,nextIconButtonProps,onPageChange,page,rowsPerPage,showFirstButton,showLastButton,slots={},slotProps={},...other}=props,isRtl=(0,RtlProvider.V)(),FirstButton=slots.firstButton??IconButton.Z,LastButton=slots.lastButton??IconButton.Z,NextButton=slots.nextButton??IconButton.Z,PreviousButton=slots.previousButton??IconButton.Z,FirstButtonIcon=slots.firstButtonIcon??FirstPage,LastButtonIcon=slots.lastButtonIcon??LastPage,NextButtonIcon=slots.nextButtonIcon??KeyboardArrowRight.Z,PreviousButtonIcon=slots.previousButtonIcon??KeyboardArrowLeft.Z,FirstButtonSlot=isRtl?LastButton:FirstButton,PreviousButtonSlot=isRtl?NextButton:PreviousButton,NextButtonSlot=isRtl?PreviousButton:NextButton,LastButtonSlot=isRtl?FirstButton:LastButton,firstButtonSlotProps=isRtl?slotProps.lastButton:slotProps.firstButton,previousButtonSlotProps=isRtl?slotProps.nextButton:slotProps.previousButton,nextButtonSlotProps=isRtl?slotProps.previousButton:slotProps.nextButton,lastButtonSlotProps=isRtl?slotProps.firstButton:slotProps.lastButton;return(0,jsx_runtime.jsxs)("div",{ref,...other,children:[showFirstButton&&(0,jsx_runtime.jsx)(FirstButtonSlot,{onClick:event=>{onPageChange(event,0)},disabled:disabled||0===page,"aria-label":getItemAriaLabel("first",page),title:getItemAriaLabel("first",page),...firstButtonSlotProps,children:isRtl?(0,jsx_runtime.jsx)(LastButtonIcon,{...slotProps.lastButtonIcon}):(0,jsx_runtime.jsx)(FirstButtonIcon,{...slotProps.firstButtonIcon})}),(0,jsx_runtime.jsx)(PreviousButtonSlot,{onClick:event=>{onPageChange(event,page-1)},disabled:disabled||0===page,color:"inherit","aria-label":getItemAriaLabel("previous",page),title:getItemAriaLabel("previous",page),...previousButtonSlotProps??backIconButtonProps,children:isRtl?(0,jsx_runtime.jsx)(NextButtonIcon,{...slotProps.nextButtonIcon}):(0,jsx_runtime.jsx)(PreviousButtonIcon,{...slotProps.previousButtonIcon})}),(0,jsx_runtime.jsx)(NextButtonSlot,{onClick:event=>{onPageChange(event,page+1)},disabled:disabled||-1!==count&&page>=Math.ceil(count/rowsPerPage)-1,color:"inherit","aria-label":getItemAriaLabel("next",page),title:getItemAriaLabel("next",page),...nextButtonSlotProps??nextIconButtonProps,children:isRtl?(0,jsx_runtime.jsx)(PreviousButtonIcon,{...slotProps.previousButtonIcon}):(0,jsx_runtime.jsx)(NextButtonIcon,{...slotProps.nextButtonIcon})}),showLastButton&&(0,jsx_runtime.jsx)(LastButtonSlot,{onClick:event=>{onPageChange(event,Math.max(0,Math.ceil(count/rowsPerPage)-1))},disabled:disabled||page>=Math.ceil(count/rowsPerPage)-1,"aria-label":getItemAriaLabel("last",page),title:getItemAriaLabel("last",page),...lastButtonSlotProps,children:isRtl?(0,jsx_runtime.jsx)(FirstButtonIcon,{...slotProps.firstButtonIcon}):(0,jsx_runtime.jsx)(LastButtonIcon,{...slotProps.lastButtonIcon})})]})}));var utils_useId=__webpack_require__("./node_modules/@mui/material/utils/useId.js");function getTablePaginationUtilityClass(slot){return(0,generateUtilityClass.ZP)("MuiTablePagination",slot)}const TablePagination_tablePaginationClasses=(0,generateUtilityClasses.Z)("MuiTablePagination",["root","toolbar","spacer","selectLabel","selectRoot","select","selectIcon","input","menuItem","displayedRows","actions"]);var _InputBase,useSlot=__webpack_require__("./node_modules/@mui/material/utils/useSlot.js");const TablePaginationRoot=(0,styled.ZP)(TableCell.Z,{name:"MuiTablePagination",slot:"Root",overridesResolver:(props,styles)=>styles.root})((0,memoTheme.Z)((({theme})=>({overflow:"auto",color:(theme.vars||theme).palette.text.primary,fontSize:theme.typography.pxToRem(14),"&:last-child":{padding:0}})))),TablePaginationToolbar=(0,styled.ZP)(Toolbar.Z,{name:"MuiTablePagination",slot:"Toolbar",overridesResolver:(props,styles)=>({[`& .${TablePagination_tablePaginationClasses.actions}`]:styles.actions,...styles.toolbar})})((0,memoTheme.Z)((({theme})=>({minHeight:52,paddingRight:2,[`${theme.breakpoints.up("xs")} and (orientation: landscape)`]:{minHeight:52},[theme.breakpoints.up("sm")]:{minHeight:52,paddingRight:2},[`& .${TablePagination_tablePaginationClasses.actions}`]:{flexShrink:0,marginLeft:20}})))),TablePaginationSpacer=(0,styled.ZP)("div",{name:"MuiTablePagination",slot:"Spacer",overridesResolver:(props,styles)=>styles.spacer})({flex:"1 1 100%"}),TablePaginationSelectLabel=(0,styled.ZP)("p",{name:"MuiTablePagination",slot:"SelectLabel",overridesResolver:(props,styles)=>styles.selectLabel})((0,memoTheme.Z)((({theme})=>({...theme.typography.body2,flexShrink:0})))),TablePaginationSelect=(0,styled.ZP)(Select.Z,{name:"MuiTablePagination",slot:"Select",overridesResolver:(props,styles)=>({[`& .${TablePagination_tablePaginationClasses.selectIcon}`]:styles.selectIcon,[`& .${TablePagination_tablePaginationClasses.select}`]:styles.select,...styles.input,...styles.selectRoot})})({color:"inherit",fontSize:"inherit",flexShrink:0,marginRight:32,marginLeft:8,[`& .${TablePagination_tablePaginationClasses.select}`]:{paddingLeft:8,paddingRight:24,textAlign:"right",textAlignLast:"right"}}),TablePaginationMenuItem=(0,styled.ZP)(MenuItem.Z,{name:"MuiTablePagination",slot:"MenuItem",overridesResolver:(props,styles)=>styles.menuItem})({}),TablePaginationDisplayedRows=(0,styled.ZP)("p",{name:"MuiTablePagination",slot:"DisplayedRows",overridesResolver:(props,styles)=>styles.displayedRows})((0,memoTheme.Z)((({theme})=>({...theme.typography.body2,flexShrink:0}))));function defaultLabelDisplayedRows({from,to,count}){return`${from}–${to} of ${-1!==count?count:`more than ${to}`}`}function defaultGetAriaLabel(type){return`Go to ${type} page`}const TablePagination=react.forwardRef((function TablePagination(inProps,ref){const props=(0,DefaultPropsProvider.i)({props:inProps,name:"MuiTablePagination"}),{ActionsComponent=TablePagination_TablePaginationActions,backIconButtonProps,colSpan:colSpanProp,component=TableCell.Z,count,disabled=!1,getItemAriaLabel=defaultGetAriaLabel,labelDisplayedRows=defaultLabelDisplayedRows,labelRowsPerPage="Rows per page:",nextIconButtonProps,onPageChange,onRowsPerPageChange,page,rowsPerPage,rowsPerPageOptions=[10,25,50,100],SelectProps={},showFirstButton=!1,showLastButton=!1,slotProps={},slots={},...other}=props,ownerState=props,classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["root"],toolbar:["toolbar"],spacer:["spacer"],selectLabel:["selectLabel"],select:["select"],input:["input"],selectIcon:["selectIcon"],menuItem:["menuItem"],displayedRows:["displayedRows"],actions:["actions"]},getTablePaginationUtilityClass,classes)})(ownerState),selectProps=slotProps?.select??SelectProps,MenuItemComponent=selectProps.native?"option":TablePaginationMenuItem;let colSpan;component!==TableCell.Z&&"td"!==component||(colSpan=colSpanProp||1e3);const selectId=(0,utils_useId.Z)(selectProps.id),labelId=(0,utils_useId.Z)(selectProps.labelId),externalForwardedProps={slots,slotProps},[RootSlot,rootSlotProps]=(0,useSlot.Z)("root",{ref,className:classes.root,elementType:TablePaginationRoot,externalForwardedProps:{...externalForwardedProps,component,...other},ownerState,additionalProps:{colSpan}}),[ToolbarSlot,toolbarSlotProps]=(0,useSlot.Z)("toolbar",{className:classes.toolbar,elementType:TablePaginationToolbar,externalForwardedProps,ownerState}),[SpacerSlot,spacerSlotProps]=(0,useSlot.Z)("spacer",{className:classes.spacer,elementType:TablePaginationSpacer,externalForwardedProps,ownerState}),[SelectLabelSlot,selectLabelSlotProps]=(0,useSlot.Z)("selectLabel",{className:classes.selectLabel,elementType:TablePaginationSelectLabel,externalForwardedProps,ownerState,additionalProps:{id:labelId}}),[SelectSlot,selectSlotProps]=(0,useSlot.Z)("select",{className:classes.select,elementType:TablePaginationSelect,externalForwardedProps,ownerState}),[MenuItemSlot,menuItemSlotProps]=(0,useSlot.Z)("menuItem",{className:classes.menuItem,elementType:MenuItemComponent,externalForwardedProps,ownerState}),[DisplayedRows,displayedRowsProps]=(0,useSlot.Z)("displayedRows",{className:classes.displayedRows,elementType:TablePaginationDisplayedRows,externalForwardedProps,ownerState});return(0,jsx_runtime.jsx)(RootSlot,{...rootSlotProps,children:(0,jsx_runtime.jsxs)(ToolbarSlot,{...toolbarSlotProps,children:[(0,jsx_runtime.jsx)(SpacerSlot,{...spacerSlotProps}),rowsPerPageOptions.length>1&&(0,jsx_runtime.jsx)(SelectLabelSlot,{...selectLabelSlotProps,children:labelRowsPerPage}),rowsPerPageOptions.length>1&&(0,jsx_runtime.jsx)(SelectSlot,{variant:"standard",...!selectProps.variant&&{input:_InputBase||(_InputBase=(0,jsx_runtime.jsx)(InputBase.ZP,{}))},value:rowsPerPage,onChange:onRowsPerPageChange,id:selectId,labelId,...selectProps,classes:{...selectProps.classes,root:(0,clsx.Z)(classes.input,classes.selectRoot,(selectProps.classes||{}).root),select:(0,clsx.Z)(classes.select,(selectProps.classes||{}).select),icon:(0,clsx.Z)(classes.selectIcon,(selectProps.classes||{}).icon)},disabled,...selectSlotProps,children:rowsPerPageOptions.map((rowsPerPageOption=>(0,react.createElement)(MenuItemSlot,{...menuItemSlotProps,key:rowsPerPageOption.label?rowsPerPageOption.label:rowsPerPageOption,value:rowsPerPageOption.value?rowsPerPageOption.value:rowsPerPageOption},rowsPerPageOption.label?rowsPerPageOption.label:rowsPerPageOption)))}),(0,jsx_runtime.jsx)(DisplayedRows,{...displayedRowsProps,children:labelDisplayedRows({from:0===count?0:page*rowsPerPage+1,to:-1===count?(page+1)*rowsPerPage:-1===rowsPerPage?count:Math.min(count,(page+1)*rowsPerPage),count:-1===count?-1:count,page})}),(0,jsx_runtime.jsx)(ActionsComponent,{className:classes.actions,backIconButtonProps,count,nextIconButtonProps,onPageChange,page,rowsPerPage,showFirstButton,showLastButton,slotProps:slotProps.actions,slots:slots.actions,getItemAriaLabel,disabled})]})})})),TablePagination_TablePagination=TablePagination,GridPaginationRoot=(0,styled.ZP)(TablePagination_TablePagination)((({theme})=>({maxHeight:"calc(100% + 1px)",flexGrow:1,[`& .${TablePagination_tablePaginationClasses.selectLabel}`]:{display:"none",[theme.breakpoints.up("sm")]:{display:"block"}},[`& .${TablePagination_tablePaginationClasses.input}`]:{display:"none",[theme.breakpoints.up("sm")]:{display:"inline-flex"}}}))),GridPagination_defaultLabelDisplayedRows=({from,to,count,estimated})=>estimated?`${from}–${to} of ${-1!==count?count:`more than ${estimated>to?estimated:to}`}`:`${from}–${to} of ${-1!==count?count:`more than ${to}`}`,GridPagination=forwardRef((function GridPagination(props,ref){const apiRef=useGridApiContext(),rootProps=useGridRootProps(),paginationModel=useGridSelector(apiRef,gridPaginationModelSelector),rowCount=useGridSelector(apiRef,gridPaginationRowCountSelector),pageCount=useGridSelector(apiRef,gridPageCountSelector),{paginationMode,loading,estimatedRowCount}=rootProps,computedProps=react.useMemo((()=>-1===rowCount&&"server"===paginationMode&&loading?{backIconButtonProps:{disabled:!0},nextIconButtonProps:{disabled:!0}}:{}),[loading,paginationMode,rowCount]),lastPage=react.useMemo((()=>Math.max(0,pageCount-1)),[pageCount]),computedPage=react.useMemo((()=>-1===rowCount||paginationModel.page<=lastPage?paginationModel.page:lastPage),[lastPage,paginationModel.page,rowCount]),handlePageSizeChange=react.useCallback((event=>{const pageSize=Number(event.target.value);apiRef.current.setPageSize(pageSize)}),[apiRef]),handlePageChange=react.useCallback(((_,page)=>{apiRef.current.setPage(page)}),[apiRef]);const pageSizeOptions=(pageSize=>{for(let i=0;i<rootProps.pageSizeOptions.length;i+=1){const option=rootProps.pageSizeOptions[i];if("number"==typeof option){if(option===pageSize)return!0}else if(option.value===pageSize)return!0}return!1})(paginationModel.pageSize)?rootProps.pageSizeOptions:[],locales=apiRef.current.getLocaleText("MuiTablePagination"),wrappedLabelDisplayedRows=(labelDisplayedRows=locales.labelDisplayedRows||GridPagination_defaultLabelDisplayedRows,estimated=estimatedRowCount,({from,to,count,page})=>labelDisplayedRows({from,to,count,page,estimated}));var labelDisplayedRows,estimated;return(0,jsx_runtime.jsx)(GridPaginationRoot,(0,esm_extends.Z)({component:"div",count:rowCount,page:computedPage,rowsPerPageOptions:pageSizeOptions,rowsPerPage:paginationModel.pageSize,onPageChange:handlePageChange,onRowsPerPageChange:handlePageSizeChange},computedProps,locales,{labelDisplayedRows:wrappedLabelDisplayedRows},props,{ref}))})),GridPanelContent_excluded=["className"],GridPanelContentRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"PanelContent",overridesResolver:(props,styles)=>styles.panelContent})({display:"flex",flexDirection:"column",overflow:"auto",flex:"1 1",maxHeight:400});function GridPanelContent(props){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridPanelContent_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["panelContent"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridPanelContentRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState:rootProps},other))}const GridPanelFooter_excluded=["className"],GridPanelFooterRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"PanelFooter",overridesResolver:(props,styles)=>styles.panelFooter})((({theme})=>({padding:theme.spacing(.5),display:"flex",justifyContent:"space-between"})));function GridPanelFooter(props){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridPanelFooter_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["panelFooter"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridPanelFooterRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState:rootProps},other))}var FocusTrap=__webpack_require__("./node_modules/@mui/material/Unstable_TrapFocus/FocusTrap.js");const GridPanelWrapper_excluded=["className","slotProps"],GridPanelWrapperRoot=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"PanelWrapper",overridesResolver:(props,styles)=>styles.panelWrapper})({display:"flex",flexDirection:"column",flex:1,"&:focus":{outline:0}}),isEnabled=()=>!0,GridPanelWrapper=forwardRef((function GridPanelWrapper(props,ref){const{className,slotProps={}}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridPanelWrapper_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["panelWrapper"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(FocusTrap.Z,(0,esm_extends.Z)({open:!0,disableEnforceFocus:!0,isEnabled},slotProps.TrapFocus,{children:(0,jsx_runtime.jsx)(GridPanelWrapperRoot,(0,esm_extends.Z)({tabIndex:-1,className:(0,clsx.Z)(classes.root,className),ownerState:rootProps},other,{ref}))}))})),GridFilterForm_excluded=["item","hasMultipleFilters","deleteFilter","applyFilterChanges","showMultiFilterOperators","disableMultiFilterOperator","applyMultiFilterOperatorChanges","focusElementRef","logicOperators","columnsSort","filterColumns","deleteIconProps","logicOperatorInputProps","operatorInputProps","columnInputProps","valueInputProps","readOnly","children"],GridFilterForm_excluded2=["InputComponentProps"],GridFilterFormRoot=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterForm",overridesResolver:(props,styles)=>styles.filterForm})((({theme})=>({display:"flex",padding:theme.spacing(1)}))),FilterFormDeleteIcon=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterFormDeleteIcon",overridesResolver:(_,styles)=>styles.filterFormDeleteIcon})((({theme})=>({flexShrink:0,justifyContent:"flex-end",marginRight:theme.spacing(.5),marginBottom:theme.spacing(.2)}))),FilterFormLogicOperatorInput=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterFormLogicOperatorInput",overridesResolver:(_,styles)=>styles.filterFormLogicOperatorInput})({minWidth:55,marginRight:5,justifyContent:"end"}),FilterFormColumnInput=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterFormColumnInput",overridesResolver:(_,styles)=>styles.filterFormColumnInput})({width:150}),FilterFormOperatorInput=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterFormOperatorInput",overridesResolver:(_,styles)=>styles.filterFormOperatorInput})({width:150}),FilterFormValueInput=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterFormValueInput",overridesResolver:(_,styles)=>styles.filterFormValueInput})({width:190}),getColumnLabel=col=>col.headerName||col.field,GridFilterForm_collator=new Intl.Collator,GridFilterForm=forwardRef((function GridFilterForm(props,ref){const{item,hasMultipleFilters,deleteFilter,applyFilterChanges,showMultiFilterOperators,disableMultiFilterOperator,applyMultiFilterOperatorChanges,focusElementRef,logicOperators=[GridLogicOperator.And,GridLogicOperator.Or],columnsSort,filterColumns,deleteIconProps={},logicOperatorInputProps={},operatorInputProps={},columnInputProps={},valueInputProps={},readOnly}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterForm_excluded),apiRef=useGridApiContext(),columnLookup=useGridSelector(apiRef,gridColumnLookupSelector),filterableColumns=useGridSelector(apiRef,gridFilterableColumnDefinitionsSelector),filterModel=useGridSelector(apiRef,gridFilterModelSelector),columnSelectId=(0,useId.Z)(),columnSelectLabelId=(0,useId.Z)(),operatorSelectId=(0,useId.Z)(),operatorSelectLabelId=(0,useId.Z)(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["filterForm"],deleteIcon:["filterFormDeleteIcon"],logicOperatorInput:["filterFormLogicOperatorInput"],columnInput:["filterFormColumnInput"],operatorInput:["filterFormOperatorInput"],valueInput:["filterFormValueInput"]},getDataGridUtilityClass,classes)})(rootProps),valueRef=react.useRef(null),filterSelectorRef=react.useRef(null),multiFilterOperator=filterModel.logicOperator??GridLogicOperator.And,hasLogicOperatorColumn=hasMultipleFilters&&logicOperators.length>0,baseFormControlProps=rootProps.slotProps?.baseFormControl||{},isBaseSelectNative=(rootProps.slotProps?.baseSelect||{}).native??!1,baseInputLabelProps=rootProps.slotProps?.baseInputLabel||{},baseSelectOptionProps=rootProps.slotProps?.baseSelectOption||{},{InputComponentProps}=valueInputProps,valueInputPropsOther=(0,objectWithoutPropertiesLoose.Z)(valueInputProps,GridFilterForm_excluded2),{filteredColumns,selectedField}=react.useMemo((()=>{let itemField=item.field;const selectedNonFilterableColumn=!1===columnLookup[item.field].filterable?columnLookup[item.field]:null;if(selectedNonFilterableColumn)return{filteredColumns:[selectedNonFilterableColumn],selectedField:itemField};if(void 0===filterColumns||"function"!=typeof filterColumns)return{filteredColumns:filterableColumns,selectedField:itemField};const filteredFields=filterColumns({field:item.field,columns:filterableColumns,currentFilters:filterModel?.items||[]});return{filteredColumns:filterableColumns.filter((column=>{const isFieldIncluded=filteredFields.includes(column.field);return column.field!==item.field||isFieldIncluded||(itemField=void 0),isFieldIncluded})),selectedField:itemField}}),[filterColumns,filterModel?.items,filterableColumns,item.field,columnLookup]),sortedFilteredColumns=react.useMemo((()=>{switch(columnsSort){case"asc":return filteredColumns.sort(((a,b)=>GridFilterForm_collator.compare(getColumnLabel(a),getColumnLabel(b))));case"desc":return filteredColumns.sort(((a,b)=>-GridFilterForm_collator.compare(getColumnLabel(a),getColumnLabel(b))));default:return filteredColumns}}),[filteredColumns,columnsSort]),currentColumn=item.field?apiRef.current.getColumn(item.field):null,currentOperator=react.useMemo((()=>item.operator&&currentColumn?currentColumn.filterOperators?.find((operator=>operator.value===item.operator)):null),[item,currentColumn]),changeColumn=react.useCallback((event=>{const field=event.target.value,column=apiRef.current.getColumn(field);if(column.field===currentColumn.field)return;const newOperator=column.filterOperators.find((operator=>operator.value===item.operator))||column.filterOperators[0];let filterValue=!newOperator.InputComponent||newOperator.InputComponent!==currentOperator?.InputComponent||column.type!==currentColumn.type?void 0:item.value;if("singleSelect"===column.type&&void 0!==filterValue){const colDef=column,valueOptions=getValueOptions(colDef);Array.isArray(filterValue)?filterValue=filterValue.filter((val=>void 0!==getValueFromValueOptions(val,valueOptions,colDef?.getOptionValue))):void 0===getValueFromValueOptions(item.value,valueOptions,colDef?.getOptionValue)&&(filterValue=void 0)}applyFilterChanges((0,esm_extends.Z)({},item,{field,operator:newOperator.value,value:filterValue}))}),[apiRef,applyFilterChanges,item,currentColumn,currentOperator]),changeOperator=react.useCallback((event=>{const operator=event.target.value,newOperator=currentColumn?.filterOperators.find((op=>op.value===operator)),eraseItemValue=!newOperator?.InputComponent||newOperator?.InputComponent!==currentOperator?.InputComponent;applyFilterChanges((0,esm_extends.Z)({},item,{operator,value:eraseItemValue?void 0:item.value}))}),[applyFilterChanges,item,currentColumn,currentOperator]),changeLogicOperator=react.useCallback((event=>{const logicOperator=event.target.value===GridLogicOperator.And.toString()?GridLogicOperator.And:GridLogicOperator.Or;applyMultiFilterOperatorChanges(logicOperator)}),[applyMultiFilterOperatorChanges]);return react.useImperativeHandle(focusElementRef,(()=>({focus:()=>{currentOperator?.InputComponent?valueRef?.current?.focus():filterSelectorRef.current.focus()}})),[currentOperator]),(0,jsx_runtime.jsxs)(GridFilterFormRoot,(0,esm_extends.Z)({className:classes.root,"data-id":item.id,ownerState:rootProps},other,{ref,children:[(0,jsx_runtime.jsx)(FilterFormDeleteIcon,(0,esm_extends.Z)({variant:"standard",as:rootProps.slots.baseFormControl},baseFormControlProps,deleteIconProps,{className:(0,clsx.Z)(classes.deleteIcon,baseFormControlProps.className,deleteIconProps.className),ownerState:rootProps,children:(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({"aria-label":apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),title:apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),onClick:()=>{deleteFilter(item)},size:"small",disabled:readOnly},rootProps.slotProps?.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.filterPanelDeleteIcon,{fontSize:"small"})}))})),(0,jsx_runtime.jsx)(FilterFormLogicOperatorInput,(0,esm_extends.Z)({variant:"standard",as:rootProps.slots.baseFormControl},baseFormControlProps,logicOperatorInputProps,{sx:[hasLogicOperatorColumn?{display:"flex"}:{display:"none"},showMultiFilterOperators?{visibility:"visible"}:{visibility:"hidden"},baseFormControlProps.sx,logicOperatorInputProps.sx],className:(0,clsx.Z)(classes.logicOperatorInput,baseFormControlProps.className,logicOperatorInputProps.className),ownerState:rootProps,children:(0,jsx_runtime.jsx)(rootProps.slots.baseSelect,(0,esm_extends.Z)({inputProps:{"aria-label":apiRef.current.getLocaleText("filterPanelLogicOperator")},value:multiFilterOperator??"",onChange:changeLogicOperator,disabled:!!disableMultiFilterOperator||1===logicOperators.length,native:isBaseSelectNative},rootProps.slotProps?.baseSelect,{children:logicOperators.map((logicOperator=>(0,react.createElement)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isBaseSelectNative,key:logicOperator.toString(),value:logicOperator.toString()}),apiRef.current.getLocaleText((logicOperator=>{switch(logicOperator){case GridLogicOperator.And:return"filterPanelOperatorAnd";case GridLogicOperator.Or:return"filterPanelOperatorOr";default:throw new Error("MUI X: Invalid `logicOperator` property in the `GridFilterPanel`.")}})(logicOperator)))))}))})),(0,jsx_runtime.jsxs)(FilterFormColumnInput,(0,esm_extends.Z)({variant:"standard",as:rootProps.slots.baseFormControl},baseFormControlProps,columnInputProps,{className:(0,clsx.Z)(classes.columnInput,baseFormControlProps.className,columnInputProps.className),ownerState:rootProps,children:[(0,jsx_runtime.jsx)(rootProps.slots.baseInputLabel,(0,esm_extends.Z)({},baseInputLabelProps,{htmlFor:columnSelectId,id:columnSelectLabelId,children:apiRef.current.getLocaleText("filterPanelColumns")})),(0,jsx_runtime.jsx)(rootProps.slots.baseSelect,(0,esm_extends.Z)({labelId:columnSelectLabelId,id:columnSelectId,label:apiRef.current.getLocaleText("filterPanelColumns"),value:selectedField??"",onChange:changeColumn,native:isBaseSelectNative,disabled:readOnly},rootProps.slotProps?.baseSelect,{children:sortedFilteredColumns.map((col=>(0,react.createElement)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isBaseSelectNative,key:col.field,value:col.field}),getColumnLabel(col))))}))]})),(0,jsx_runtime.jsxs)(FilterFormOperatorInput,(0,esm_extends.Z)({variant:"standard",as:rootProps.slots.baseFormControl},baseFormControlProps,operatorInputProps,{className:(0,clsx.Z)(classes.operatorInput,baseFormControlProps.className,operatorInputProps.className),ownerState:rootProps,children:[(0,jsx_runtime.jsx)(rootProps.slots.baseInputLabel,(0,esm_extends.Z)({},baseInputLabelProps,{htmlFor:operatorSelectId,id:operatorSelectLabelId,children:apiRef.current.getLocaleText("filterPanelOperator")})),(0,jsx_runtime.jsx)(rootProps.slots.baseSelect,(0,esm_extends.Z)({labelId:operatorSelectLabelId,label:apiRef.current.getLocaleText("filterPanelOperator"),id:operatorSelectId,value:item.operator,onChange:changeOperator,native:isBaseSelectNative,inputRef:filterSelectorRef,disabled:readOnly},rootProps.slotProps?.baseSelect,{children:currentColumn?.filterOperators?.map((operator=>(0,react.createElement)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isBaseSelectNative,key:operator.value,value:operator.value}),operator.label||apiRef.current.getLocaleText(`filterOperator${(0,capitalize.Z)(operator.value)}`))))}))]})),(0,jsx_runtime.jsx)(FilterFormValueInput,(0,esm_extends.Z)({variant:"standard",as:rootProps.slots.baseFormControl},baseFormControlProps,valueInputPropsOther,{className:(0,clsx.Z)(classes.valueInput,baseFormControlProps.className,valueInputPropsOther.className),ownerState:rootProps,children:currentOperator?.InputComponent?(0,jsx_runtime.jsx)(currentOperator.InputComponent,(0,esm_extends.Z)({apiRef,item,applyValue:applyFilterChanges,focusElementRef:valueRef,disabled:readOnly},currentOperator.InputComponentProps,InputComponentProps),item.field):null}))]}))})),GridFilterPanel_excluded=["logicOperators","columnsSort","filterFormProps","getColumnForNewFilter","children","disableAddFilterButton","disableRemoveAllButton"],getGridFilter=col=>({field:col.field,operator:col.filterOperators[0].value,id:Math.round(1e5*Math.random())}),GridFilterPanel=forwardRef((function GridFilterPanel(props,ref){const apiRef=useGridApiContext(),rootProps=useGridRootProps(),filterModel=useGridSelector(apiRef,gridFilterModelSelector),filterableColumns=useGridSelector(apiRef,gridFilterableColumnDefinitionsSelector),filterableColumnsLookup=useGridSelector(apiRef,gridFilterableColumnLookupSelector),lastFilterRef=react.useRef(null),placeholderFilter=react.useRef(null),{logicOperators=[GridLogicOperator.And,GridLogicOperator.Or],columnsSort,filterFormProps,getColumnForNewFilter,disableAddFilterButton=!1,disableRemoveAllButton=!1}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterPanel_excluded),applyFilter=apiRef.current.upsertFilterItem,applyFilterLogicOperator=react.useCallback((operator=>{apiRef.current.setFilterLogicOperator(operator)}),[apiRef]),getDefaultFilter=react.useCallback((()=>{let nextColumnWithOperator;if(getColumnForNewFilter&&"function"==typeof getColumnForNewFilter){const nextFieldName=getColumnForNewFilter({currentFilters:filterModel?.items||[],columns:filterableColumns});if(null===nextFieldName)return null;nextColumnWithOperator=filterableColumns.find((({field})=>field===nextFieldName))}else nextColumnWithOperator=filterableColumns.find((colDef=>colDef.filterOperators?.length));return nextColumnWithOperator?getGridFilter(nextColumnWithOperator):null}),[filterModel?.items,filterableColumns,getColumnForNewFilter]),getNewFilter=react.useCallback((()=>{if(void 0===getColumnForNewFilter||"function"!=typeof getColumnForNewFilter)return getDefaultFilter();const currentFilters=filterModel.items.length?filterModel.items:[getDefaultFilter()].filter(Boolean),nextColumnFieldName=getColumnForNewFilter({currentFilters,columns:filterableColumns});if(null===nextColumnFieldName)return null;const nextColumnWithOperator=filterableColumns.find((({field})=>field===nextColumnFieldName));return nextColumnWithOperator?getGridFilter(nextColumnWithOperator):null}),[filterModel.items,filterableColumns,getColumnForNewFilter,getDefaultFilter]),items=react.useMemo((()=>filterModel.items.length?filterModel.items:(placeholderFilter.current||(placeholderFilter.current=getDefaultFilter()),placeholderFilter.current?[placeholderFilter.current]:[])),[filterModel.items,getDefaultFilter]),hasMultipleFilters=items.length>1,{readOnlyFilters,validFilters}=react.useMemo((()=>items.reduce(((acc,item)=>(filterableColumnsLookup[item.field]?acc.validFilters.push(item):acc.readOnlyFilters.push(item),acc)),{readOnlyFilters:[],validFilters:[]})),[items,filterableColumnsLookup]),addNewFilter=react.useCallback((()=>{const newFilter=getNewFilter();newFilter&&apiRef.current.upsertFilterItems([...items,newFilter])}),[apiRef,getNewFilter,items]),deleteFilter=react.useCallback((item=>{const shouldCloseFilterPanel=1===validFilters.length;apiRef.current.deleteFilterItem(item),shouldCloseFilterPanel&&apiRef.current.hideFilterPanel()}),[apiRef,validFilters.length]),handleRemoveAll=react.useCallback((()=>1===validFilters.length&&void 0===validFilters[0].value?(apiRef.current.deleteFilterItem(validFilters[0]),apiRef.current.hideFilterPanel()):apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items:readOnlyFilters}),"removeAllFilterItems")),[apiRef,readOnlyFilters,filterModel,validFilters]);return react.useEffect((()=>{logicOperators.length>0&&filterModel.logicOperator&&!logicOperators.includes(filterModel.logicOperator)&&applyFilterLogicOperator(logicOperators[0])}),[logicOperators,applyFilterLogicOperator,filterModel.logicOperator]),react.useEffect((()=>{validFilters.length>0&&lastFilterRef.current.focus()}),[validFilters.length]),(0,jsx_runtime.jsxs)(GridPanelWrapper,(0,esm_extends.Z)({},other,{ref,children:[(0,jsx_runtime.jsxs)(GridPanelContent,{children:[readOnlyFilters.map(((item,index)=>(0,jsx_runtime.jsx)(GridFilterForm,(0,esm_extends.Z)({item,applyFilterChanges:applyFilter,deleteFilter,hasMultipleFilters,showMultiFilterOperators:index>0,disableMultiFilterOperator:1!==index,applyMultiFilterOperatorChanges:applyFilterLogicOperator,focusElementRef:null,readOnly:!0,logicOperators,columnsSort},filterFormProps),null==item.id?index:item.id))),validFilters.map(((item,index)=>(0,jsx_runtime.jsx)(GridFilterForm,(0,esm_extends.Z)({item,applyFilterChanges:applyFilter,deleteFilter,hasMultipleFilters,showMultiFilterOperators:readOnlyFilters.length+index>0,disableMultiFilterOperator:readOnlyFilters.length+index!==1,applyMultiFilterOperatorChanges:applyFilterLogicOperator,focusElementRef:index===validFilters.length-1?lastFilterRef:null,logicOperators,columnsSort},filterFormProps),null==item.id?index+readOnlyFilters.length:item.id)))]}),rootProps.disableMultipleColumnsFiltering||disableAddFilterButton&&disableRemoveAllButton?null:(0,jsx_runtime.jsxs)(GridPanelFooter,{children:[disableAddFilterButton?(0,jsx_runtime.jsx)("span",{}):(0,jsx_runtime.jsx)(rootProps.slots.baseButton,(0,esm_extends.Z)({onClick:addNewFilter,startIcon:(0,jsx_runtime.jsx)(rootProps.slots.filterPanelAddIcon,{})},rootProps.slotProps?.baseButton,{children:apiRef.current.getLocaleText("filterPanelAddFilter")})),!disableRemoveAllButton&&validFilters.length>0?(0,jsx_runtime.jsx)(rootProps.slots.baseButton,(0,esm_extends.Z)({onClick:handleRemoveAll,startIcon:(0,jsx_runtime.jsx)(rootProps.slots.filterPanelRemoveAllIcon,{})},rootProps.slotProps?.baseButton,{children:apiRef.current.getLocaleText("filterPanelRemoveAll")})):null]})]}))}));var FormControlLabel=__webpack_require__("./node_modules/@mui/material/FormControlLabel/FormControlLabel.js"),TextField=__webpack_require__("./node_modules/@mui/material/TextField/TextField.js"),inputBaseClasses=__webpack_require__("./node_modules/@mui/material/InputBase/inputBaseClasses.js");const defaultSearchPredicate=(column,searchValue)=>(column.headerName||column.field).toLowerCase().indexOf(searchValue)>-1,GridColumnsManagement_collator=new Intl.Collator;const GridColumnsManagementBody=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"ColumnsManagement",overridesResolver:(props,styles)=>styles.columnsManagement})((({theme})=>({padding:theme.spacing(0,3,1.5),display:"flex",flexDirection:"column",overflow:"auto",flex:"1 1",maxHeight:400,alignItems:"flex-start"}))),GridColumnsManagementHeader=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"ColumnsManagementHeader",overridesResolver:(props,styles)=>styles.columnsManagementHeader})((({theme})=>({padding:theme.spacing(1.5,3)}))),SearchInput=(0,styled.ZP)(TextField.Z,{name:"MuiDataGrid",slot:"ColumnsManagementSearchInput",overridesResolver:(props,styles)=>styles.columnsManagementSearchInput})((({theme})=>({[`& .${inputBaseClasses.Z.root}`]:{padding:theme.spacing(0,1.5,0,1.5)},[`& .${inputBaseClasses.Z.input}::-webkit-search-decoration,\n  & .${inputBaseClasses.Z.input}::-webkit-search-cancel-button,\n  & .${inputBaseClasses.Z.input}::-webkit-search-results-button,\n  & .${inputBaseClasses.Z.input}::-webkit-search-results-decoration`]:{display:"none"}}))),GridColumnsManagementFooter=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"ColumnsManagementFooter",overridesResolver:(props,styles)=>styles.columnsManagementFooter})((({theme})=>({padding:theme.spacing(.5,1,.5,3),display:"flex",justifyContent:"space-between",borderTop:`1px solid ${theme.palette.divider}`}))),GridColumnsManagementEmptyText=(0,styled.ZP)("div")((({theme})=>({padding:theme.spacing(.5,0),color:theme.palette.grey[500]}))),GridPanel_excluded=["children","className","classes"],gridPanelClasses=(0,generateUtilityClasses.Z)("MuiDataGrid",["panel","paper"]),GridPanelRoot=(0,styled.ZP)(Popper.Z,{name:"MuiDataGrid",slot:"Panel",overridesResolver:(props,styles)=>styles.panel})((({theme})=>({zIndex:theme.zIndex.modal}))),GridPaperRoot=(0,styled.ZP)(Paper.Z,{name:"MuiDataGrid",slot:"Paper",overridesResolver:(props,styles)=>styles.paper})((({theme})=>({backgroundColor:(theme.vars||theme).palette.background.paper,minWidth:300,maxHeight:450,display:"flex",maxWidth:`calc(100vw - ${theme.spacing(.5)})`,overflow:"auto"}))),GridPanel=forwardRef(((props,ref)=>{const{children,className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridPanel_excluded),apiRef=useGridApiContext(),rootProps=useGridRootProps(),classes=gridPanelClasses,[isPlaced,setIsPlaced]=react.useState(!1),handleClickAway=react.useCallback((()=>{apiRef.current.hidePreferences()}),[apiRef]),handleKeyDown=react.useCallback((event=>{"Escape"===event.key&&apiRef.current.hidePreferences()}),[apiRef]),modifiers=react.useMemo((()=>[{name:"flip",enabled:!0,options:{rootBoundary:"document"}},{name:"isPlaced",enabled:!0,phase:"main",fn:()=>{setIsPlaced(!0)},effect:()=>()=>{setIsPlaced(!1)}}]),[]),[anchorEl,setAnchorEl]=react.useState(null);return react.useEffect((()=>{const panelAnchor=apiRef.current.rootElementRef?.current?.querySelector('[data-id="gridPanelAnchor"]');panelAnchor&&setAnchorEl(panelAnchor)}),[apiRef]),anchorEl?(0,jsx_runtime.jsx)(GridPanelRoot,(0,esm_extends.Z)({placement:"bottom-start",className:(0,clsx.Z)(classes.panel,className),ownerState:rootProps,anchorEl,modifiers},other,{ref,children:(0,jsx_runtime.jsx)(ClickAwayListener.d,{mouseEvent:"onPointerUp",touchEvent:!1,onClickAway:handleClickAway,children:(0,jsx_runtime.jsx)(GridPaperRoot,{className:classes.paper,ownerState:rootProps,elevation:8,onKeyDown:handleKeyDown,children:isPlaced&&children})})})):null}));const GridRow_excluded=["selected","rowId","row","index","style","rowHeight","className","visibleColumns","pinnedColumns","offsetLeft","columnsTotalWidth","firstColumnIndex","lastColumnIndex","focusedColumnIndex","isFirstVisible","isLastVisible","isNotVisible","showBottomBorder","scrollbarWidth","gridHasFiller","onClick","onDoubleClick","onMouseEnter","onMouseLeave","onMouseOut","onMouseOver"],isRowReorderingEnabledSelector=createSelectorV8(gridEditRowsStateSelector,((editRows,rowReordering)=>{if(!rowReordering)return!1;return!!function isObjectEmpty(object){for(const _ in object)return!1;return!0}(editRows)})),GridRow=forwardRef((function GridRow(props,refProp){const{selected,rowId,row,index,style:styleProp,rowHeight,className,visibleColumns,pinnedColumns,offsetLeft,columnsTotalWidth,firstColumnIndex,lastColumnIndex,focusedColumnIndex,isFirstVisible,isLastVisible,isNotVisible,showBottomBorder,scrollbarWidth,gridHasFiller,onClick,onDoubleClick,onMouseEnter,onMouseLeave,onMouseOut,onMouseOver}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridRow_excluded),apiRef=useGridPrivateApiContext(),configuration=useGridConfiguration(),ref=react.useRef(null),rootProps=useGridRootProps(),currentPage=useGridVisibleRows(apiRef),sortModel=useGridSelector(apiRef,gridSortModelSelector),treeDepth=useGridSelector(apiRef,gridRowMaximumTreeDepthSelector),columnPositions=useGridSelector(apiRef,gridColumnPositionsSelector),rowReordering=rootProps.rowReordering,isRowReorderingEnabled=useGridSelectorV8(apiRef,isRowReorderingEnabledSelector,rowReordering),handleRef=(0,useForkRef.Z)(ref,refProp),rowNode=apiRef.current.getRowNode(rowId),editing=useGridSelectorV8(apiRef,gridRowIsEditingSelector,{rowId,editMode:rootProps.editMode}),editable=rootProps.editMode===GridEditModes.Row,hasFocusCell=void 0!==focusedColumnIndex,hasVirtualFocusCellLeft=hasFocusCell&&focusedColumnIndex>=pinnedColumns.left.length&&focusedColumnIndex<firstColumnIndex,hasVirtualFocusCellRight=hasFocusCell&&focusedColumnIndex<visibleColumns.length-pinnedColumns.right.length&&focusedColumnIndex>=lastColumnIndex,classes=function composeGridClasses(classes,slots){return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)}(rootProps.classes,{root:["row",selected&&"selected",editable&&"row--editable",editing&&"row--editing",isFirstVisible&&"row--firstVisible",isLastVisible&&"row--lastVisible",showBottomBorder&&"row--borderBottom","auto"===rowHeight&&"row--dynamicHeight"]}),getRowAriaAttributes=configuration.hooks.useGridRowAriaAttributes();react.useLayoutEffect((()=>{if(currentPage.range){const rowIndex=apiRef.current.getRowIndexRelativeToVisibleRows(rowId);void 0!==rowIndex&&apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex)}if(ref.current&&"auto"===rowHeight)return apiRef.current.observeRowHeight(ref.current,rowId)}),[apiRef,currentPage.range,rowHeight,rowId]);const publish=react.useCallback(((eventName,propHandler)=>event=>{isEventTargetInPortal(event)||apiRef.current.getRow(rowId)&&(apiRef.current.publishEvent(eventName,apiRef.current.getRowParams(rowId),event),propHandler&&propHandler(event))}),[apiRef,rowId]),publishClick=react.useCallback((event=>{const cell=findParentElementFromClassName(event.target,gridClasses.cell),field=cell?.getAttribute("data-field");if(field){if(field===GRID_CHECKBOX_SELECTION_COL_DEF.field)return;if("__detail_panel_toggle__"===field)return;if("__reorder__"===field)return;if(apiRef.current.getCellMode(rowId,field)===GridCellModes.Edit)return;const column=apiRef.current.getColumn(field);if("actions"===column?.type)return}publish("rowClick",onClick)(event)}),[apiRef,onClick,publish,rowId]),{slots,slotProps,disableColumnReorder}=rootProps,heightEntry=useGridSelector(apiRef,(()=>(0,esm_extends.Z)({},apiRef.current.getRowHeightEntry(rowId))),objectShallowCompare),style=react.useMemo((()=>{if(isNotVisible)return{opacity:0,width:0,height:0};const rowStyle=(0,esm_extends.Z)({},styleProp,{maxHeight:"auto"===rowHeight?"none":rowHeight,minHeight:rowHeight,"--height":"number"==typeof rowHeight?`${rowHeight}px`:rowHeight});if(heightEntry.spacingTop){rowStyle["border"===rootProps.rowSpacingType?"borderTopWidth":"marginTop"]=heightEntry.spacingTop}if(heightEntry.spacingBottom){const property="border"===rootProps.rowSpacingType?"borderBottomWidth":"marginBottom";let propertyValue=rowStyle[property];"number"!=typeof propertyValue&&(propertyValue=parseInt(propertyValue||"0",10)),propertyValue+=heightEntry.spacingBottom,rowStyle[property]=propertyValue}return rowStyle}),[isNotVisible,rowHeight,styleProp,heightEntry,rootProps.rowSpacingType]),rowClassNames=apiRef.current.unstable_applyPipeProcessors("rowClassName",[],rowId),ariaAttributes=rowNode?getRowAriaAttributes(rowNode,index):void 0;if("function"==typeof rootProps.getRowClassName){const indexRelativeToCurrentPage=index-(currentPage.range?.firstRowIndex||0),rowParams=(0,esm_extends.Z)({},apiRef.current.getRowParams(rowId),{isFirstVisible:0===indexRelativeToCurrentPage,isLastVisible:indexRelativeToCurrentPage===currentPage.rows.length-1,indexRelativeToCurrentPage});rowClassNames.push(rootProps.getRowClassName(rowParams))}if(!rowNode)return null;const getCell=(column,indexInSection,indexRelativeToAllColumns,sectionLength,pinnedPosition=PinnedColumnPosition.NONE)=>{const cellColSpanInfo=apiRef.current.unstable_getCellColSpanInfo(rowId,indexRelativeToAllColumns);if(cellColSpanInfo?.spannedByColSpan)return null;const width=cellColSpanInfo?.cellProps.width??column.computedWidth,colSpan=cellColSpanInfo?.cellProps.colSpan??1,pinnedOffset=getPinnedCellOffset(pinnedPosition,column.computedWidth,indexRelativeToAllColumns,columnPositions,columnsTotalWidth,scrollbarWidth);if("skeletonRow"===rowNode?.type)return(0,jsx_runtime.jsx)(slots.skeletonCell,{type:column.type,width,height:rowHeight,field:column.field,align:column.align},column.field);const isReorderCell="__reorder__"===column.field,canReorderColumn=!(disableColumnReorder||column.disableReorder),canReorderRow=isRowReorderingEnabled&&!sortModel.length&&treeDepth<=1,disableDragEvents=!(canReorderColumn||isReorderCell&&canReorderRow),cellIsNotVisible=pinnedPosition===PinnedColumnPosition.VIRTUAL,showLeftBorder=shouldCellShowLeftBorder(pinnedPosition,indexInSection),showRightBorder=shouldCellShowRightBorder(pinnedPosition,indexInSection,sectionLength,rootProps.showCellVerticalBorder,gridHasFiller);return(0,jsx_runtime.jsx)(slots.cell,(0,esm_extends.Z)({column,width,rowId,align:column.align||"left",colIndex:indexRelativeToAllColumns,colSpan,disableDragEvents,isNotVisible:cellIsNotVisible,pinnedOffset,pinnedPosition,showLeftBorder,showRightBorder,row,rowNode},slotProps?.cell),column.field)},leftCells=pinnedColumns.left.map(((column,i)=>getCell(column,i,i,pinnedColumns.left.length,PinnedColumnPosition.LEFT))),rightCells=pinnedColumns.right.map(((column,i)=>{const indexRelativeToAllColumns=visibleColumns.length-pinnedColumns.right.length+i;return getCell(column,i,indexRelativeToAllColumns,pinnedColumns.right.length,PinnedColumnPosition.RIGHT)})),middleColumnsLength=visibleColumns.length-pinnedColumns.left.length-pinnedColumns.right.length,cells=[];hasVirtualFocusCellLeft&&cells.push(getCell(visibleColumns[focusedColumnIndex],focusedColumnIndex-pinnedColumns.left.length,focusedColumnIndex,middleColumnsLength,PinnedColumnPosition.VIRTUAL));for(let i=firstColumnIndex;i<lastColumnIndex;i+=1){const column=visibleColumns[i],indexInSection=i-pinnedColumns.left.length;column&&cells.push(getCell(column,indexInSection,i,middleColumnsLength))}hasVirtualFocusCellRight&&cells.push(getCell(visibleColumns[focusedColumnIndex],focusedColumnIndex-pinnedColumns.left.length,focusedColumnIndex,middleColumnsLength,PinnedColumnPosition.VIRTUAL));const eventHandlers=row?{onClick:publishClick,onDoubleClick:publish("rowDoubleClick",onDoubleClick),onMouseEnter:publish("rowMouseEnter",onMouseEnter),onMouseLeave:publish("rowMouseLeave",onMouseLeave),onMouseOut:publish("rowMouseOut",onMouseOut),onMouseOver:publish("rowMouseOver",onMouseOver)}:null;return(0,jsx_runtime.jsxs)("div",(0,esm_extends.Z)({"data-id":rowId,"data-rowindex":index,role:"row",className:(0,clsx.Z)(...rowClassNames,classes.root,className),style},ariaAttributes,eventHandlers,other,{ref:handleRef,children:[leftCells,(0,jsx_runtime.jsx)("div",{role:"presentation",className:gridClasses.cellOffsetLeft,style:{width:offsetLeft}}),cells,(0,jsx_runtime.jsx)("div",{role:"presentation",className:(0,clsx.Z)(gridClasses.cell,gridClasses.cellEmpty)}),rightCells,0!==scrollbarWidth&&(0,jsx_runtime.jsx)(GridScrollbarFillerCell,{pinnedRight:pinnedColumns.right.length>0,borderTop:!isFirstVisible})]}))})),MemoizedGridRow=fastMemo(GridRow);let cachedSupportsPreventScroll;const GridCell_excluded=["column","row","rowId","rowNode","align","children","colIndex","width","className","style","colSpan","disableDragEvents","isNotVisible","pinnedOffset","pinnedPosition","showRightBorder","showLeftBorder","onClick","onDoubleClick","onMouseDown","onMouseUp","onMouseOver","onKeyDown","onKeyUp","onDragEnter","onDragOver"],GridCell_excluded2=["changeReason","unstable_updateValueOnRender"];PinnedColumnPosition.LEFT,GridPinnedColumnPosition.LEFT,PinnedColumnPosition.RIGHT,GridPinnedColumnPosition.RIGHT,PinnedColumnPosition.NONE,PinnedColumnPosition.VIRTUAL;const GridCell=forwardRef((function GridCell(props,ref){const{column,row,rowId,rowNode,align,colIndex,width,className,style:styleProp,colSpan,disableDragEvents,isNotVisible,pinnedOffset,pinnedPosition,showRightBorder,showLeftBorder,onClick,onDoubleClick,onMouseDown,onMouseUp,onMouseOver,onKeyDown,onKeyUp,onDragEnter,onDragOver}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridCell_excluded),apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),isRtl=(0,RtlProvider.V)(),field=column.field,editCellState=useGridSelectorV8(apiRef,gridEditCellStateSelector,{rowId,field}),cellMode=editCellState?GridCellModes.Edit:GridCellModes.View,cellParams=apiRef.current.getCellParamsForRow(rowId,field,row,{colDef:column,cellMode,rowNode,tabIndex:useGridSelector(apiRef,(()=>{const cellTabIndex=gridTabIndexCellSelector(apiRef);return cellTabIndex&&cellTabIndex.field===field&&cellTabIndex.id===rowId?0:-1})),hasFocus:useGridSelector(apiRef,(()=>{const focus=gridFocusCellSelector(apiRef);return focus?.id===rowId&&focus.field===field}))});cellParams.api=apiRef.current;const isSelected=useGridSelector(apiRef,(()=>apiRef.current.unstable_applyPipeProcessors("isCellSelected",!1,{id:rowId,field}))),hiddenCells=useGridSelector(apiRef,gridRowSpanningHiddenCellsSelector),spannedCells=useGridSelector(apiRef,gridRowSpanningSpannedCellsSelector),{hasFocus,isEditable=!1,value}=cellParams,canManageOwnFocus="actions"===column.type&&column.getActions?.(apiRef.current.getRowParams(rowId)).some((action=>!action.props.disabled)),tabIndex="view"!==cellMode&&isEditable||canManageOwnFocus?-1:cellParams.tabIndex,{classes:rootClasses,getCellClassName}=rootProps,classNames=[useGridSelector(apiRef,(()=>apiRef.current.unstable_applyPipeProcessors("cellClassName",[],{id:rowId,field}).filter(Boolean).join(" ")))];column.cellClassName&&classNames.push("function"==typeof column.cellClassName?column.cellClassName(cellParams):column.cellClassName),"flex"===column.display&&classNames.push(gridClasses["cell--flex"]),getCellClassName&&classNames.push(getCellClassName(cellParams));const valueToRender=cellParams.formattedValue??value,cellRef=react.useRef(null),handleRef=(0,useForkRef.Z)(ref,cellRef),focusElementRef=react.useRef(null),isSelectionMode=rootProps.cellSelection??!1,classes=(ownerState=>{const{align,showLeftBorder,showRightBorder,pinnedPosition,isEditable,isSelected,isSelectionMode,classes}=ownerState,slots={root:["cell",`cell--text${(0,capitalize.Z)(align)}`,isSelected&&"selected",isEditable&&"cell--editable",showLeftBorder&&"cell--withLeftBorder",showRightBorder&&"cell--withRightBorder",pinnedPosition===PinnedColumnPosition.LEFT&&"cell--pinnedLeft",pinnedPosition===PinnedColumnPosition.RIGHT&&"cell--pinnedRight",isSelectionMode&&!isEditable&&"cell--selectionMode"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})({align,showLeftBorder,showRightBorder,isEditable,classes:rootProps.classes,pinnedPosition,isSelected,isSelectionMode}),publishMouseUp=react.useCallback((eventName=>event=>{const params=apiRef.current.getCellParams(rowId,field||"");apiRef.current.publishEvent(eventName,params,event),onMouseUp&&onMouseUp(event)}),[apiRef,field,onMouseUp,rowId]),publishMouseDown=react.useCallback((eventName=>event=>{const params=apiRef.current.getCellParams(rowId,field||"");apiRef.current.publishEvent(eventName,params,event),onMouseDown&&onMouseDown(event)}),[apiRef,field,onMouseDown,rowId]),publish=react.useCallback(((eventName,propHandler)=>event=>{if(!apiRef.current.getRow(rowId))return;const params=apiRef.current.getCellParams(rowId,field||"");apiRef.current.publishEvent(eventName,params,event),propHandler&&propHandler(event)}),[apiRef,field,rowId]),isCellRowSpanned=hiddenCells[rowId]?.[field]??!1,rowSpan=spannedCells[rowId]?.[field]??1,style=react.useMemo((()=>{if(isNotVisible)return{padding:0,opacity:0,width:0,height:0,border:0};const cellStyle=attachPinnedStyle((0,esm_extends.Z)({"--width":`${width}px`},styleProp),isRtl,pinnedPosition,pinnedOffset),isLeftPinned=pinnedPosition===PinnedColumnPosition.LEFT,isRightPinned=pinnedPosition===PinnedColumnPosition.RIGHT;return rowSpan>1&&(cellStyle.height=`calc(var(--height) * ${rowSpan})`,cellStyle.zIndex=5,(isLeftPinned||isRightPinned)&&(cellStyle.zIndex=6)),cellStyle}),[width,isNotVisible,styleProp,pinnedOffset,pinnedPosition,isRtl,rowSpan]);if(react.useEffect((()=>{if(!hasFocus||cellMode===GridCellModes.Edit)return;const doc=(0,ownerDocument.Z)(apiRef.current.rootElementRef.current);if(cellRef.current&&!cellRef.current.contains(doc.activeElement)){const focusableElement=cellRef.current.querySelector('[tabindex="0"]'),elementToFocus=focusElementRef.current||focusableElement||cellRef.current;if(function doesSupportPreventScroll(){return void 0===cachedSupportsPreventScroll&&document.createElement("div").focus({get preventScroll(){return cachedSupportsPreventScroll=!0,!1}}),cachedSupportsPreventScroll}())elementToFocus.focus({preventScroll:!0});else{const scrollPosition=apiRef.current.getScrollPosition();elementToFocus.focus(),apiRef.current.scroll(scrollPosition)}}}),[hasFocus,cellMode,apiRef]),isCellRowSpanned)return(0,jsx_runtime.jsx)("div",{"data-colindex":colIndex,role:"presentation",style:(0,esm_extends.Z)({width:"var(--width)"},style)});let children,title,handleFocus=other.onFocus;if(null===editCellState&&column.renderCell&&(children=column.renderCell(cellParams)),null!==editCellState&&column.renderEditCell){const updatedRow=apiRef.current.getRowWithUpdatedValues(rowId,column.field),editCellStateRest=(0,objectWithoutPropertiesLoose.Z)(editCellState,GridCell_excluded2),formattedValue=column.valueFormatter?column.valueFormatter(editCellState.value,updatedRow,column,apiRef):cellParams.formattedValue,params=(0,esm_extends.Z)({},cellParams,{row:updatedRow,formattedValue},editCellStateRest);children=column.renderEditCell(params),classNames.push(gridClasses["cell--editing"]),classNames.push(rootClasses?.["cell--editing"])}if(void 0===children){const valueString=valueToRender?.toString();children=valueString,title=valueString}react.isValidElement(children)&&canManageOwnFocus&&(children=react.cloneElement(children,{focusElementRef}));const draggableEventHandlers=disableDragEvents?null:{onDragEnter:publish("cellDragEnter",onDragEnter),onDragOver:publish("cellDragOver",onDragOver)};return(0,jsx_runtime.jsx)("div",(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,classNames,className),role:"gridcell","data-field":field,"data-colindex":colIndex,"aria-colindex":colIndex+1,"aria-colspan":colSpan,"aria-rowspan":rowSpan,style,title,tabIndex,onClick:publish("cellClick",onClick),onDoubleClick:publish("cellDoubleClick",onDoubleClick),onMouseOver:publish("cellMouseOver",onMouseOver),onMouseDown:publishMouseDown("cellMouseDown"),onMouseUp:publishMouseUp("cellMouseUp"),onKeyDown:publish("cellKeyDown",onKeyDown),onKeyUp:publish("cellKeyUp",onKeyUp)},draggableEventHandlers,other,{onFocus:handleFocus,ref:handleRef,children}))})),MemoizedGridCell=fastMemo(GridCell),ColumnHeaderMenuIcon=react.memo((props=>{const{colDef,open,columnMenuId,columnMenuButtonId,iconButtonRef}=props,apiRef=useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes,open}=ownerState,slots={root:["menuIcon",open&&"menuOpen"],button:["menuIconButton"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})((0,esm_extends.Z)({},props,{classes:rootProps.classes})),handleMenuIconClick=react.useCallback((event=>{event.preventDefault(),event.stopPropagation(),apiRef.current.toggleColumnMenu(colDef.field)}),[apiRef,colDef.field]);return(0,jsx_runtime.jsx)("div",{className:classes.root,children:(0,jsx_runtime.jsx)(rootProps.slots.baseTooltip,(0,esm_extends.Z)({title:apiRef.current.getLocaleText("columnMenuLabel"),enterDelay:1e3},rootProps.slotProps?.baseTooltip,{children:(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({ref:iconButtonRef,tabIndex:-1,className:classes.button,"aria-label":apiRef.current.getLocaleText("columnMenuLabel"),size:"small",onClick:handleMenuIconClick,"aria-haspopup":"menu","aria-expanded":open,"aria-controls":open?columnMenuId:void 0,id:columnMenuButtonId},rootProps.slotProps?.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuIcon,{fontSize:"inherit"})}))}))})}));function GridColumnHeaderMenu({columnMenuId,columnMenuButtonId,ContentComponent,contentComponentProps,field,open,target,onExited}){const apiRef=useGridApiContext(),colDef=apiRef.current.getColumn(field),hideMenu=(0,useEventCallback.Z)((event=>{event&&(event.stopPropagation(),target?.contains(event.target))||apiRef.current.hideColumnMenu()}));return target&&colDef?(0,jsx_runtime.jsx)(GridMenu,{placement:"bottom-"+("right"===colDef.align?"start":"end"),open,target,onClose:hideMenu,onExited,children:(0,jsx_runtime.jsx)(ContentComponent,(0,esm_extends.Z)({colDef,hideMenu,open,id:columnMenuId,labelledby:columnMenuButtonId},contentComponentProps))}):null}const GridColumnHeaderTitle_excluded=["className","aria-label"],GridColumnHeaderTitleRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"ColumnHeaderTitle",overridesResolver:(props,styles)=>styles.columnHeaderTitle})({textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap",fontWeight:"var(--unstable_DataGrid-headWeight)",lineHeight:"normal"}),ColumnHeaderInnerTitle=forwardRef((function ColumnHeaderInnerTitle(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnHeaderTitle_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["columnHeaderTitle"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridColumnHeaderTitleRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState:rootProps},other,{ref}))}));function GridColumnHeaderTitle(props){const{label,description}=props,rootProps=useGridRootProps(),titleRef=react.useRef(null),[tooltip,setTooltip]=react.useState(""),handleMouseOver=react.useCallback((()=>{if(!description&&titleRef?.current){const isOver=function isOverflown(element){return element.scrollHeight>element.clientHeight||element.scrollWidth>element.clientWidth}(titleRef.current);setTooltip(isOver?label:"")}}),[description,label]);return(0,jsx_runtime.jsx)(rootProps.slots.baseTooltip,(0,esm_extends.Z)({title:description||tooltip},rootProps.slotProps?.baseTooltip,{children:(0,jsx_runtime.jsx)(ColumnHeaderInnerTitle,{onMouseOver:handleMouseOver,ref:titleRef,children:label})}))}const GridColumnHeaderSeparator_excluded=["resizable","resizing","height","side"];var GridColumnHeaderSeparatorSides=function(GridColumnHeaderSeparatorSides){return GridColumnHeaderSeparatorSides.Left="left",GridColumnHeaderSeparatorSides.Right="right",GridColumnHeaderSeparatorSides}(GridColumnHeaderSeparatorSides||{});function GridColumnHeaderSeparatorRaw(props){const{height,side=GridColumnHeaderSeparatorSides.Right}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnHeaderSeparator_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{resizable,resizing,classes,side}=ownerState,slots={root:["columnSeparator",resizable&&"columnSeparator--resizable",resizing&&"columnSeparator--resizing",side&&`columnSeparator--side${(0,capitalize.Z)(side)}`],icon:["iconSeparator"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})((0,esm_extends.Z)({},props,{side,classes:rootProps.classes})),stopClick=react.useCallback((event=>{event.preventDefault(),event.stopPropagation()}),[]);return(0,jsx_runtime.jsx)("div",(0,esm_extends.Z)({className:classes.root,style:{minHeight:height}},other,{onClick:stopClick,children:(0,jsx_runtime.jsx)(rootProps.slots.columnResizeIcon,{className:classes.icon})}))}const GridColumnHeaderSeparator=react.memo(GridColumnHeaderSeparatorRaw),GridGenericColumnHeaderItem_excluded=["classes","columnMenuOpen","colIndex","height","isResizing","sortDirection","hasFocus","tabIndex","separatorSide","isDraggable","headerComponent","description","elementId","width","columnMenuIconButton","columnMenu","columnTitleIconButtons","headerClassName","label","resizable","draggableContainerProps","columnHeaderSeparatorProps","style"],GridGenericColumnHeaderItem=forwardRef((function GridGenericColumnHeaderItem(props,ref){const{classes,colIndex,height,isResizing,sortDirection,hasFocus,tabIndex,separatorSide,isDraggable,headerComponent,description,width,columnMenuIconButton=null,columnMenu=null,columnTitleIconButtons=null,headerClassName,label,resizable,draggableContainerProps,columnHeaderSeparatorProps,style}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridGenericColumnHeaderItem_excluded),apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),headerCellRef=react.useRef(null),handleRef=(0,useForkRef.Z)(headerCellRef,ref);let ariaSort="none";return null!=sortDirection&&(ariaSort="asc"===sortDirection?"ascending":"descending"),react.useLayoutEffect((()=>{const columnMenuState=apiRef.current.state.columnMenu;if(hasFocus&&!columnMenuState.open){const elementToFocus=headerCellRef.current.querySelector('[tabindex="0"]')||headerCellRef.current;elementToFocus?.focus(),apiRef.current.columnHeadersContainerRef?.current&&(apiRef.current.columnHeadersContainerRef.current.scrollLeft=0)}}),[apiRef,hasFocus]),(0,jsx_runtime.jsxs)("div",(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,headerClassName),style:(0,esm_extends.Z)({},style,{height,width}),role:"columnheader",tabIndex,"aria-colindex":colIndex+1,"aria-sort":ariaSort},other,{ref:handleRef,children:[(0,jsx_runtime.jsxs)("div",(0,esm_extends.Z)({className:classes.draggableContainer,draggable:isDraggable,role:"presentation"},draggableContainerProps,{children:[(0,jsx_runtime.jsxs)("div",{className:classes.titleContainer,role:"presentation",children:[(0,jsx_runtime.jsx)("div",{className:classes.titleContainerContent,children:void 0!==headerComponent?headerComponent:(0,jsx_runtime.jsx)(GridColumnHeaderTitle,{label,description,columnWidth:width})}),columnTitleIconButtons]}),columnMenuIconButton]})),(0,jsx_runtime.jsx)(GridColumnHeaderSeparator,(0,esm_extends.Z)({resizable:!rootProps.disableColumnResize&&!!resizable,resizing:isResizing,height,side:separatorSide},columnHeaderSeparatorProps)),columnMenu]}))}));const GridColumnHeaderItem_Memoized=fastMemo((function GridColumnHeaderItem(props){const{colDef,columnMenuOpen,colIndex,headerHeight,isResizing,isLast,sortDirection,sortIndex,filterItemsCounter,hasFocus,tabIndex,disableReorder,separatorSide,showLeftBorder,showRightBorder,pinnedPosition,pinnedOffset}=props,apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),isRtl=(0,RtlProvider.V)(),headerCellRef=react.useRef(null),columnMenuId=(0,useId.Z)(),columnMenuButtonId=(0,useId.Z)(),iconButtonRef=react.useRef(null),[showColumnMenuIcon,setShowColumnMenuIcon]=react.useState(columnMenuOpen),isDraggable=react.useMemo((()=>!rootProps.disableColumnReorder&&!disableReorder&&!colDef.disableReorder),[rootProps.disableColumnReorder,disableReorder,colDef.disableReorder]);let headerComponent;colDef.renderHeader&&(headerComponent=colDef.renderHeader(apiRef.current.getColumnHeaderParams(colDef.field)));const classes=(ownerState=>{const{colDef,classes,isDragging,sortDirection,showRightBorder,showLeftBorder,filterItemsCounter,pinnedPosition,isLastUnpinned,isSiblingFocused}=ownerState,isColumnSorted=null!=sortDirection,isColumnFiltered=null!=filterItemsCounter&&filterItemsCounter>0,isColumnNumeric="number"===colDef.type,slots={root:["columnHeader","left"===colDef.headerAlign&&"columnHeader--alignLeft","center"===colDef.headerAlign&&"columnHeader--alignCenter","right"===colDef.headerAlign&&"columnHeader--alignRight",colDef.sortable&&"columnHeader--sortable",isDragging&&"columnHeader--moving",isColumnSorted&&"columnHeader--sorted",isColumnFiltered&&"columnHeader--filtered",isColumnNumeric&&"columnHeader--numeric","withBorderColor",showRightBorder&&"columnHeader--withRightBorder",showLeftBorder&&"columnHeader--withLeftBorder",pinnedPosition===PinnedColumnPosition.LEFT&&"columnHeader--pinnedLeft",pinnedPosition===PinnedColumnPosition.RIGHT&&"columnHeader--pinnedRight",isLastUnpinned&&"columnHeader--lastUnpinned",isSiblingFocused&&"columnHeader--siblingFocused"],draggableContainer:["columnHeaderDraggableContainer"],titleContainer:["columnHeaderTitleContainer"],titleContainerContent:["columnHeaderTitleContainerContent"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})((0,esm_extends.Z)({},props,{classes:rootProps.classes,showRightBorder,showLeftBorder})),publish=react.useCallback((eventName=>event=>{isEventTargetInPortal(event)||apiRef.current.publishEvent(eventName,apiRef.current.getColumnHeaderParams(colDef.field),event)}),[apiRef,colDef.field]),mouseEventsHandlers=react.useMemo((()=>({onClick:publish("columnHeaderClick"),onContextMenu:publish("columnHeaderContextMenu"),onDoubleClick:publish("columnHeaderDoubleClick"),onMouseOver:publish("columnHeaderOver"),onMouseOut:publish("columnHeaderOut"),onMouseEnter:publish("columnHeaderEnter"),onMouseLeave:publish("columnHeaderLeave"),onKeyDown:publish("columnHeaderKeyDown"),onFocus:publish("columnHeaderFocus"),onBlur:publish("columnHeaderBlur")})),[publish]),draggableEventHandlers=react.useMemo((()=>isDraggable?{onDragStart:publish("columnHeaderDragStart"),onDragEnter:publish("columnHeaderDragEnter"),onDragOver:publish("columnHeaderDragOver"),onDragEnd:publish("columnHeaderDragEnd")}:{}),[isDraggable,publish]),columnHeaderSeparatorProps=react.useMemo((()=>({onMouseDown:publish("columnSeparatorMouseDown"),onDoubleClick:publish("columnSeparatorDoubleClick")})),[publish]);react.useEffect((()=>{showColumnMenuIcon||setShowColumnMenuIcon(columnMenuOpen)}),[showColumnMenuIcon,columnMenuOpen]);const handleExited=react.useCallback((()=>{setShowColumnMenuIcon(!1)}),[]),columnMenuIconButton=!rootProps.disableColumnMenu&&!colDef.disableColumnMenu&&(0,jsx_runtime.jsx)(ColumnHeaderMenuIcon,{colDef,columnMenuId,columnMenuButtonId,open:showColumnMenuIcon,iconButtonRef}),columnMenu=(0,jsx_runtime.jsx)(GridColumnHeaderMenu,{columnMenuId,columnMenuButtonId,field:colDef.field,open:columnMenuOpen,target:iconButtonRef.current,ContentComponent:rootProps.slots.columnMenu,contentComponentProps:rootProps.slotProps?.columnMenu,onExited:handleExited}),sortingOrder=colDef.sortingOrder??rootProps.sortingOrder,showSortIcon=(colDef.sortable||null!=sortDirection)&&!colDef.hideSortIcons&&!rootProps.disableColumnSorting,columnTitleIconButtons=(0,jsx_runtime.jsxs)(react.Fragment,{children:[!rootProps.disableColumnFilter&&(0,jsx_runtime.jsx)(rootProps.slots.columnHeaderFilterIconButton,(0,esm_extends.Z)({field:colDef.field,counter:filterItemsCounter},rootProps.slotProps?.columnHeaderFilterIconButton)),showSortIcon&&(0,jsx_runtime.jsx)(rootProps.slots.columnHeaderSortIcon,(0,esm_extends.Z)({field:colDef.field,direction:sortDirection,index:sortIndex,sortingOrder,disabled:!colDef.sortable},rootProps.slotProps?.columnHeaderSortIcon))]});react.useLayoutEffect((()=>{const columnMenuState=apiRef.current.state.columnMenu;if(hasFocus&&!columnMenuState.open){const elementToFocus=headerCellRef.current.querySelector('[tabindex="0"]')||headerCellRef.current;elementToFocus?.focus(),apiRef.current.columnHeadersContainerRef?.current&&(apiRef.current.columnHeadersContainerRef.current.scrollLeft=0)}}),[apiRef,hasFocus]);const headerClassName="function"==typeof colDef.headerClassName?colDef.headerClassName({field:colDef.field,colDef}):colDef.headerClassName,label=colDef.headerName??colDef.field,style=react.useMemo((()=>attachPinnedStyle((0,esm_extends.Z)({},props.style),isRtl,pinnedPosition,pinnedOffset)),[pinnedPosition,pinnedOffset,props.style,isRtl]);return(0,jsx_runtime.jsx)(GridGenericColumnHeaderItem,(0,esm_extends.Z)({ref:headerCellRef,classes,columnMenuOpen,colIndex,height:headerHeight,isResizing,sortDirection,hasFocus,tabIndex,separatorSide,isDraggable,headerComponent,description:colDef.description,elementId:colDef.field,width:colDef.computedWidth,columnMenuIconButton,columnTitleIconButtons,headerClassName:(0,clsx.Z)(headerClassName,isLast&&gridClasses["columnHeader--last"]),label,resizable:!rootProps.disableColumnResize&&!!colDef.resizable,"data-field":colDef.field,columnMenu,draggableContainerProps:draggableEventHandlers,columnHeaderSeparatorProps,style},mouseEventsHandlers))}));function GridColumnGroupHeader(props){const{groupId,width,depth,maxDepth,fields,height,colIndex,hasFocus,tabIndex,isLastColumn,pinnedPosition,pinnedOffset}=props,rootProps=useGridRootProps(),isRtl=(0,RtlProvider.V)(),headerCellRef=react.useRef(null),apiRef=useGridApiContext(),columnGroupsLookup=useGridSelector(apiRef,gridColumnGroupsLookupSelector),group=groupId?columnGroupsLookup[groupId]:{},{headerName=groupId??"",description="",headerAlign}=group;let headerComponent;const render=groupId&&columnGroupsLookup[groupId]?.renderHeaderGroup,renderParams=react.useMemo((()=>({groupId,headerName,description,depth,maxDepth,fields,colIndex,isLastColumn})),[groupId,headerName,description,depth,maxDepth,fields,colIndex,isLastColumn]);groupId&&render&&(headerComponent=render(renderParams));const ownerState=(0,esm_extends.Z)({},props,{classes:rootProps.classes,headerAlign,depth,isDragging:!1}),label=headerName??groupId,id=(0,useId.Z)(),elementId=null===groupId?`empty-group-cell-${id}`:groupId,classes=(ownerState=>{const{classes,headerAlign,isDragging,isLastColumn,showLeftBorder,showRightBorder,groupId,pinnedPosition}=ownerState,slots={root:["columnHeader","left"===headerAlign&&"columnHeader--alignLeft","center"===headerAlign&&"columnHeader--alignCenter","right"===headerAlign&&"columnHeader--alignRight",isDragging&&"columnHeader--moving",showRightBorder&&"columnHeader--withRightBorder",showLeftBorder&&"columnHeader--withLeftBorder","withBorderColor",null===groupId?"columnHeader--emptyGroup":"columnHeader--filledGroup",pinnedPosition===PinnedColumnPosition.LEFT&&"columnHeader--pinnedLeft",pinnedPosition===PinnedColumnPosition.RIGHT&&"columnHeader--pinnedRight",isLastColumn&&"columnHeader--last"],draggableContainer:["columnHeaderDraggableContainer"],titleContainer:["columnHeaderTitleContainer","withBorderColor"],titleContainerContent:["columnHeaderTitleContainerContent"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(ownerState);react.useLayoutEffect((()=>{if(hasFocus){const elementToFocus=headerCellRef.current.querySelector('[tabindex="0"]')||headerCellRef.current;elementToFocus?.focus()}}),[apiRef,hasFocus]);const publish=react.useCallback((eventName=>event=>{isEventTargetInPortal(event)||apiRef.current.publishEvent(eventName,renderParams,event)}),[apiRef,renderParams]),mouseEventsHandlers=react.useMemo((()=>({onKeyDown:publish("columnGroupHeaderKeyDown"),onFocus:publish("columnGroupHeaderFocus"),onBlur:publish("columnGroupHeaderBlur")})),[publish]),headerClassName="function"==typeof group.headerClassName?group.headerClassName(renderParams):group.headerClassName,style=react.useMemo((()=>attachPinnedStyle((0,esm_extends.Z)({},props.style),isRtl,pinnedPosition,pinnedOffset)),[pinnedPosition,pinnedOffset,props.style,isRtl]);return(0,jsx_runtime.jsx)(GridGenericColumnHeaderItem,(0,esm_extends.Z)({ref:headerCellRef,classes,columnMenuOpen:!1,colIndex,height,isResizing:!1,sortDirection:null,hasFocus:!1,tabIndex,isDraggable:!1,headerComponent,headerClassName,description,elementId,width,columnMenuIconButton:null,columnTitleIconButtons:null,resizable:!1,label,"aria-colspan":fields.length,"data-fields":`|-${fields.join("-|-")}-|`,style},mouseEventsHandlers))}const GridColumnHeaderRow=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"ColumnHeaderRow",overridesResolver:(_,styles)=>styles.columnHeaderRow})({display:"flex"}),GridBaseColumnHeaders_excluded=["className"],GridColumnHeadersRoot=(0,styled_styled.Z)("div",{name:"MuiDataGrid",slot:"ColumnHeaders",overridesResolver:(props,styles)=>styles.columnHeaders})({display:"flex",flexDirection:"column",borderTopLeftRadius:"var(--unstable_DataGrid-radius)",borderTopRightRadius:"var(--unstable_DataGrid-radius)"}),GridBaseColumnHeaders=forwardRef((function GridColumnHeaders(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridBaseColumnHeaders_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["columnHeaders"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridColumnHeadersRoot,(0,esm_extends.Z)({className:(0,clsx.Z)(classes.root,className),ownerState:rootProps},other,{role:"presentation",ref}))})),GridColumnHeaders_excluded=["className","visibleColumns","sortColumnLookup","filterColumnLookup","columnHeaderTabIndexState","columnGroupHeaderTabIndexState","columnHeaderFocus","columnGroupHeaderFocus","headerGroupingMaxDepth","columnMenuState","columnVisibility","columnGroupsHeaderStructure","hasOtherElementInTabSequence"],MemoizedGridColumnHeaders=fastMemo(forwardRef((function GridColumnHeaders(props,ref){const{visibleColumns,sortColumnLookup,filterColumnLookup,columnHeaderTabIndexState,columnGroupHeaderTabIndexState,columnHeaderFocus,columnGroupHeaderFocus,headerGroupingMaxDepth,columnMenuState,columnVisibility,columnGroupsHeaderStructure,hasOtherElementInTabSequence}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnHeaders_excluded),{getInnerProps,getColumnHeadersRow,getColumnGroupHeadersRows}=(props=>{const{visibleColumns,sortColumnLookup,filterColumnLookup,columnHeaderTabIndexState,columnGroupHeaderTabIndexState,columnHeaderFocus,columnGroupHeaderFocus,headerGroupingMaxDepth,columnMenuState,columnVisibility,columnGroupsHeaderStructure,hasOtherElementInTabSequence}=props,[dragCol,setDragCol]=react.useState(""),[resizeCol,setResizeCol]=react.useState(""),apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),columnGroupsModel=useGridSelector(apiRef,gridColumnGroupsUnwrappedModelSelector),columnPositions=useGridSelector(apiRef,gridColumnPositionsSelector),renderContext=useGridSelector(apiRef,gridRenderContextColumnsSelector),pinnedColumns=useGridSelector(apiRef,gridVisiblePinnedColumnDefinitionsSelector),columnsLookup=useGridSelector(apiRef,gridColumnLookupSelector),offsetLeft=computeOffsetLeft(columnPositions,renderContext,pinnedColumns.left.length),columnsTotalWidth=useGridSelector(apiRef,gridColumnsTotalWidthSelector),gridHasFiller=useGridSelector(apiRef,gridHasFillerSelector),headerHeight=useGridSelector(apiRef,gridHeaderHeightSelector),groupHeaderHeight=useGridSelector(apiRef,gridGroupHeaderHeightSelector),scrollbarWidth=useGridSelector(apiRef,gridVerticalScrollbarWidthSelector),handleColumnResizeStart=react.useCallback((params=>setResizeCol(params.field)),[]),handleColumnResizeStop=react.useCallback((()=>setResizeCol("")),[]),handleColumnReorderStart=react.useCallback((params=>setDragCol(params.field)),[]),handleColumnReorderStop=react.useCallback((()=>setDragCol("")),[]),leftRenderContext=react.useMemo((()=>pinnedColumns.left.length?{firstColumnIndex:0,lastColumnIndex:pinnedColumns.left.length}:null),[pinnedColumns.left.length]),rightRenderContext=react.useMemo((()=>pinnedColumns.right.length?{firstColumnIndex:visibleColumns.length-pinnedColumns.right.length,lastColumnIndex:visibleColumns.length}:null),[pinnedColumns.right.length,visibleColumns.length]);useGridApiEventHandler(apiRef,"columnResizeStart",handleColumnResizeStart),useGridApiEventHandler(apiRef,"columnResizeStop",handleColumnResizeStop),useGridApiEventHandler(apiRef,"columnHeaderDragStart",handleColumnReorderStart),useGridApiEventHandler(apiRef,"columnHeaderDragEnd",handleColumnReorderStop);const getColumnsToRender=params=>{const{renderContext:currentContext=renderContext}=params||{},firstColumnToRender=currentContext.firstColumnIndex,lastColumnToRender=currentContext.lastColumnIndex;return{renderedColumns:visibleColumns.slice(firstColumnToRender,lastColumnToRender),firstColumnToRender,lastColumnToRender}},getFillers=(params,children,leftOverflow,borderBottom=!1)=>{const isPinnedRight=params?.position===PinnedColumnPosition.RIGHT,isNotPinned=void 0===params?.position,hasScrollbarFiller=pinnedColumns.right.length>0&&isPinnedRight||0===pinnedColumns.right.length&&isNotPinned,leftOffsetWidth=offsetLeft-leftOverflow;return(0,jsx_runtime.jsxs)(react.Fragment,{children:[isNotPinned&&(0,jsx_runtime.jsx)("div",{role:"presentation",style:{width:leftOffsetWidth}}),children,isNotPinned&&(0,jsx_runtime.jsx)("div",{role:"presentation",className:(0,clsx.Z)(gridClasses.filler,borderBottom&&gridClasses["filler--borderBottom"])}),hasScrollbarFiller&&(0,jsx_runtime.jsx)(GridScrollbarFillerCell,{header:!0,pinnedRight:isPinnedRight,borderBottom,borderTop:!1})]})},getColumnHeaders=(params,other={})=>{const{renderedColumns,firstColumnToRender}=getColumnsToRender(params),columns=[];for(let i=0;i<renderedColumns.length;i+=1){const colDef=renderedColumns[i],columnIndex=firstColumnToRender+i,isFirstColumn=0===columnIndex,tabIndex=null!==columnHeaderTabIndexState&&columnHeaderTabIndexState.field===colDef.field||isFirstColumn&&!hasOtherElementInTabSequence?0:-1,hasFocus=null!==columnHeaderFocus&&columnHeaderFocus.field===colDef.field,open=columnMenuState.open&&columnMenuState.field===colDef.field,pinnedPosition=params?.position,pinnedOffset=getPinnedCellOffset(pinnedPosition,colDef.computedWidth,columnIndex,columnPositions,columnsTotalWidth,scrollbarWidth),siblingWithBorderingSeparator=pinnedPosition===PinnedColumnPosition.RIGHT?renderedColumns[i-1]:renderedColumns[i+1],isSiblingFocused=!!siblingWithBorderingSeparator&&null!==columnHeaderFocus&&columnHeaderFocus.field===siblingWithBorderingSeparator.field,isLastUnpinned=columnIndex+1===columnPositions.length-pinnedColumns.right.length,indexInSection=i,sectionLength=renderedColumns.length,showLeftBorder=shouldCellShowLeftBorder(pinnedPosition,indexInSection),showRightBorder=shouldCellShowRightBorder(pinnedPosition,indexInSection,sectionLength,rootProps.showColumnVerticalBorder,gridHasFiller);columns.push((0,jsx_runtime.jsx)(GridColumnHeaderItem_Memoized,(0,esm_extends.Z)({},sortColumnLookup[colDef.field],{columnMenuOpen:open,filterItemsCounter:filterColumnLookup[colDef.field]&&filterColumnLookup[colDef.field].length,headerHeight,isDragging:colDef.field===dragCol,colDef,colIndex:columnIndex,isResizing:resizeCol===colDef.field,isLast:columnIndex===columnPositions.length-1,hasFocus,tabIndex,pinnedPosition,pinnedOffset,isLastUnpinned,isSiblingFocused,showLeftBorder,showRightBorder},other),colDef.field))}return getFillers(params,columns,0)},getColumnGroupHeaders=({depth,params})=>{const columnsToRender=getColumnsToRender(params);if(0===columnsToRender.renderedColumns.length)return null;const{firstColumnToRender,lastColumnToRender}=columnsToRender,rowStructure=columnGroupsHeaderStructure[depth],firstColumnFieldToRender=visibleColumns[firstColumnToRender].field,firstGroupToRender=columnGroupsModel[firstColumnFieldToRender]?.[depth]??null,firstGroupIndex=rowStructure.findIndex((({groupId,columnFields})=>groupId===firstGroupToRender&&columnFields.includes(firstColumnFieldToRender))),lastColumnFieldToRender=visibleColumns[lastColumnToRender-1].field,lastGroupToRender=columnGroupsModel[lastColumnFieldToRender]?.[depth]??null,lastGroupIndex=rowStructure.findIndex((({groupId,columnFields})=>groupId===lastGroupToRender&&columnFields.includes(lastColumnFieldToRender))),visibleColumnGroupHeader=rowStructure.slice(firstGroupIndex,lastGroupIndex+1).map((groupStructure=>(0,esm_extends.Z)({},groupStructure,{columnFields:groupStructure.columnFields.filter((field=>!1!==columnVisibility[field]))}))).filter((groupStructure=>groupStructure.columnFields.length>0)),firstVisibleColumnIndex=visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender),leftOverflow=visibleColumnGroupHeader[0].columnFields.slice(0,firstVisibleColumnIndex).reduce(((acc,field)=>acc+(columnsLookup[field].computedWidth??0)),0);let columnIndex=firstColumnToRender;const children=visibleColumnGroupHeader.map((({groupId,columnFields},index)=>{const hasFocus=null!==columnGroupHeaderFocus&&columnGroupHeaderFocus.depth===depth&&columnFields.includes(columnGroupHeaderFocus.field),tabIndex=null!==columnGroupHeaderTabIndexState&&columnGroupHeaderTabIndexState.depth===depth&&columnFields.includes(columnGroupHeaderTabIndexState.field)?0:-1,headerInfo={groupId,width:columnFields.reduce(((acc,field)=>acc+columnsLookup[field].computedWidth),0),fields:columnFields,colIndex:columnIndex,hasFocus,tabIndex},pinnedPosition=params.position,pinnedOffset=getPinnedCellOffset(pinnedPosition,headerInfo.width,columnIndex,columnPositions,columnsTotalWidth,scrollbarWidth);columnIndex+=columnFields.length;let indexInSection=index;return pinnedPosition===PinnedColumnPosition.LEFT&&(indexInSection=columnIndex-1),(0,jsx_runtime.jsx)(GridColumnGroupHeader,{groupId,width:headerInfo.width,fields:headerInfo.fields,colIndex:headerInfo.colIndex,depth,isLastColumn:index===visibleColumnGroupHeader.length-1,maxDepth:headerGroupingMaxDepth,height:groupHeaderHeight,hasFocus,tabIndex,pinnedPosition,pinnedOffset,showLeftBorder:shouldCellShowLeftBorder(pinnedPosition,indexInSection),showRightBorder:shouldCellShowRightBorder(pinnedPosition,indexInSection,visibleColumnGroupHeader.length,rootProps.showColumnVerticalBorder,gridHasFiller)},index)}));return getFillers(params,children,leftOverflow)};return{renderContext,leftRenderContext,rightRenderContext,pinnedColumns,visibleColumns,columnPositions,getFillers,getColumnHeadersRow:()=>(0,jsx_runtime.jsxs)(GridColumnHeaderRow,{role:"row","aria-rowindex":headerGroupingMaxDepth+1,ownerState:rootProps,className:gridClasses["row--borderBottom"],children:[leftRenderContext&&getColumnHeaders({position:PinnedColumnPosition.LEFT,renderContext:leftRenderContext},{disableReorder:!0}),getColumnHeaders({renderContext}),rightRenderContext&&getColumnHeaders({position:PinnedColumnPosition.RIGHT,renderContext:rightRenderContext},{disableReorder:!0,separatorSide:GridColumnHeaderSeparatorSides.Left})]}),getColumnsToRender,getColumnGroupHeadersRows:()=>{if(0===headerGroupingMaxDepth)return null;const headerRows=[];for(let depth=0;depth<headerGroupingMaxDepth;depth+=1)headerRows.push((0,jsx_runtime.jsxs)(GridColumnHeaderRow,{role:"row","aria-rowindex":depth+1,ownerState:rootProps,children:[leftRenderContext&&getColumnGroupHeaders({depth,params:{position:PinnedColumnPosition.LEFT,renderContext:leftRenderContext,maxLastColumn:leftRenderContext.lastColumnIndex}}),getColumnGroupHeaders({depth,params:{renderContext}}),rightRenderContext&&getColumnGroupHeaders({depth,params:{position:PinnedColumnPosition.RIGHT,renderContext:rightRenderContext,maxLastColumn:rightRenderContext.lastColumnIndex}})]},depth));return headerRows},getPinnedCellOffset,isDragging:!!dragCol,getInnerProps:()=>({role:"rowgroup"})}})({visibleColumns,sortColumnLookup,filterColumnLookup,columnHeaderTabIndexState,columnGroupHeaderTabIndexState,columnHeaderFocus,columnGroupHeaderFocus,headerGroupingMaxDepth,columnMenuState,columnVisibility,columnGroupsHeaderStructure,hasOtherElementInTabSequence});return(0,jsx_runtime.jsxs)(GridBaseColumnHeaders,(0,esm_extends.Z)({},other,getInnerProps(),{ref,children:[getColumnGroupHeadersRows(),getColumnHeadersRow()]}))}))),useGridColumnMenuSlots_excluded=["displayOrder"],GridColumnMenuContainer_excluded=["hideMenu","colDef","id","labelledby","className","children","open"],StyledMenuList=(0,styled.ZP)(MenuList.Z)((()=>({minWidth:248}))),GridColumnMenuContainer=forwardRef((function GridColumnMenuContainer(props,ref){const{hideMenu,id,labelledby,className,children,open}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnMenuContainer_excluded),handleListKeyDown=react.useCallback((event=>{"Tab"===event.key&&event.preventDefault(),isHideMenuKey(event.key)&&hideMenu(event)}),[hideMenu]);return(0,jsx_runtime.jsx)(StyledMenuList,(0,esm_extends.Z)({id,className:(0,clsx.Z)(gridClasses.menuList,className),"aria-labelledby":labelledby,onKeyDown:handleListKeyDown,autoFocus:open},other,{ref,children}))}));var ListItemIcon=__webpack_require__("./node_modules/@mui/material/ListItemIcon/ListItemIcon.js"),ListItemText=__webpack_require__("./node_modules/@mui/material/ListItemText/ListItemText.js");function GridColumnMenuHideItem(props){const{colDef,onClick}=props,apiRef=useGridApiContext(),rootProps=useGridRootProps(),disabled=1===gridVisibleColumnDefinitionsSelector(apiRef).filter((col=>!0!==col.disableColumnMenu)).length,toggleColumn=react.useCallback((event=>{disabled||(apiRef.current.setColumnVisibility(colDef.field,!1),onClick(event))}),[apiRef,colDef.field,onClick,disabled]);return rootProps.disableColumnSelector||!1===colDef.hideable?null:(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:toggleColumn,disabled,children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuHideIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("columnMenuHideColumn")})]})}function GridColumnMenuManageItem(props){const{onClick}=props,apiRef=useGridApiContext(),rootProps=useGridRootProps(),showColumns=react.useCallback((event=>{onClick(event),apiRef.current.showPreferences(GridPreferencePanelsValue.columns)}),[apiRef,onClick]);return rootProps.disableColumnSelector?null:(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:showColumns,children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuManageColumnsIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("columnMenuManageColumns")})]})}const GridColumnMenu_excluded=["defaultSlots","defaultSlotProps","slots","slotProps"],GRID_COLUMN_MENU_SLOTS={columnMenuSortItem:function GridColumnMenuSortItem(props){const{colDef,onClick}=props,apiRef=useGridApiContext(),sortModel=useGridSelector(apiRef,gridSortModelSelector),rootProps=useGridRootProps(),sortDirection=react.useMemo((()=>{if(!colDef)return null;const sortItem=sortModel.find((item=>item.field===colDef.field));return sortItem?.sort}),[colDef,sortModel]),sortingOrder=colDef.sortingOrder??rootProps.sortingOrder,onSortMenuItemClick=react.useCallback((event=>{onClick(event);const direction=event.currentTarget.getAttribute("data-value")||null;apiRef.current.sortColumn(colDef.field,direction===sortDirection?null:direction)}),[apiRef,colDef,onClick,sortDirection]);if(rootProps.disableColumnSorting||!colDef||!colDef.sortable||!sortingOrder.some((item=>!!item)))return null;const getLabel=key=>{const label=apiRef.current.getLocaleText(key);return"function"==typeof label?label(colDef):label};return(0,jsx_runtime.jsxs)(react.Fragment,{children:[sortingOrder.includes("asc")&&"asc"!==sortDirection?(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:onSortMenuItemClick,"data-value":"asc",children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuSortAscendingIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:getLabel("columnMenuSortAsc")})]}):null,sortingOrder.includes("desc")&&"desc"!==sortDirection?(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:onSortMenuItemClick,"data-value":"desc",children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuSortDescendingIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:getLabel("columnMenuSortDesc")})]}):null,sortingOrder.includes(null)&&null!=sortDirection?(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:onSortMenuItemClick,children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("columnMenuUnsort")})]}):null]})},columnMenuFilterItem:function GridColumnMenuFilterItem(props){const{colDef,onClick}=props,apiRef=useGridApiContext(),rootProps=useGridRootProps(),showFilter=react.useCallback((event=>{onClick(event),apiRef.current.showFilterPanel(colDef.field)}),[apiRef,colDef.field,onClick]);return rootProps.disableColumnFilter||!colDef.filterable?null:(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:showFilter,children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuFilterIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("columnMenuFilter")})]})},columnMenuColumnsItem:function GridColumnMenuColumnsItem(props){return(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(GridColumnMenuHideItem,(0,esm_extends.Z)({},props)),(0,jsx_runtime.jsx)(GridColumnMenuManageItem,(0,esm_extends.Z)({},props))]})}},GRID_COLUMN_MENU_SLOT_PROPS={columnMenuSortItem:{displayOrder:10},columnMenuFilterItem:{displayOrder:20},columnMenuColumnsItem:{displayOrder:30}},GridGenericColumnMenu=forwardRef((function GridGenericColumnMenu(props,ref){const{defaultSlots,defaultSlotProps,slots,slotProps}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnMenu_excluded),orderedSlots=(props=>{const apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),{defaultSlots,defaultSlotProps,slots={},slotProps={},hideMenu,colDef,addDividers=!0}=props,processedComponents=react.useMemo((()=>(0,esm_extends.Z)({},defaultSlots,slots)),[defaultSlots,slots]),processedSlotProps=react.useMemo((()=>{if(!slotProps||0===Object.keys(slotProps).length)return defaultSlotProps;const mergedProps=(0,esm_extends.Z)({},slotProps);return Object.entries(defaultSlotProps).forEach((([key,currentSlotProps])=>{mergedProps[key]=(0,esm_extends.Z)({},currentSlotProps,slotProps[key]||{})})),mergedProps}),[defaultSlotProps,slotProps]),defaultItems=apiRef.current.unstable_applyPipeProcessors("columnMenu",[],props.colDef),userItems=react.useMemo((()=>{const defaultComponentKeys=Object.keys(defaultSlots);return Object.keys(slots).filter((key=>!defaultComponentKeys.includes(key)))}),[slots,defaultSlots]);return react.useMemo((()=>{const sorted=Array.from(new Set([...defaultItems,...userItems])).filter((key=>null!=processedComponents[key])).sort(((a,b)=>{const leftItemProps=processedSlotProps[a],rightItemProps=processedSlotProps[b];return(Number.isFinite(leftItemProps?.displayOrder)?leftItemProps.displayOrder:100)-(Number.isFinite(rightItemProps?.displayOrder)?rightItemProps.displayOrder:100)}));return sorted.reduce(((acc,key,index)=>{let itemProps={colDef,onClick:hideMenu};const processedComponentProps=processedSlotProps[key];if(processedComponentProps){const customProps=(0,objectWithoutPropertiesLoose.Z)(processedComponentProps,useGridColumnMenuSlots_excluded);itemProps=(0,esm_extends.Z)({},itemProps,customProps)}return addDividers&&index!==sorted.length-1?[...acc,[processedComponents[key],itemProps],[rootProps.slots.baseDivider,{}]]:[...acc,[processedComponents[key],itemProps]]}),[])}),[addDividers,colDef,defaultItems,hideMenu,processedComponents,processedSlotProps,userItems,rootProps.slots.baseDivider])})((0,esm_extends.Z)({},other,{defaultSlots,defaultSlotProps,slots,slotProps}));return(0,jsx_runtime.jsx)(GridColumnMenuContainer,(0,esm_extends.Z)({},other,{ref,children:orderedSlots.map((([Component,otherProps],index)=>(0,jsx_runtime.jsx)(Component,(0,esm_extends.Z)({},otherProps),index)))}))})),GridColumnMenu=forwardRef((function GridColumnMenu(props,ref){return(0,jsx_runtime.jsx)(GridGenericColumnMenu,(0,esm_extends.Z)({},props,{ref,defaultSlots:GRID_COLUMN_MENU_SLOTS,defaultSlotProps:GRID_COLUMN_MENU_SLOT_PROPS}))}));const GridNoResultsOverlay=forwardRef((function GridNoResultsOverlay(props,ref){const noResultsOverlayLabel=useGridApiContext().current.getLocaleText("noResultsOverlayLabel");return(0,jsx_runtime.jsx)(GridOverlay,(0,esm_extends.Z)({},props,{ref,children:noResultsOverlayLabel}))}));var Badge=__webpack_require__("./node_modules/@mui/material/Badge/Badge.js"),Checkbox=__webpack_require__("./node_modules/@mui/material/Checkbox/Checkbox.js"),Divider=__webpack_require__("./node_modules/@mui/material/Divider/Divider.js"),FormControl=__webpack_require__("./node_modules/@mui/material/FormControl/FormControl.js"),Button=__webpack_require__("./node_modules/@mui/material/Button/Button.js"),InputAdornment=__webpack_require__("./node_modules/@mui/material/InputAdornment/InputAdornment.js"),Tooltip=__webpack_require__("./node_modules/@mui/material/Tooltip/Tooltip.js"),InputLabel=__webpack_require__("./node_modules/@mui/material/InputLabel/InputLabel.js"),Chip=__webpack_require__("./node_modules/@mui/material/Chip/Chip.js");const GridColumnUnsortedIcon_excluded=["sortingOrder"],GridColumnUnsortedIcon=react.memo((function GridColumnHeaderSortIcon(props){const{sortingOrder}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnUnsortedIcon_excluded),rootProps=useGridRootProps(),[nextSortDirection]=sortingOrder,Icon="asc"===nextSortDirection?rootProps.slots.columnSortedAscendingIcon:rootProps.slots.columnSortedDescendingIcon;return Icon?(0,jsx_runtime.jsx)(Icon,(0,esm_extends.Z)({},other)):null})),GridArrowUpwardIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"}),"ArrowUpward"),GridArrowDownwardIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"}),"ArrowDownward"),GridKeyboardArrowRight=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}),"KeyboardArrowRight"),GridExpandMoreIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"}),"ExpandMore"),GridFilterListIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"}),"FilterList"),GridFilterAltIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"}),"FilterAlt"),GridSearchIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}),"Search"),GridColumnIcon=((0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}),"Menu"),(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckCircle"),(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"}),"ColumnIcon")),GridSeparatorIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("rect",{width:"1",height:"24",x:"11.5",rx:"0.5"}),"Separator"),GridViewHeadlineIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"}),"ViewHeadline"),GridTableRowsIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M21,8H3V4h18V8z M21,10H3v4h18V10z M21,16H3v4h18V16z"}),"TableRows"),GridViewStreamIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M4 18h17v-6H4v6zM4 5v6h17V5H4z"}),"ViewStream"),GridTripleDotsVerticalIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"TripleDotsVertical"),GridCloseIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close"),GridAddIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add"),GridRemoveIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M19 13H5v-2h14v2z"}),"Remove"),GridLoadIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"}),"Load"),GridDragIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"Drag"),GridSaveAltIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"}),"SaveAlt"),GridCheckIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}),"Check"),GridMoreVertIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"MoreVert"),GridVisibilityOffIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"}),"VisibilityOff"),GridViewColumnIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("g",{children:(0,jsx_runtime.jsx)("path",{d:"M14.67,5v14H9.33V5H14.67z M15.67,19H21V5h-5.33V19z M8.33,19V5H3v14H8.33z"})}),"ViewColumn"),GridClearIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Clear"),GridDeleteForeverIcon=((0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"}),"Delete"),(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"}),"Delete")),MUISelectOption_excluded=["native"];const iconSlots={booleanCellTrueIcon:GridCheckIcon,booleanCellFalseIcon:GridCloseIcon,columnMenuIcon:GridTripleDotsVerticalIcon,openFilterButtonIcon:GridFilterListIcon,filterPanelDeleteIcon:GridCloseIcon,columnFilteredIcon:GridFilterAltIcon,columnSelectorIcon:GridColumnIcon,columnUnsortedIcon:GridColumnUnsortedIcon,columnSortedAscendingIcon:GridArrowUpwardIcon,columnSortedDescendingIcon:GridArrowDownwardIcon,columnResizeIcon:GridSeparatorIcon,densityCompactIcon:GridViewHeadlineIcon,densityStandardIcon:GridTableRowsIcon,densityComfortableIcon:GridViewStreamIcon,exportIcon:GridSaveAltIcon,moreActionsIcon:GridMoreVertIcon,treeDataCollapseIcon:GridExpandMoreIcon,treeDataExpandIcon:GridKeyboardArrowRight,groupingCriteriaCollapseIcon:GridExpandMoreIcon,groupingCriteriaExpandIcon:GridKeyboardArrowRight,detailPanelExpandIcon:GridAddIcon,detailPanelCollapseIcon:GridRemoveIcon,rowReorderIcon:GridDragIcon,quickFilterIcon:GridSearchIcon,quickFilterClearIcon:GridCloseIcon,columnMenuHideIcon:GridVisibilityOffIcon,columnMenuSortAscendingIcon:GridArrowUpwardIcon,columnMenuSortDescendingIcon:GridArrowDownwardIcon,columnMenuFilterIcon:GridFilterAltIcon,columnMenuManageColumnsIcon:GridViewColumnIcon,columnMenuClearIcon:GridClearIcon,loadIcon:GridLoadIcon,filterPanelAddIcon:GridAddIcon,filterPanelRemoveAllIcon:GridDeleteForeverIcon,columnReorderIcon:GridDragIcon},material=(0,esm_extends.Z)({},iconSlots,{baseBadge:Badge.Z,baseCheckbox:Checkbox.Z,baseDivider:Divider.Z,baseTextField:TextField.Z,baseFormControl:FormControl.Z,baseSelect:Select.Z,baseButton:Button.Z,baseIconButton:IconButton.Z,baseInputAdornment:InputAdornment.Z,baseTooltip:Tooltip.Z,basePopper:Popper.Z,baseInputLabel:InputLabel.Z,baseSelectOption:function MUISelectOption(_ref){let{native}=_ref,props=(0,objectWithoutPropertiesLoose.Z)(_ref,MUISelectOption_excluded);return native?(0,jsx_runtime.jsx)("option",(0,esm_extends.Z)({},props)):(0,jsx_runtime.jsx)(MenuItem.Z,(0,esm_extends.Z)({},props))},baseChip:Chip.Z}),DATA_GRID_DEFAULT_SLOTS_COMPONENTS=(0,esm_extends.Z)({},material,{cell:MemoizedGridCell,skeletonCell:GridSkeletonCell_Memoized,columnHeaderFilterIconButton:function GridColumnHeaderFilterIconButtonWrapped(props){return props.counter?(0,jsx_runtime.jsx)(GridColumnHeaderFilterIconButton,(0,esm_extends.Z)({},props)):null},columnHeaderSortIcon:GridColumnHeaderSortIcon,columnMenu:GridColumnMenu,columnHeaders:MemoizedGridColumnHeaders,detailPanels:function GridDetailPanels(_){return null},footer:GridFooter,footerRowCount:GridRowCount,toolbar:null,pinnedRows:function GridPinnedRows(_){return null},loadingOverlay:GridLoadingOverlay,noResultsOverlay:GridNoResultsOverlay,noRowsOverlay:GridNoRowsOverlay,pagination:GridPagination,filterPanel:GridFilterPanel,columnsPanel:function GridColumnsPanel(props){const rootProps=useGridRootProps();return(0,jsx_runtime.jsx)(GridPanelWrapper,(0,esm_extends.Z)({},props,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnsManagement,(0,esm_extends.Z)({},rootProps.slotProps?.columnsManagement))}))},columnsManagement:function GridColumnsManagement(props){const apiRef=useGridApiContext(),searchInputRef=react.useRef(null),columns=useGridSelector(apiRef,gridColumnDefinitionsSelector),initialColumnVisibilityModel=(0,useLazyRef.Z)((()=>gridColumnVisibilityModelSelector(apiRef))).current,columnVisibilityModel=useGridSelector(apiRef,gridColumnVisibilityModelSelector),rootProps=useGridRootProps(),[searchValue,setSearchValue]=react.useState(""),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["columnsManagement"],header:["columnsManagementHeader"],searchInput:["columnsManagementSearchInput"],footer:["columnsManagementFooter"],row:["columnsManagementRow"]},getDataGridUtilityClass,classes)})(rootProps),{sort,searchPredicate=defaultSearchPredicate,autoFocusSearchField=!0,disableShowHideToggle=!1,disableResetButton=!1,toggleAllMode="all",getTogglableColumns,searchInputProps}=props,isResetDisabled=react.useMemo((()=>((a,b)=>{const aFalseValues=new Set(Object.keys(a).filter((key=>!1===a[key]))),bFalseValues=new Set(Object.keys(b).filter((key=>!1===b[key])));if(aFalseValues.size!==bFalseValues.size)return!1;let result=!0;return aFalseValues.forEach((key=>{bFalseValues.has(key)||(result=!1)})),result})(columnVisibilityModel,initialColumnVisibilityModel)),[columnVisibilityModel,initialColumnVisibilityModel]),sortedColumns=react.useMemo((()=>{switch(sort){case"asc":return[...columns].sort(((a,b)=>GridColumnsManagement_collator.compare(a.headerName||a.field,b.headerName||b.field)));case"desc":return[...columns].sort(((a,b)=>-GridColumnsManagement_collator.compare(a.headerName||a.field,b.headerName||b.field)));default:return columns}}),[columns,sort]),toggleColumn=event=>{const{name:field}=event.target;apiRef.current.setColumnVisibility(field,!1===columnVisibilityModel[field])},currentColumns=react.useMemo((()=>{const togglableColumns=getTogglableColumns?getTogglableColumns(sortedColumns):null,togglableSortedColumns=togglableColumns?sortedColumns.filter((({field})=>togglableColumns.includes(field))):sortedColumns;return searchValue?togglableSortedColumns.filter((column=>searchPredicate(column,searchValue.toLowerCase()))):togglableSortedColumns}),[sortedColumns,searchValue,searchPredicate,getTogglableColumns]),toggleAllColumns=react.useCallback((isVisible=>{const currentModel=gridColumnVisibilityModelSelector(apiRef),newModel=(0,esm_extends.Z)({},currentModel),togglableColumns=getTogglableColumns?getTogglableColumns(columns):null;return("filteredOnly"===toggleAllMode?currentColumns:columns).forEach((col=>{col.hideable&&(null==togglableColumns||togglableColumns.includes(col.field))&&(isVisible?delete newModel[col.field]:newModel[col.field]=!1)})),apiRef.current.setColumnVisibilityModel(newModel)}),[apiRef,columns,getTogglableColumns,toggleAllMode,currentColumns]),handleSearchValueChange=react.useCallback((event=>{setSearchValue(event.target.value)}),[]),hideableColumns=react.useMemo((()=>currentColumns.filter((col=>col.hideable))),[currentColumns]),allHideableColumnsVisible=react.useMemo((()=>hideableColumns.every((column=>null==columnVisibilityModel[column.field]||!1!==columnVisibilityModel[column.field]))),[columnVisibilityModel,hideableColumns]),allHideableColumnsHidden=react.useMemo((()=>hideableColumns.every((column=>!1===columnVisibilityModel[column.field]))),[columnVisibilityModel,hideableColumns]),firstSwitchRef=react.useRef(null);react.useEffect((()=>{autoFocusSearchField?searchInputRef.current.focus():firstSwitchRef.current&&"function"==typeof firstSwitchRef.current.focus&&firstSwitchRef.current.focus()}),[autoFocusSearchField]);let firstHideableColumnFound=!1;const isFirstHideableColumn=column=>!1===firstHideableColumnFound&&!1!==column.hideable&&(firstHideableColumnFound=!0,!0),handleSearchReset=react.useCallback((()=>{setSearchValue(""),searchInputRef.current.focus()}),[]);return(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(GridColumnsManagementHeader,{className:classes.header,ownerState:rootProps,children:(0,jsx_runtime.jsx)(SearchInput,(0,esm_extends.Z)({as:rootProps.slots.baseTextField,ownerState:rootProps,placeholder:apiRef.current.getLocaleText("columnsManagementSearchTitle"),inputRef:searchInputRef,className:classes.searchInput,value:searchValue,onChange:handleSearchValueChange,variant:"outlined",size:"small",type:"search",InputProps:{startAdornment:(0,jsx_runtime.jsx)(rootProps.slots.baseInputAdornment,{position:"start",children:(0,jsx_runtime.jsx)(rootProps.slots.quickFilterIcon,{})}),endAdornment:(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({"aria-label":apiRef.current.getLocaleText("columnsManagementDeleteIconLabel"),size:"small",sx:[searchValue?{visibility:"visible"}:{visibility:"hidden"}],tabIndex:-1,onClick:handleSearchReset},rootProps.slotProps?.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.quickFilterClearIcon,{fontSize:"small"})}))},inputProps:{"aria-label":apiRef.current.getLocaleText("columnsManagementSearchTitle")},autoComplete:"off",fullWidth:!0},rootProps.slotProps?.baseTextField,searchInputProps))}),(0,jsx_runtime.jsxs)(GridColumnsManagementBody,{className:classes.root,ownerState:rootProps,children:[currentColumns.map((column=>(0,jsx_runtime.jsx)(FormControlLabel.Z,{className:classes.row,control:(0,jsx_runtime.jsx)(rootProps.slots.baseCheckbox,(0,esm_extends.Z)({disabled:!1===column.hideable,checked:!1!==columnVisibilityModel[column.field],onClick:toggleColumn,name:column.field,sx:{p:.5},inputRef:isFirstHideableColumn(column)?firstSwitchRef:void 0},rootProps.slotProps?.baseCheckbox)),label:column.headerName||column.field},column.field))),0===currentColumns.length&&(0,jsx_runtime.jsx)(GridColumnsManagementEmptyText,{ownerState:rootProps,children:apiRef.current.getLocaleText("columnsManagementNoColumns")})]}),disableShowHideToggle&&disableResetButton||!(currentColumns.length>0)?null:(0,jsx_runtime.jsxs)(GridColumnsManagementFooter,{ownerState:rootProps,className:classes.footer,children:[disableShowHideToggle?(0,jsx_runtime.jsx)("span",{}):(0,jsx_runtime.jsx)(FormControlLabel.Z,{control:(0,jsx_runtime.jsx)(rootProps.slots.baseCheckbox,(0,esm_extends.Z)({disabled:0===hideableColumns.length,checked:allHideableColumnsVisible,indeterminate:!allHideableColumnsVisible&&!allHideableColumnsHidden,onClick:()=>toggleAllColumns(!allHideableColumnsVisible),name:apiRef.current.getLocaleText("columnsManagementShowHideAllText"),sx:{p:.5}},rootProps.slotProps?.baseCheckbox)),label:apiRef.current.getLocaleText("columnsManagementShowHideAllText")}),disableResetButton?null:(0,jsx_runtime.jsx)(rootProps.slots.baseButton,(0,esm_extends.Z)({onClick:()=>apiRef.current.setColumnVisibilityModel(initialColumnVisibilityModel),disabled:isResetDisabled},rootProps.slotProps?.baseButton,{children:apiRef.current.getLocaleText("columnsManagementReset")}))]})]})},panel:GridPanel,row:MemoizedGridRow});function useProps(allProps){return react.useMemo((()=>function groupForwardedProps(props){if(props.slotProps?.root)return props;const keys=Object.keys(props);if(!keys.some((key=>key.startsWith("aria-")||key.startsWith("data-"))))return props;const newProps={},forwardedProps=props.forwardedProps??{};for(let i=0;i<keys.length;i+=1){const key=keys[i];key.startsWith("aria-")||key.startsWith("data-")?forwardedProps[key]=props[key]:newProps[key]=props[key]}return newProps.forwardedProps=forwardedProps,newProps}(allProps)),[allProps])}const DATA_GRID_FORCED_PROPS={disableMultipleColumnsFiltering:!0,disableMultipleColumnsSorting:!0,throttleRowsMs:void 0,hideFooterRowCount:!1,pagination:!0,checkboxSelectionVisibleOnly:!1,disableColumnReorder:!0,keepColumnPositionIfDraggedOutside:!1,signature:"DataGrid",unstable_listView:!1},defaultSlots=DATA_GRID_DEFAULT_SLOTS_COMPONENTS,useDataGridProps=inProps=>{const themedProps=useProps((0,useThemeProps.Z)({props:inProps,name:"MuiDataGrid"})),localeText=react.useMemo((()=>(0,esm_extends.Z)({},GRID_DEFAULT_LOCALE_TEXT,themedProps.localeText)),[themedProps.localeText]),slots=react.useMemo((()=>function computeSlots({defaultSlots,slots}){const overrides=slots;if(!overrides||0===Object.keys(overrides).length)return defaultSlots;const result=(0,esm_extends.Z)({},defaultSlots);return Object.keys(overrides).forEach((key=>{const k=key;void 0!==overrides[k]&&(result[k]=overrides[k])})),result}({defaultSlots,slots:themedProps.slots})),[themedProps.slots]),injectDefaultProps=react.useMemo((()=>Object.keys(DATA_GRID_PROPS_DEFAULT_VALUES).reduce(((acc,key)=>(acc[key]=themedProps[key]??DATA_GRID_PROPS_DEFAULT_VALUES[key],acc)),{})),[themedProps]);return react.useMemo((()=>(0,esm_extends.Z)({},themedProps,injectDefaultProps,{localeText,slots},DATA_GRID_FORCED_PROPS)),[themedProps,localeText,slots,injectDefaultProps])},configuration={hooks:{useGridAriaAttributes:()=>{const apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),visibleColumns=useGridSelector(apiRef,gridVisibleColumnDefinitionsSelector),accessibleRowCount=useGridSelector(apiRef,gridExpandedRowCountSelector),headerGroupingMaxDepth=useGridSelector(apiRef,gridColumnGroupsHeaderMaxDepthSelector),pinnedRowsCount=useGridSelector(apiRef,gridPinnedRowsCountSelector);return{role:"grid","aria-colcount":visibleColumns.length,"aria-rowcount":headerGroupingMaxDepth+1+pinnedRowsCount+accessibleRowCount,"aria-multiselectable":isMultipleRowSelectionEnabled(rootProps)}},useGridRowAriaAttributes:()=>{const apiRef=useGridPrivateApiContext(),selectedIdsLookup=useGridSelector(apiRef,selectedIdsLookupSelector),headerGroupingMaxDepth=useGridSelector(apiRef,gridColumnGroupsHeaderMaxDepthSelector);return react.useCallback(((rowNode,index)=>{const ariaAttributes={},ariaRowIndex=index+headerGroupingMaxDepth+2;return ariaAttributes["aria-rowindex"]=ariaRowIndex,apiRef.current.isRowSelectable(rowNode.id)&&(ariaAttributes["aria-selected"]=void 0!==selectedIdsLookup[rowNode.id]),ariaAttributes}),[apiRef,selectedIdsLookup,headerGroupingMaxDepth])}}},DataGridRaw=forwardRef((function DataGrid(inProps,ref){const props=useDataGridProps(inProps),privateApiRef=useDataGridComponent(props.apiRef,props);return(0,jsx_runtime.jsx)(GridContextProvider,{privateApiRef,configuration,props,children:(0,jsx_runtime.jsx)(MemoizedGridRoot,(0,esm_extends.Z)({className:props.className,style:props.style,sx:props.sx},props.forwardedProps,props.slotProps?.root,{ref}))})})),DataGrid=react.memo(DataGridRaw);DataGridRaw.propTypes={apiRef:prop_types_default().shape({current:prop_types_default().object.isRequired}),"aria-label":prop_types_default().string,"aria-labelledby":prop_types_default().string,autoHeight:prop_types_default().bool,autoPageSize:prop_types_default().bool,autosizeOnMount:prop_types_default().bool,autosizeOptions:prop_types_default().shape({columns:prop_types_default().arrayOf(prop_types_default().string),disableColumnVirtualization:prop_types_default().bool,expand:prop_types_default().bool,includeHeaders:prop_types_default().bool,includeOutliers:prop_types_default().bool,outliersFactor:prop_types_default().number}),cellModesModel:prop_types_default().object,checkboxSelection:prop_types_default().bool,classes:prop_types_default().object,clipboardCopyCellDelimiter:prop_types_default().string,columnBufferPx:prop_types_default().number,columnGroupHeaderHeight:prop_types_default().number,columnGroupingModel:prop_types_default().arrayOf(prop_types_default().object),columnHeaderHeight:prop_types_default().number,columns:prop_types_default().arrayOf(prop_types_default().object).isRequired,columnVisibilityModel:prop_types_default().object,density:prop_types_default().oneOf(["comfortable","compact","standard"]),disableAutosize:prop_types_default().bool,disableColumnFilter:prop_types_default().bool,disableColumnMenu:prop_types_default().bool,disableColumnResize:prop_types_default().bool,disableColumnSelector:prop_types_default().bool,disableColumnSorting:prop_types_default().bool,disableDensitySelector:prop_types_default().bool,disableEval:prop_types_default().bool,disableMultipleRowSelection:prop_types_default().bool,disableRowSelectionOnClick:prop_types_default().bool,disableVirtualization:prop_types_default().bool,editMode:prop_types_default().oneOf(["cell","row"]),estimatedRowCount:prop_types_default().number,experimentalFeatures:prop_types_default().shape({warnIfFocusStateIsNotSynced:prop_types_default().bool}),filterDebounceMs:prop_types_default().number,filterMode:prop_types_default().oneOf(["client","server"]),filterModel:prop_types_default().shape({items:prop_types_default().arrayOf(prop_types_default().shape({field:prop_types_default().string.isRequired,id:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]),operator:prop_types_default().string.isRequired,value:prop_types_default().any})).isRequired,logicOperator:prop_types_default().oneOf(["and","or"]),quickFilterExcludeHiddenColumns:prop_types_default().bool,quickFilterLogicOperator:prop_types_default().oneOf(["and","or"]),quickFilterValues:prop_types_default().array}),forwardedProps:prop_types_default().object,getCellClassName:prop_types_default().func,getDetailPanelContent:prop_types_default().func,getEstimatedRowHeight:prop_types_default().func,getRowClassName:prop_types_default().func,getRowHeight:prop_types_default().func,getRowId:prop_types_default().func,getRowSpacing:prop_types_default().func,hideFooter:prop_types_default().bool,hideFooterPagination:prop_types_default().bool,hideFooterSelectedRowCount:prop_types_default().bool,ignoreDiacritics:prop_types_default().bool,ignoreValueFormatterDuringExport:prop_types_default().oneOfType([prop_types_default().shape({clipboardExport:prop_types_default().bool,csvExport:prop_types_default().bool}),prop_types_default().bool]),indeterminateCheckboxAction:prop_types_default().oneOf(["deselect","select"]),initialState:prop_types_default().object,isCellEditable:prop_types_default().func,isRowSelectable:prop_types_default().func,keepNonExistentRowsSelected:prop_types_default().bool,loading:prop_types_default().bool,localeText:prop_types_default().object,logger:prop_types_default().shape({debug:prop_types_default().func.isRequired,error:prop_types_default().func.isRequired,info:prop_types_default().func.isRequired,warn:prop_types_default().func.isRequired}),logLevel:prop_types_default().oneOf(["debug","error","info","warn",!1]),nonce:prop_types_default().string,onCellClick:prop_types_default().func,onCellDoubleClick:prop_types_default().func,onCellEditStart:prop_types_default().func,onCellEditStop:prop_types_default().func,onCellKeyDown:prop_types_default().func,onCellModesModelChange:prop_types_default().func,onClipboardCopy:prop_types_default().func,onColumnHeaderClick:prop_types_default().func,onColumnHeaderContextMenu:prop_types_default().func,onColumnHeaderDoubleClick:prop_types_default().func,onColumnHeaderEnter:prop_types_default().func,onColumnHeaderLeave:prop_types_default().func,onColumnHeaderOut:prop_types_default().func,onColumnHeaderOver:prop_types_default().func,onColumnOrderChange:prop_types_default().func,onColumnResize:prop_types_default().func,onColumnVisibilityModelChange:prop_types_default().func,onColumnWidthChange:prop_types_default().func,onDensityChange:prop_types_default().func,onFilterModelChange:prop_types_default().func,onMenuClose:prop_types_default().func,onMenuOpen:prop_types_default().func,onPaginationMetaChange:prop_types_default().func,onPaginationModelChange:prop_types_default().func,onPreferencePanelClose:prop_types_default().func,onPreferencePanelOpen:prop_types_default().func,onProcessRowUpdateError:prop_types_default().func,onResize:prop_types_default().func,onRowClick:prop_types_default().func,onRowCountChange:prop_types_default().func,onRowDoubleClick:prop_types_default().func,onRowEditStart:prop_types_default().func,onRowEditStop:prop_types_default().func,onRowModesModelChange:prop_types_default().func,onRowSelectionModelChange:prop_types_default().func,onSortModelChange:prop_types_default().func,onStateChange:prop_types_default().func,pageSizeOptions:prop_types_default().arrayOf(prop_types_default().oneOfType([prop_types_default().number,prop_types_default().shape({label:prop_types_default().string.isRequired,value:prop_types_default().number.isRequired})]).isRequired),pagination:prop_types_default().oneOf([!0]),paginationMeta:prop_types_default().shape({hasNextPage:prop_types_default().bool}),paginationMode:prop_types_default().oneOf(["client","server"]),paginationModel:prop_types_default().shape({page:prop_types_default().number.isRequired,pageSize:prop_types_default().number.isRequired}),processRowUpdate:prop_types_default().func,resetPageOnSortFilter:prop_types_default().bool,resizeThrottleMs:prop_types_default().number,rowBufferPx:prop_types_default().number,rowCount:prop_types_default().number,rowHeight:prop_types_default().number,rowModesModel:prop_types_default().object,rowPositionsDebounceMs:prop_types_default().number,rows:prop_types_default().arrayOf(prop_types_default().object),rowSelection:prop_types_default().bool,rowSelectionModel:prop_types_default().oneOfType([prop_types_default().arrayOf(prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]).isRequired),prop_types_default().number,prop_types_default().string]),rowSpacingType:prop_types_default().oneOf(["border","margin"]),scrollbarSize:prop_types_default().number,showCellVerticalBorder:prop_types_default().bool,showColumnVerticalBorder:prop_types_default().bool,slotProps:prop_types_default().object,slots:prop_types_default().object,sortingMode:prop_types_default().oneOf(["client","server"]),sortingOrder:prop_types_default().arrayOf(prop_types_default().oneOf(["asc","desc"])),sortModel:prop_types_default().arrayOf(prop_types_default().shape({field:prop_types_default().string.isRequired,sort:prop_types_default().oneOf(["asc","desc"])})),sx:prop_types_default().oneOfType([prop_types_default().arrayOf(prop_types_default().oneOfType([prop_types_default().func,prop_types_default().object,prop_types_default().bool])),prop_types_default().func,prop_types_default().object]),unstable_rowSpanning:prop_types_default().bool,virtualizeColumnsWithAutoRowHeight:prop_types_default().bool}},"./node_modules/@mui/x-internals/reactMajor.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var _interopRequireWildcard=__webpack_require__("./node_modules/@babel/runtime/helpers/interopRequireWildcard.js").default;exports.Z=void 0;var React=_interopRequireWildcard(__webpack_require__("./node_modules/react/index.js"));exports.Z=parseInt(React.version,10)},"./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var React=__webpack_require__("./node_modules/react/index.js");var objectIs="function"==typeof Object.is?Object.is:function is(x,y){return x===y&&(0!==x||1/x==1/y)||x!=x&&y!=y},useState=React.useState,useEffect=React.useEffect,useLayoutEffect=React.useLayoutEffect,useDebugValue=React.useDebugValue;function checkIfSnapshotChanged(inst){var latestGetSnapshot=inst.getSnapshot;inst=inst.value;try{var nextValue=latestGetSnapshot();return!objectIs(inst,nextValue)}catch(error){return!0}}var shim="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function useSyncExternalStore$1(subscribe,getSnapshot){return getSnapshot()}:function useSyncExternalStore$2(subscribe,getSnapshot){var value=getSnapshot(),_useState=useState({inst:{value,getSnapshot}}),inst=_useState[0].inst,forceUpdate=_useState[1];return useLayoutEffect((function(){inst.value=value,inst.getSnapshot=getSnapshot,checkIfSnapshotChanged(inst)&&forceUpdate({inst})}),[subscribe,value,getSnapshot]),useEffect((function(){return checkIfSnapshotChanged(inst)&&forceUpdate({inst}),subscribe((function(){checkIfSnapshotChanged(inst)&&forceUpdate({inst})}))}),[subscribe]),useDebugValue(value),value};exports.useSyncExternalStore=void 0!==React.useSyncExternalStore?React.useSyncExternalStore:shim},"./node_modules/use-sync-external-store/shim/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.js")}}]);
//# sourceMappingURL=6504.72253845.iframe.bundle.js.map